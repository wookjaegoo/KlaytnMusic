{"version":3,"file":"static/js/187.9a042d8e.chunk.js","mappings":"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","sources":["../node_modules/blob-to-it/index.js","../node_modules/caver-js/node_modules/any-signal/index.js","../node_modules/caver-js/node_modules/ipfs-utils/src/env.js","../node_modules/caver-js/node_modules/ipfs-utils/src/fetch.browser.js","../node_modules/caver-js/node_modules/ipfs-utils/src/files/url-source.js","../node_modules/caver-js/node_modules/ipfs-utils/src/http.js","../node_modules/caver-js/node_modules/ipfs-utils/src/http/error.js","../node_modules/caver-js/node_modules/ipfs-utils/src/http/fetch.browser.js","../node_modules/dag-jose/src/encryption.ts","../node_modules/dag-jose/src/index.ts","../node_modules/dag-jose/src/signing.ts","../node_modules/dag-jose/src/utils.ts","../node_modules/caver-js/node_modules/ipfs-core-utils/src/multibases.js","../node_modules/caver-js/node_modules/ipfs-core-utils/src/multicodecs.js","../node_modules/caver-js/node_modules/ipfs-core-utils/src/multihashes.js","../node_modules/caver-js/node_modules/@ipld/dag-cbor/esm/index.js","../node_modules/cborg/esm/lib/json/encode.js","../node_modules/cborg/esm/lib/json/decode.js","../node_modules/@ipld/dag-json/esm/index.js","../node_modules/@multiformats/multiaddr/node_modules/ip-regex/index.js","../node_modules/clone-regexp/node_modules/is-regexp/index.js","../node_modules/clone-regexp/index.js","../node_modules/super-regex/index.js","../node_modules/function-timeout/browser.js","../node_modules/@multiformats/multiaddr/node_modules/is-ip/index.js","../node_modules/@multiformats/multiaddr/src/ip.ts","../node_modules/@multiformats/multiaddr/src/protocols-table.ts","../node_modules/@multiformats/multiaddr/src/convert.ts","../node_modules/@multiformats/multiaddr/src/codec.ts","../node_modules/@multiformats/multiaddr/src/index.ts","../node_modules/parse-duration/index.mjs","../node_modules/@libp2p/logger/src/index.ts","../node_modules/merge-options/index.mjs","../../src/parse.ts","../../src/parser.ts","../../src/is-ip.ts","../node_modules/@multiformats/multiaddr-to-uri/node_modules/multiformats/vendor/base-x.js","../node_modules/@multiformats/multiaddr-to-uri/node_modules/multiformats/src/bytes.js","../node_modules/@multiformats/multiaddr-to-uri/node_modules/multiformats/src/bases/base.js","../node_modules/@multiformats/multiaddr-to-uri/node_modules/multiformats/src/bases/identity.js","../node_modules/@multiformats/multiaddr-to-uri/node_modules/multiformats/src/bases/base2.js","../node_modules/@multiformats/multiaddr-to-uri/node_modules/multiformats/src/bases/base8.js","../node_modules/@multiformats/multiaddr-to-uri/node_modules/multiformats/src/bases/base10.js","../node_modules/@multiformats/multiaddr-to-uri/node_modules/multiformats/src/bases/base16.js","../node_modules/@multiformats/multiaddr-to-uri/node_modules/multiformats/src/bases/base32.js","../node_modules/@multiformats/multiaddr-to-uri/node_modules/multiformats/src/bases/base36.js","../node_modules/@multiformats/multiaddr-to-uri/node_modules/multiformats/src/bases/base58.js","../node_modules/@multiformats/multiaddr-to-uri/node_modules/multiformats/src/bases/base64.js","../node_modules/@multiformats/multiaddr-to-uri/node_modules/multiformats/src/bases/base256emoji.js","../node_modules/@multiformats/multiaddr-to-uri/node_modules/multiformats/vendor/varint.js","../node_modules/@multiformats/multiaddr-to-uri/node_modules/multiformats/src/varint.js","../node_modules/@multiformats/multiaddr-to-uri/node_modules/multiformats/src/hashes/digest.js","../node_modules/@multiformats/multiaddr-to-uri/node_modules/multiformats/src/hashes/hasher.js","../node_modules/@multiformats/multiaddr-to-uri/node_modules/multiformats/src/hashes/sha2-browser.js","../node_modules/@multiformats/multiaddr-to-uri/node_modules/multiformats/src/hashes/identity.js","../node_modules/@multiformats/multiaddr-to-uri/node_modules/multiformats/src/codecs/raw.js","../node_modules/@multiformats/multiaddr-to-uri/node_modules/multiformats/src/codecs/json.js","../node_modules/@multiformats/multiaddr-to-uri/node_modules/multiformats/src/cid.js","../node_modules/@multiformats/multiaddr-to-uri/node_modules/multiformats/src/basics.js","../node_modules/@multiformats/multiaddr-to-uri/node_modules/uint8arrays/src/util/as-uint8array.ts","../node_modules/@multiformats/multiaddr-to-uri/node_modules/uint8arrays/src/alloc.ts","../node_modules/@multiformats/multiaddr-to-uri/node_modules/uint8arrays/src/util/bases.ts","../node_modules/@multiformats/multiaddr-to-uri/node_modules/uint8arrays/src/to-string.ts","../node_modules/@multiformats/multiaddr-to-uri/node_modules/@multiformats/multiaddr/src/ip.ts","../node_modules/@multiformats/multiaddr-to-uri/node_modules/@multiformats/multiaddr/src/protocols-table.ts","../node_modules/@multiformats/multiaddr-to-uri/node_modules/uint8arrays/src/from-string.ts","../node_modules/@multiformats/multiaddr-to-uri/node_modules/uint8arrays/src/concat.ts","../node_modules/@multiformats/multiaddr-to-uri/node_modules/@multiformats/multiaddr/src/convert.ts","../node_modules/@multiformats/multiaddr-to-uri/node_modules/@multiformats/multiaddr/src/codec.ts","../node_modules/@multiformats/multiaddr-to-uri/node_modules/@multiformats/multiaddr/src/index.ts","../node_modules/@multiformats/multiaddr-to-uri/node_modules/uint8arrays/src/equals.ts","../node_modules/@multiformats/multiaddr-to-uri/src/index.ts","../node_modules/caver-js/node_modules/ipfs-core-utils/src/to-url-string.js","../node_modules/caver-js/node_modules/ipfs-core-utils/src/agent.browser.js","../node_modules/caver-js/node_modules/ipfs-http-client/src/lib/core.js","../node_modules/caver-js/node_modules/ipfs-http-client/src/lib/configure.js","../node_modules/caver-js/node_modules/ipfs-http-client/src/lib/mode-to-string.js","../node_modules/caver-js/node_modules/ipfs-http-client/src/lib/parse-mtime.js","../node_modules/caver-js/node_modules/ipfs-http-client/src/lib/to-url-search-params.js","../node_modules/caver-js/node_modules/ipfs-http-client/src/bitswap/wantlist.js","../node_modules/caver-js/node_modules/ipfs-http-client/src/bitswap/wantlist-for-peer.js","../node_modules/@libp2p/peer-id/node_modules/multiformats/vendor/varint.js","../node_modules/@libp2p/peer-id/node_modules/multiformats/src/varint.js","../node_modules/@libp2p/peer-id/node_modules/multiformats/src/bytes.js","../node_modules/@libp2p/peer-id/node_modules/multiformats/src/hashes/digest.js","../node_modules/@libp2p/peer-id/node_modules/multiformats/vendor/base-x.js","../node_modules/@libp2p/peer-id/node_modules/multiformats/src/bases/base.js","../node_modules/@libp2p/peer-id/node_modules/multiformats/src/bases/base58.js","../node_modules/@libp2p/peer-id/node_modules/multiformats/src/bases/base32.js","../node_modules/@libp2p/peer-id/node_modules/multiformats/src/cid.js","../node_modules/@libp2p/peer-id/node_modules/multiformats/src/bases/identity.js","../node_modules/@libp2p/peer-id/node_modules/multiformats/src/bases/base2.js","../node_modules/@libp2p/peer-id/node_modules/multiformats/src/bases/base8.js","../node_modules/@libp2p/peer-id/node_modules/multiformats/src/bases/base10.js","../node_modules/@libp2p/peer-id/node_modules/multiformats/src/bases/base16.js","../node_modules/@libp2p/peer-id/node_modules/multiformats/src/bases/base36.js","../node_modules/@libp2p/peer-id/node_modules/multiformats/src/bases/base64.js","../node_modules/@libp2p/peer-id/node_modules/multiformats/src/bases/base256emoji.js","../node_modules/@libp2p/peer-id/node_modules/multiformats/src/hashes/hasher.js","../node_modules/@libp2p/peer-id/node_modules/multiformats/src/hashes/sha2-browser.js","../node_modules/@libp2p/peer-id/node_modules/multiformats/src/hashes/identity.js","../node_modules/@libp2p/peer-id/node_modules/multiformats/src/codecs/raw.js","../node_modules/@libp2p/peer-id/node_modules/multiformats/src/codecs/json.js","../node_modules/@libp2p/peer-id/node_modules/multiformats/src/basics.js","../node_modules/@libp2p/peer-id/node_modules/uint8arrays/src/equals.ts","../node_modules/@libp2p/interface-peer-id/src/index.ts","../node_modules/@libp2p/peer-id/src/index.ts","../node_modules/caver-js/node_modules/ipfs-http-client/src/bitswap/stat.js","../node_modules/caver-js/node_modules/ipfs-http-client/src/bitswap/unwant.js","../node_modules/caver-js/node_modules/ipfs-http-client/src/block/get.js","../node_modules/@babel/runtime/helpers/esm/asyncIterator.js","../node_modules/caver-js/node_modules/ipfs-core-utils/src/files/utils.js","../node_modules/caver-js/node_modules/ipfs-core-utils/src/files/normalise-content.browser.js","../node_modules/@babel/runtime/helpers/esm/OverloadYield.js","../node_modules/@babel/runtime/helpers/esm/AsyncGenerator.js","../node_modules/@babel/runtime/helpers/esm/wrapAsyncGenerator.js","../node_modules/@babel/runtime/helpers/esm/awaitAsyncGenerator.js","../node_modules/@babel/runtime/helpers/esm/asyncGeneratorDelegate.js","../node_modules/caver-js/node_modules/ipfs-core-utils/src/files/normalise-candidate-multiple.js","../node_modules/caver-js/node_modules/ipfs-core-utils/src/files/normalise-input-multiple.browser.js","../node_modules/caver-js/node_modules/ipfs-core-utils/src/mode-to-string.js","../node_modules/caver-js/node_modules/ipfs-core-utils/src/multipart-request.browser.js","../node_modules/caver-js/node_modules/ipfs-http-client/src/lib/abort-signal.js","../node_modules/caver-js/node_modules/ipfs-http-client/src/block/put.js","../node_modules/caver-js/node_modules/ipfs-http-client/src/block/rm.js","../node_modules/caver-js/node_modules/ipfs-http-client/src/block/stat.js","../node_modules/caver-js/node_modules/ipfs-http-client/src/block/index.js","../node_modules/caver-js/node_modules/ipfs-http-client/src/bootstrap/add.js","../node_modules/caver-js/node_modules/ipfs-http-client/src/bootstrap/clear.js","../node_modules/caver-js/node_modules/ipfs-http-client/src/bootstrap/list.js","../node_modules/caver-js/node_modules/ipfs-http-client/src/bootstrap/reset.js","../node_modules/caver-js/node_modules/ipfs-http-client/src/bootstrap/rm.js","../node_modules/caver-js/node_modules/ipfs-http-client/src/bootstrap/index.js","../node_modules/caver-js/node_modules/ipfs-http-client/src/config/profiles/apply.js","../node_modules/caver-js/node_modules/ipfs-http-client/src/lib/object-to-camel.js","../node_modules/caver-js/node_modules/ipfs-http-client/src/config/profiles/list.js","../node_modules/caver-js/node_modules/ipfs-http-client/src/config/profiles/index.js","../node_modules/caver-js/node_modules/ipfs-http-client/src/config/get.js","../node_modules/caver-js/node_modules/ipfs-http-client/src/config/get-all.js","../node_modules/caver-js/node_modules/ipfs-http-client/src/config/replace.js","../node_modules/caver-js/node_modules/ipfs-http-client/src/config/set.js","../node_modules/caver-js/node_modules/ipfs-http-client/src/config/index.js","../node_modules/caver-js/node_modules/ipfs-http-client/src/dag/export.js","../node_modules/caver-js/node_modules/ipfs-http-client/src/lib/resolve.js","../node_modules/caver-js/node_modules/ipfs-http-client/src/dag/get.js","../node_modules/caver-js/node_modules/ipfs-http-client/src/dag/import.js","../node_modules/caver-js/node_modules/ipfs-http-client/src/dag/put.js","../node_modules/caver-js/node_modules/ipfs-http-client/src/dag/resolve.js","../node_modules/caver-js/node_modules/ipfs-http-client/src/dag/index.js","../node_modules/caver-js/node_modules/ipfs-http-client/src/dht/response-types.js","../node_modules/caver-js/node_modules/ipfs-http-client/src/dht/map-event.js","../node_modules/caver-js/node_modules/ipfs-http-client/src/dht/find-peer.js","../node_modules/caver-js/node_modules/ipfs-http-client/src/dht/find-provs.js","../node_modules/caver-js/node_modules/ipfs-http-client/src/dht/get.js","../node_modules/caver-js/node_modules/ipfs-http-client/src/dht/provide.js","../node_modules/caver-js/node_modules/ipfs-http-client/src/dht/put.js","../node_modules/caver-js/node_modules/ipfs-http-client/src/dht/query.js","../node_modules/caver-js/node_modules/ipfs-http-client/src/dht/index.js","../node_modules/caver-js/node_modules/ipfs-http-client/src/diag/cmds.js","../node_modules/caver-js/node_modules/ipfs-http-client/src/diag/net.js","../node_modules/caver-js/node_modules/ipfs-http-client/src/diag/sys.js","../node_modules/caver-js/node_modules/ipfs-http-client/src/diag/index.js","../node_modules/caver-js/node_modules/ipfs-http-client/src/files/chmod.js","../node_modules/caver-js/node_modules/ipfs-http-client/src/files/cp.js","../node_modules/caver-js/node_modules/ipfs-http-client/src/files/flush.js","../node_modules/caver-js/node_modules/ipfs-http-client/src/lib/object-to-camel-with-metadata.js","../node_modules/caver-js/node_modules/ipfs-http-client/src/files/ls.js","../node_modules/caver-js/node_modules/ipfs-http-client/src/files/mkdir.js","../node_modules/caver-js/node_modules/ipfs-http-client/src/files/mv.js","../node_modules/caver-js/node_modules/ipfs-http-client/src/files/read.js","../node_modules/caver-js/node_modules/ipfs-http-client/src/files/rm.js","../node_modules/caver-js/node_modules/ipfs-http-client/src/files/stat.js","../node_modules/caver-js/node_modules/ipfs-http-client/src/files/touch.js","../node_modules/caver-js/node_modules/ipfs-http-client/src/files/write.js","../node_modules/caver-js/node_modules/ipfs-http-client/src/files/index.js","../node_modules/caver-js/node_modules/ipfs-http-client/src/key/export.js","../node_modules/caver-js/node_modules/ipfs-http-client/src/key/gen.js","../node_modules/caver-js/node_modules/ipfs-http-client/src/key/import.js","../node_modules/caver-js/node_modules/ipfs-http-client/src/key/info.js","../node_modules/caver-js/node_modules/ipfs-http-client/src/key/list.js","../node_modules/caver-js/node_modules/ipfs-http-client/src/key/rename.js","../node_modules/caver-js/node_modules/ipfs-http-client/src/key/rm.js","../node_modules/caver-js/node_modules/ipfs-http-client/src/key/index.js","../node_modules/caver-js/node_modules/ipfs-http-client/src/log/level.js","../node_modules/caver-js/node_modules/ipfs-http-client/src/log/ls.js","../node_modules/caver-js/node_modules/ipfs-http-client/src/log/tail.js","../node_modules/caver-js/node_modules/ipfs-http-client/src/log/index.js","../node_modules/caver-js/node_modules/ipfs-http-client/src/name/publish.js","../node_modules/caver-js/node_modules/ipfs-http-client/src/name/resolve.js","../node_modules/caver-js/node_modules/ipfs-http-client/src/name/pubsub/cancel.js","../node_modules/caver-js/node_modules/ipfs-http-client/src/name/pubsub/state.js","../node_modules/caver-js/node_modules/ipfs-http-client/src/name/pubsub/subs.js","../node_modules/caver-js/node_modules/ipfs-http-client/src/name/pubsub/index.js","../node_modules/caver-js/node_modules/ipfs-http-client/src/name/index.js","../node_modules/caver-js/node_modules/ipfs-http-client/src/object/data.js","../node_modules/caver-js/node_modules/ipfs-http-client/src/object/get.js","../node_modules/caver-js/node_modules/ipfs-http-client/src/object/links.js","../node_modules/caver-js/node_modules/ipfs-http-client/src/object/new.js","../node_modules/caver-js/node_modules/ipfs-http-client/src/object/put.js","../node_modules/caver-js/node_modules/ipfs-http-client/src/object/stat.js","../node_modules/caver-js/node_modules/ipfs-http-client/src/object/patch/add-link.js","../node_modules/caver-js/node_modules/ipfs-http-client/src/object/patch/append-data.js","../node_modules/caver-js/node_modules/ipfs-http-client/src/object/patch/rm-link.js","../node_modules/caver-js/node_modules/ipfs-http-client/src/object/patch/set-data.js","../node_modules/caver-js/node_modules/ipfs-http-client/src/object/patch/index.js","../node_modules/caver-js/node_modules/ipfs-http-client/src/object/index.js","../node_modules/caver-js/node_modules/ipfs-core-utils/src/pins/normalise-input.js","../node_modules/caver-js/node_modules/ipfs-http-client/src/pin/add-all.js","../node_modules/caver-js/node_modules/ipfs-http-client/src/pin/add.js","../node_modules/caver-js/node_modules/ipfs-http-client/src/pin/ls.js","../node_modules/caver-js/node_modules/ipfs-http-client/src/pin/rm-all.js","../node_modules/caver-js/node_modules/ipfs-http-client/src/pin/rm.js","../node_modules/caver-js/node_modules/ipfs-http-client/src/pin/remote/utils.js","../node_modules/caver-js/node_modules/ipfs-http-client/src/pin/remote/add.js","../node_modules/caver-js/node_modules/ipfs-http-client/src/pin/remote/ls.js","../node_modules/caver-js/node_modules/ipfs-http-client/src/pin/remote/rm.js","../node_modules/caver-js/node_modules/ipfs-http-client/src/pin/remote/rm-all.js","../node_modules/caver-js/node_modules/ipfs-http-client/src/pin/remote/service/utils.js","../node_modules/caver-js/node_modules/ipfs-http-client/src/pin/remote/service/add.js","../node_modules/caver-js/node_modules/ipfs-http-client/src/pin/remote/service/ls.js","../node_modules/caver-js/node_modules/ipfs-http-client/src/pin/remote/service/rm.js","../node_modules/caver-js/node_modules/ipfs-http-client/src/pin/remote/service/index.js","../node_modules/caver-js/node_modules/ipfs-http-client/src/pin/remote/index.js","../node_modules/caver-js/node_modules/ipfs-http-client/src/pin/index.js","../node_modules/caver-js/node_modules/ipfs-http-client/src/lib/http-rpc-wire-format.js","../node_modules/caver-js/node_modules/ipfs-http-client/src/pubsub/ls.js","../node_modules/caver-js/node_modules/ipfs-http-client/src/pubsub/peers.js","../node_modules/caver-js/node_modules/ipfs-http-client/src/pubsub/publish.js","../node_modules/caver-js/node_modules/ipfs-http-client/src/pubsub/subscribe.js","../node_modules/caver-js/node_modules/ipfs-http-client/src/pubsub/unsubscribe.js","../node_modules/caver-js/node_modules/ipfs-http-client/src/pubsub/subscription-tracker.js","../node_modules/caver-js/node_modules/ipfs-http-client/src/pubsub/index.js","../node_modules/caver-js/node_modules/ipfs-http-client/src/refs/local.js","../node_modules/caver-js/node_modules/ipfs-http-client/src/refs/index.js","../node_modules/caver-js/node_modules/ipfs-http-client/src/repo/gc.js","../node_modules/caver-js/node_modules/ipfs-http-client/src/repo/stat.js","../node_modules/caver-js/node_modules/ipfs-http-client/src/repo/version.js","../node_modules/caver-js/node_modules/ipfs-http-client/src/repo/index.js","../node_modules/caver-js/node_modules/ipfs-http-client/src/stats/bw.js","../node_modules/caver-js/node_modules/ipfs-http-client/src/stats/index.js","../node_modules/caver-js/node_modules/ipfs-http-client/src/swarm/addrs.js","../node_modules/caver-js/node_modules/ipfs-http-client/src/swarm/connect.js","../node_modules/caver-js/node_modules/ipfs-http-client/src/swarm/disconnect.js","../node_modules/caver-js/node_modules/ipfs-http-client/src/swarm/local-addrs.js","../node_modules/caver-js/node_modules/ipfs-http-client/src/swarm/peers.js","../node_modules/caver-js/node_modules/ipfs-http-client/src/swarm/index.js","../node_modules/caver-js/node_modules/ipfs-http-client/src/add-all.js","../node_modules/caver-js/node_modules/ipfs-core-utils/src/files/normalise-content.js","../node_modules/caver-js/node_modules/ipfs-core-utils/src/files/normalise-candidate-single.js","../node_modules/caver-js/node_modules/ipfs-core-utils/src/files/normalise-input-single.js","../node_modules/caver-js/node_modules/ipfs-http-client/src/add.js","../node_modules/caver-js/node_modules/ipfs-http-client/src/cat.js","../node_modules/caver-js/node_modules/ipfs-http-client/src/commands.js","../node_modules/caver-js/node_modules/ipfs-http-client/src/dns.js","../node_modules/caver-js/node_modules/ipfs-http-client/src/get-endpoint-config.js","../node_modules/caver-js/node_modules/ipfs-http-client/src/get.js","../node_modules/caver-js/node_modules/ipfs-http-client/src/id.js","../node_modules/caver-js/node_modules/ipfs-http-client/src/is-online.js","../node_modules/caver-js/node_modules/ipfs-http-client/src/ls.js","../node_modules/caver-js/node_modules/ipfs-http-client/src/mount.js","../node_modules/caver-js/node_modules/ipfs-http-client/src/ping.js","../node_modules/caver-js/node_modules/ipfs-http-client/src/resolve.js","../node_modules/caver-js/node_modules/ipfs-http-client/src/start.js","../node_modules/caver-js/node_modules/ipfs-http-client/src/stop.js","../node_modules/caver-js/node_modules/ipfs-http-client/src/version.js","../node_modules/caver-js/node_modules/ipfs-http-client/src/index.js","../node_modules/caver-js/node_modules/ipfs-http-client/src/bitswap/index.js"],"sourcesContent":["/* eslint-env browser */\n\n'use strict'\n\nconst browserReadableStreamToIt = require('browser-readablestream-to-it')\n\n/**\n * @param {Blob} blob\n * @returns {AsyncIterable<Uint8Array>}\n */\nfunction blobToIt (blob) {\n  if (typeof blob.stream === 'function') {\n    // @ts-ignore missing some properties\n    return browserReadableStreamToIt(blob.stream())\n  }\n\n  // firefox < 69 does not support blob.stream()\n  // @ts-ignore - response.body is optional, but in practice it's a stream.\n  return browserReadableStreamToIt(new Response(blob).body)\n}\n\nmodule.exports = blobToIt\n","/**\n * Takes an array of AbortSignals and returns a single signal.\n * If any signals are aborted, the returned signal will be aborted.\n * @param {Array<AbortSignal>} signals\n * @returns {AbortSignal}\n */\nfunction anySignal (signals) {\n  const controller = new globalThis.AbortController()\n\n  function onAbort () {\n    controller.abort()\n\n    for (const signal of signals) {\n      if (!signal || !signal.removeEventListener) continue\n      signal.removeEventListener('abort', onAbort)\n    }\n  }\n\n  for (const signal of signals) {\n    if (!signal || !signal.addEventListener) continue\n    if (signal.aborted) {\n      onAbort()\n      break\n    }\n    signal.addEventListener('abort', onAbort)\n  }\n\n  return controller.signal\n}\n\nmodule.exports = anySignal\nmodule.exports.anySignal = anySignal\n","'use strict'\nconst isElectron = require('is-electron')\n\nconst IS_ENV_WITH_DOM = typeof window === 'object' && typeof document === 'object' && document.nodeType === 9\n// @ts-ignore\nconst IS_ELECTRON = isElectron()\nconst IS_BROWSER = IS_ENV_WITH_DOM && !IS_ELECTRON\nconst IS_ELECTRON_MAIN = IS_ELECTRON && !IS_ENV_WITH_DOM\nconst IS_ELECTRON_RENDERER = IS_ELECTRON && IS_ENV_WITH_DOM\nconst IS_NODE = typeof require === 'function' && typeof process !== 'undefined' && typeof process.release !== 'undefined' && process.release.name === 'node' && !IS_ELECTRON\n// @ts-ignore - we either ignore worker scope or dom scope\nconst IS_WEBWORKER = typeof importScripts === 'function' && typeof self !== 'undefined' && typeof WorkerGlobalScope !== 'undefined' && self instanceof WorkerGlobalScope\nconst IS_TEST = typeof process !== 'undefined' && typeof process.env !== 'undefined' && process.env.NODE_ENV === 'test'\nconst IS_REACT_NATIVE = typeof navigator !== 'undefined' && navigator.product === 'ReactNative'\n\nmodule.exports = {\n  isTest: IS_TEST,\n  isElectron: IS_ELECTRON,\n  isElectronMain: IS_ELECTRON_MAIN,\n  isElectronRenderer: IS_ELECTRON_RENDERER,\n  isNode: IS_NODE,\n  /**\n   * Detects browser main thread  **NOT** web worker or service worker\n   */\n  isBrowser: IS_BROWSER,\n  isWebWorker: IS_WEBWORKER,\n  isEnvWithDom: IS_ENV_WITH_DOM,\n  isReactNative: IS_REACT_NATIVE\n}\n","'use strict'\n\n/**\n * @typedef {globalThis.Headers} Headers\n * @typedef {globalThis.Request} Request\n * @typedef {globalThis.Response} Response\n */\n\n// use window.fetch if it is available, fall back to node-fetch if not\nmodule.exports = require('native-fetch')\n","'use strict'\n\nconst HTTP = require('../http')\n\n/**\n *\n * @param {string} url\n * @param {import(\"../types\").HTTPOptions} [options]\n * @returns {{ path: string; content?: AsyncIterable<Uint8Array> }}\n */\nconst urlSource = (url, options) => {\n  return {\n    path: decodeURIComponent(new URL(url).pathname.split('/').pop() || ''),\n    content: readURLContent(url, options)\n  }\n}\n\n/**\n *\n * @param {string} url\n * @param {import(\"../types\").HTTPOptions} [options]\n * @returns {AsyncIterable<Uint8Array>}\n */\nasync function * readURLContent (url, options) {\n  const http = new HTTP()\n  const response = await http.get(url, options)\n\n  yield * response.iterator()\n}\n\nmodule.exports = urlSource\n","/* eslint-disable no-undef */\n'use strict'\n\nconst { fetch, Request, Headers } = require('./http/fetch')\nconst { TimeoutError, HTTPError } = require('./http/error')\nconst merge = require('merge-options').bind({ ignoreUndefined: true })\nconst { URL, URLSearchParams } = require('iso-url')\nconst anySignal = require('any-signal')\nconst browserReableStreamToIt = require('browser-readablestream-to-it')\nconst { isBrowser, isWebWorker } = require('./env')\nconst all = require('it-all')\n\n/**\n * @typedef {import('stream').Readable} NodeReadableStream\n * @typedef {import('./types').HTTPOptions} HTTPOptions\n * @typedef {import('./types').ExtendedResponse} ExtendedResponse\n */\n\n/**\n * @template TResponse\n * @param {Promise<TResponse>} promise\n * @param {number | undefined} ms\n * @param {AbortController} abortController\n * @returns {Promise<TResponse>}\n */\nconst timeout = (promise, ms, abortController) => {\n  if (ms === undefined) {\n    return promise\n  }\n\n  const start = Date.now()\n\n  const timedOut = () => {\n    const time = Date.now() - start\n\n    return time >= ms\n  }\n\n  return new Promise((resolve, reject) => {\n    const timeoutID = setTimeout(() => {\n      if (timedOut()) {\n        reject(new TimeoutError())\n        abortController.abort()\n      }\n    }, ms)\n\n    /**\n     * @param {(value: any) => void } next\n     */\n    const after = (next) => {\n      /**\n       * @param {any} res\n       */\n      const fn = (res) => {\n        clearTimeout(timeoutID)\n\n        if (timedOut()) {\n          reject(new TimeoutError())\n          return\n        }\n\n        next(res)\n      }\n      return fn\n    }\n\n    promise\n      .then(after(resolve), after(reject))\n  })\n}\n\nconst defaults = {\n  throwHttpErrors: true,\n  credentials: 'same-origin'\n}\n\nclass HTTP {\n  /**\n   *\n   * @param {HTTPOptions} options\n   */\n  constructor (options = {}) {\n    /** @type {HTTPOptions} */\n    this.opts = merge(defaults, options)\n  }\n\n  /**\n   * Fetch\n   *\n   * @param {string | Request} resource\n   * @param {HTTPOptions} options\n   * @returns {Promise<ExtendedResponse>}\n   */\n  async fetch (resource, options = {}) {\n    /** @type {HTTPOptions} */\n    const opts = merge(this.opts, options)\n    // @ts-expect-error\n    const headers = new Headers(opts.headers)\n\n    // validate resource type\n    // @ts-expect-error\n    if (typeof resource !== 'string' && !(resource instanceof URL || resource instanceof Request)) {\n      throw new TypeError('`resource` must be a string, URL, or Request')\n    }\n\n    const url = new URL(resource.toString(), opts.base)\n\n    const {\n      searchParams,\n      transformSearchParams,\n      json\n    } = opts\n\n    if (searchParams) {\n      if (typeof transformSearchParams === 'function') {\n        // @ts-ignore\n        url.search = transformSearchParams(new URLSearchParams(opts.searchParams))\n      } else {\n        // @ts-ignore\n        url.search = new URLSearchParams(opts.searchParams)\n      }\n    }\n\n    if (json) {\n      opts.body = JSON.stringify(opts.json)\n      headers.set('content-type', 'application/json')\n    }\n\n    const abortController = new AbortController()\n    // @ts-ignore\n    const signal = anySignal([abortController.signal, opts.signal])\n\n    if (globalThis.ReadableStream != null && opts.body instanceof globalThis.ReadableStream && (isBrowser || isWebWorker)) {\n      // https://bugzilla.mozilla.org/show_bug.cgi?id=1387483\n      opts.body = new Blob(await all(browserReableStreamToIt(opts.body)))\n    }\n\n    /** @type {ExtendedResponse} */\n    // @ts-expect-error additional fields are assigned below\n    const response = await timeout(\n      fetch(\n        url.toString(),\n        {\n          ...opts,\n          signal,\n          // @ts-expect-error non-browser fetch implementations may take extra options\n          timeout: undefined,\n          headers,\n\n          // https://fetch.spec.whatwg.org/#dom-requestinit-duplex\n          // https://github.com/whatwg/fetch/issues/1254\n          duplex: 'half'\n        }\n      ),\n      opts.timeout,\n      abortController\n    )\n\n    if (!response.ok && opts.throwHttpErrors) {\n      if (opts.handleError) {\n        await opts.handleError(response)\n      }\n      throw new HTTPError(response)\n    }\n\n    response.iterator = async function * () {\n      yield * fromStream(response.body)\n    }\n\n    response.ndjson = async function * () {\n      for await (const chunk of ndjson(response.iterator())) {\n        if (options.transform) {\n          yield options.transform(chunk)\n        } else {\n          yield chunk\n        }\n      }\n    }\n\n    return response\n  }\n\n  /**\n   * @param {string | Request} resource\n   * @param {HTTPOptions} options\n   */\n  post (resource, options = {}) {\n    return this.fetch(resource, { ...options, method: 'POST' })\n  }\n\n  /**\n   * @param {string | Request} resource\n   * @param {HTTPOptions} options\n   */\n  get (resource, options = {}) {\n    return this.fetch(resource, { ...options, method: 'GET' })\n  }\n\n  /**\n   * @param {string | Request} resource\n   * @param {HTTPOptions} options\n   */\n  put (resource, options = {}) {\n    return this.fetch(resource, { ...options, method: 'PUT' })\n  }\n\n  /**\n   * @param {string | Request} resource\n   * @param {HTTPOptions} options\n   */\n  delete (resource, options = {}) {\n    return this.fetch(resource, { ...options, method: 'DELETE' })\n  }\n\n  /**\n   * @param {string | Request} resource\n   * @param {HTTPOptions} options\n   */\n  options (resource, options = {}) {\n    return this.fetch(resource, { ...options, method: 'OPTIONS' })\n  }\n}\n\n/**\n * Parses NDJSON chunks from an iterator\n *\n * @param {AsyncIterable<Uint8Array>} source\n * @returns {AsyncIterable<any>}\n */\nconst ndjson = async function * (source) {\n  const decoder = new TextDecoder()\n  let buf = ''\n\n  for await (const chunk of source) {\n    buf += decoder.decode(chunk, { stream: true })\n    const lines = buf.split(/\\r?\\n/)\n\n    for (let i = 0; i < lines.length - 1; i++) {\n      const l = lines[i].trim()\n      if (l.length > 0) {\n        yield JSON.parse(l)\n      }\n    }\n    buf = lines[lines.length - 1]\n  }\n  buf += decoder.decode()\n  buf = buf.trim()\n  if (buf.length !== 0) {\n    yield JSON.parse(buf)\n  }\n}\n\n/**\n * Stream to AsyncIterable\n *\n * @template TChunk\n * @param {ReadableStream<TChunk> | NodeReadableStream | null} source\n * @returns {AsyncIterable<TChunk>}\n */\nconst fromStream = (source) => {\n  if (isAsyncIterable(source)) {\n    return source\n  }\n\n  // Workaround for https://github.com/node-fetch/node-fetch/issues/766\n  if (isNodeReadableStream(source)) {\n    const iter = source[Symbol.asyncIterator]()\n    return {\n      [Symbol.asyncIterator] () {\n        return {\n          next: iter.next.bind(iter),\n          return (value) {\n            source.destroy()\n            if (typeof iter.return === 'function') {\n              return iter.return()\n            }\n            return Promise.resolve({ done: true, value })\n          }\n        }\n      }\n    }\n  }\n\n  if (isWebReadableStream(source)) {\n    const reader = source.getReader()\n    return (async function * () {\n      try {\n        while (true) {\n          // Read from the stream\n          const { done, value } = await reader.read()\n          // Exit if we're done\n          if (done) return\n          // Else yield the chunk\n          if (value) {\n            yield value\n          }\n        }\n      } finally {\n        reader.releaseLock()\n      }\n    })()\n  }\n\n  throw new TypeError('Body can\\'t be converted to AsyncIterable')\n}\n\n/**\n * Check if it's an AsyncIterable\n *\n * @template {unknown} TChunk\n * @template {any} Other\n * @param {Other|AsyncIterable<TChunk>} value\n * @returns {value is AsyncIterable<TChunk>}\n */\nconst isAsyncIterable = (value) => {\n  return typeof value === 'object' &&\n  value !== null &&\n  typeof /** @type {any} */(value)[Symbol.asyncIterator] === 'function'\n}\n\n/**\n * Check for web readable stream\n *\n * @template {unknown} TChunk\n * @template {any} Other\n * @param {Other|ReadableStream<TChunk>} value\n * @returns {value is ReadableStream<TChunk>}\n */\nconst isWebReadableStream = (value) => {\n  return value && typeof /** @type {any} */(value).getReader === 'function'\n}\n\n/**\n * @param {any} value\n * @returns {value is NodeReadableStream}\n */\nconst isNodeReadableStream = (value) =>\n  Object.prototype.hasOwnProperty.call(value, 'readable') &&\n  Object.prototype.hasOwnProperty.call(value, 'writable')\n\nHTTP.HTTPError = HTTPError\nHTTP.TimeoutError = TimeoutError\nHTTP.streamToAsyncIterator = fromStream\n\n/**\n * @param {string | Request} resource\n * @param {HTTPOptions} [options]\n */\nHTTP.post = (resource, options) => new HTTP(options).post(resource, options)\n\n/**\n * @param {string | Request} resource\n * @param {HTTPOptions} [options]\n */\nHTTP.get = (resource, options) => new HTTP(options).get(resource, options)\n\n/**\n * @param {string | Request} resource\n * @param {HTTPOptions} [options]\n */\nHTTP.put = (resource, options) => new HTTP(options).put(resource, options)\n\n/**\n * @param {string | Request} resource\n * @param {HTTPOptions} [options]\n */\nHTTP.delete = (resource, options) => new HTTP(options).delete(resource, options)\n\n/**\n * @param {string | Request} resource\n * @param {HTTPOptions} [options]\n */\nHTTP.options = (resource, options) => new HTTP(options).options(resource, options)\n\nmodule.exports = HTTP\n","'use strict'\n\nclass TimeoutError extends Error {\n  constructor (message = 'Request timed out') {\n    super(message)\n    this.name = 'TimeoutError'\n  }\n}\nexports.TimeoutError = TimeoutError\n\nclass AbortError extends Error {\n  constructor (message = 'The operation was aborted.') {\n    super(message)\n    this.name = 'AbortError'\n  }\n}\nexports.AbortError = AbortError\n\nclass HTTPError extends Error {\n  /**\n   * @param {Response} response\n   */\n  constructor (response) {\n    super(response.statusText)\n    this.name = 'HTTPError'\n    this.response = response\n  }\n}\nexports.HTTPError = HTTPError\n","'use strict'\n\nconst { TimeoutError, AbortError } = require('./error')\n// @ts-expect-error\nconst { Response, Request, Headers, default: fetch } = require('../fetch')\n\n/**\n * @typedef {import('../types').FetchOptions} FetchOptions\n * @typedef {import('../types').ProgressFn} ProgressFn\n */\n\n/**\n * Fetch with progress\n *\n * @param {string | Request} url\n * @param {FetchOptions} [options]\n * @returns {Promise<ResponseWithURL>}\n */\nconst fetchWithProgress = (url, options = {}) => {\n  const request = new XMLHttpRequest()\n  request.open(options.method || 'GET', url.toString(), true)\n\n  const { timeout, headers } = options\n\n  if (timeout && timeout > 0 && timeout < Infinity) {\n    request.timeout = timeout\n  }\n\n  if (options.overrideMimeType != null) {\n    request.overrideMimeType(options.overrideMimeType)\n  }\n\n  if (headers) {\n    for (const [name, value] of new Headers(headers)) {\n      request.setRequestHeader(name, value)\n    }\n  }\n\n  if (options.signal) {\n    options.signal.onabort = () => request.abort()\n  }\n\n  if (options.onUploadProgress) {\n    request.upload.onprogress = options.onUploadProgress\n  }\n\n  // Note: Need to use `arraybuffer` here instead of `blob` because `Blob`\n  // instances coming from JSDOM are not compatible with `Response` from\n  // node-fetch (which is the setup we get when testing with jest because\n  // it uses JSDOM which does not provide a global fetch\n  // https://github.com/jsdom/jsdom/issues/1724)\n  request.responseType = 'arraybuffer'\n\n  return new Promise((resolve, reject) => {\n    /**\n     * @param {Event} event\n     */\n    const handleEvent = (event) => {\n      switch (event.type) {\n        case 'error': {\n          resolve(Response.error())\n          break\n        }\n        case 'load': {\n          resolve(\n            new ResponseWithURL(request.responseURL, request.response, {\n              status: request.status,\n              statusText: request.statusText,\n              headers: parseHeaders(request.getAllResponseHeaders())\n            })\n          )\n          break\n        }\n        case 'timeout': {\n          reject(new TimeoutError())\n          break\n        }\n        case 'abort': {\n          reject(new AbortError())\n          break\n        }\n        default: {\n          break\n        }\n      }\n    }\n    request.onerror = handleEvent\n    request.onload = handleEvent\n    request.ontimeout = handleEvent\n    request.onabort = handleEvent\n\n    // @ts-expect-error options.body can be a node readable stream, which isn't compatible with XHR, but this\n    // file is a browser override so you won't get a node readable stream so ignore the error\n    request.send(options.body)\n  })\n}\n\nconst fetchWithStreaming = fetch\n\n/**\n * @param {string | Request} url\n * @param {FetchOptions} options\n */\nconst fetchWith = (url, options = {}) =>\n  (options.onUploadProgress != null)\n    ? fetchWithProgress(url, options)\n    : fetchWithStreaming(url, options)\n\n/**\n * Parse Headers from a XMLHttpRequest\n *\n * @param {string} input\n * @returns {Headers}\n */\nconst parseHeaders = (input) => {\n  const headers = new Headers()\n  for (const line of input.trim().split(/[\\r\\n]+/)) {\n    const index = line.indexOf(': ')\n    if (index > 0) {\n      headers.set(line.slice(0, index), line.slice(index + 1))\n    }\n  }\n\n  return headers\n}\n\nclass ResponseWithURL extends Response {\n  /**\n   * @param {string} url\n   * @param {BodyInit} body\n   * @param {ResponseInit} options\n   */\n  constructor (url, body, options) {\n    super(body, options)\n    Object.defineProperty(this, 'url', { value: url })\n  }\n}\n\nmodule.exports = {\n  fetch: fetchWith,\n  Request,\n  Headers\n}\n","import { fromBase64url, toBase64url } from './utils'\n\ninterface JWERecipient {\n  encrypted_key?: string\n  header?: Record<string, any>\n}\n\nexport interface DagJWE {\n  aad?: string\n  ciphertext: string\n  iv: string\n  protected: string\n  recipients?: Array<JWERecipient>\n  tag: string\n  unprotected?: Record<string, any>\n}\n\ninterface EncodedRecipient {\n  encrypted_key?: Uint8Array\n  header?: Record<string, any>\n}\n\nexport interface EncodedJWE {\n  aad?: Uint8Array\n  ciphertext: Uint8Array\n  iv: Uint8Array\n  protected: Uint8Array\n  recipients?: Array<EncodedRecipient>\n  tag: Uint8Array\n  unprotected?: Record<string, any>\n}\n\nfunction fromSplit(split: Array<string>): DagJWE {\n  const [protectedHeader, encrypted_key, iv, ciphertext, tag] = split\n  const jwe: DagJWE = {\n    ciphertext,\n    iv,\n    protected: protectedHeader,\n    tag,\n  }\n  if (encrypted_key) jwe.recipients = [{ encrypted_key }]\n  return jwe\n}\n\nfunction encodeRecipient(recipient: JWERecipient): EncodedRecipient {\n  const encRec: EncodedRecipient = {}\n  if (recipient.encrypted_key) encRec.encrypted_key = fromBase64url(recipient.encrypted_key)\n  if (recipient.header) encRec.header = recipient.header\n  return encRec\n}\n\nfunction encode(jwe: DagJWE): EncodedJWE {\n  const encJwe: EncodedJWE = {\n    ciphertext: fromBase64url(jwe.ciphertext),\n    protected: fromBase64url(jwe.protected),\n    iv: fromBase64url(jwe.iv),\n    tag: fromBase64url(jwe.tag),\n  }\n  if (jwe.aad) encJwe.aad = fromBase64url(jwe.aad)\n  if (jwe.recipients) encJwe.recipients = jwe.recipients.map(encodeRecipient)\n  if (jwe.unprotected) encJwe.unprotected = jwe.unprotected\n  return encJwe\n}\n\nfunction decodeRecipient(encoded: EncodedRecipient): JWERecipient {\n  const recipient: JWERecipient = {}\n  if (encoded.encrypted_key) recipient.encrypted_key = toBase64url(encoded.encrypted_key)\n  if (encoded.header) recipient.header = encoded.header\n  return recipient\n}\n\nfunction decode(encoded: EncodedJWE): DagJWE {\n  const jwe: DagJWE = {\n    ciphertext: toBase64url(encoded.ciphertext),\n    protected: toBase64url(encoded.protected),\n    iv: toBase64url(encoded.iv),\n    tag: toBase64url(encoded.tag),\n  }\n  if (encoded.aad) jwe.aad = toBase64url(encoded.aad)\n  if (encoded.recipients) jwe.recipients = encoded.recipients.map(decodeRecipient)\n  if (encoded.unprotected) jwe.unprotected = encoded.unprotected\n  return jwe\n}\n\nexport default {\n  fromSplit,\n  decode,\n  encode,\n}\n","import signing, { DagJWS, EncodedJWS } from './signing'\nexport type { DagJWS } from './signing'\nimport encryption, { DagJWE, EncodedJWE } from './encryption'\nexport type { DagJWE } from './encryption'\nimport * as cbor from '@ipld/dag-cbor'\nimport type { ByteView } from 'multiformats/codecs/interface'\n\n// string name of the codec\nexport const name = 'dag-jose'\n\n// integer for the multiformat entry of the codec\nexport const code = 133 // 0x85 https://github.com/multiformats/multicodec/blob/master/table.csv\n\nfunction isDagJWS(jose: DagJWS | DagJWE | EncodedJWS | EncodedJWE): jose is DagJWS | EncodedJWS {\n  return (\n    'payload' in jose &&\n    typeof jose.payload === 'string' &&\n    'signatures' in jose &&\n    Array.isArray(jose.signatures)\n  )\n}\n\nfunction isEncodedJWS(\n  jose: DagJWS | DagJWE | EncodedJWS | EncodedJWE\n): jose is DagJWS | EncodedJWS {\n  return (\n    'payload' in jose &&\n    jose.payload instanceof Uint8Array &&\n    'signatures' in jose &&\n    Array.isArray(jose.signatures)\n  )\n}\n\nfunction isEncodedJWE(\n  jose: DagJWS | DagJWE | EncodedJWS | EncodedJWE\n): jose is DagJWE | EncodedJWE {\n  return (\n    'ciphertext' in jose &&\n    jose.ciphertext instanceof Uint8Array &&\n    'iv' in jose &&\n    jose.iv instanceof Uint8Array &&\n    'protected' in jose &&\n    jose.protected instanceof Uint8Array &&\n    'tag' in jose &&\n    jose.tag instanceof Uint8Array\n  )\n}\n\nfunction isDagJWE(jose: DagJWS | DagJWE | EncodedJWS | EncodedJWE): jose is DagJWE | EncodedJWE {\n  return (\n    'ciphertext' in jose &&\n    typeof jose.ciphertext === 'string' &&\n    'iv' in jose &&\n    typeof jose.iv === 'string' &&\n    'protected' in jose &&\n    typeof jose.protected === 'string' &&\n    'tag' in jose &&\n    typeof jose.tag === 'string'\n  )\n}\n\n/**\n * Create a properly formed DagJWS or DagJWE object, from either a DagJWS, or\n * DagJWE or the compact string form of either.\n * Applying this function on an already valid DagJWS or DagJWE object will be\n * idempotent. So this function can be used to either verify the proper object\n * form, or expand a compact string form and ensure you have the same form\n * of object that you would receive if you performed a round-trip encode/decode.\n */\nexport function toGeneral(jose: DagJWS | DagJWE | string): DagJWS | DagJWE {\n  if (typeof jose === 'string') {\n    const split = jose.split('.')\n    if (split.length === 3) {\n      return signing.fromSplit(split)\n    } else if (split.length === 5) {\n      return encryption.fromSplit(split)\n    }\n    throw new Error('Not a valid JOSE string')\n  }\n  if (isDagJWS(jose) || isDagJWE(jose)) {\n    return jose\n  }\n  throw new Error('Not a valid unencoded JOSE object')\n}\n\nexport function encode(obj: DagJWS | DagJWE | string): ByteView<EncodedJWS | EncodedJWE> {\n  if (typeof obj === 'string') {\n    obj = toGeneral(obj)\n  }\n  let encodedJose\n  if (isDagJWS(obj)) {\n    encodedJose = signing.encode(obj)\n  } else if (isDagJWE(obj)) {\n    encodedJose = encryption.encode(obj)\n  } else {\n    throw new Error('Not a valid JOSE object')\n  }\n  return new Uint8Array(cbor.encode(encodedJose))\n}\n\nexport function decode(data: ByteView<EncodedJWS | EncodedJWE>): DagJWS | DagJWE {\n  let encoded: EncodedJWS | EncodedJWE\n  try {\n    encoded = cbor.decode(data)\n  } catch (e) {\n    throw new Error('Not a valid DAG-JOSE object')\n  }\n  if (isEncodedJWS(encoded)) {\n    return signing.decode(encoded)\n  } else if (isEncodedJWE(encoded)) {\n    return encryption.decode(encoded)\n  } else {\n    throw new Error('Not a valid DAG-JOSE object')\n  }\n}\n","import { fromBase64url, toBase64url } from './utils'\nimport { CID } from 'multiformats/cid'\n\ninterface JWSSignature {\n  header?: Record<string, any>\n  protected?: string\n  signature: string\n}\n\nexport interface DagJWS {\n  payload: string\n  signatures: Array<JWSSignature>\n  link?: CID\n}\n\ninterface EncodedSignature {\n  header?: Record<string, any>\n  protected?: Uint8Array\n  signature: Uint8Array\n}\n\nexport interface EncodedJWS {\n  payload: Uint8Array\n  signatures: Array<EncodedSignature>\n}\n\nexport interface PublicKey {\n  id: string\n  type: string\n  controller: string\n  publicKeyHex?: string\n  publicKeyBase64?: string\n}\n\nfunction fromSplit(split: Array<string>): DagJWS {\n  const [protectedHeader, payload, signature] = split\n  return {\n    payload,\n    signatures: [{ protected: protectedHeader, signature }],\n    link: CID.decode(fromBase64url(payload)),\n  }\n}\n\nfunction encodeSignature(signature: JWSSignature): EncodedSignature {\n  const encoded: EncodedSignature = {\n    signature: fromBase64url(signature.signature),\n  }\n  if (signature.header) encoded.header = signature.header\n  if (signature.protected) encoded.protected = fromBase64url(signature.protected)\n  return encoded\n}\n\nfunction encode(jws: DagJWS): EncodedJWS {\n  const payload = fromBase64url(jws.payload)\n  try {\n    CID.decode(payload)\n  } catch (e) {\n    throw new Error('Not a valid DagJWS')\n  }\n  const encodedJws: EncodedJWS = {\n    payload,\n    signatures: jws.signatures.map(encodeSignature),\n  }\n  return encodedJws\n}\n\nfunction decodeSignature(encoded: EncodedSignature): JWSSignature {\n  const sign: JWSSignature = {\n    signature: toBase64url(encoded.signature),\n  }\n  if (encoded.header) sign.header = encoded.header\n  if (encoded.protected) sign.protected = toBase64url(encoded.protected)\n  return sign\n}\n\nfunction decode(encoded: EncodedJWS): DagJWS {\n  const decoded: DagJWS = {\n    payload: toBase64url(encoded.payload),\n    signatures: encoded.signatures.map(decodeSignature),\n  }\n  decoded.link = CID.decode(new Uint8Array(encoded.payload))\n  return decoded\n}\n\nexport default {\n  fromSplit,\n  encode,\n  decode,\n}\n","import { base64url } from 'multiformats/bases/base64'\n\nexport function toBase64url(b: Uint8Array): string {\n  return base64url.encode(b).slice(1) // remove multibase prefix\n}\n\nexport function fromBase64url(s: string): Uint8Array {\n  return base64url.decode(`u${s}`)\n}\n","/**\n * @typedef {import('multiformats/bases/interface').MultibaseCodec<any>} MultibaseCodec\n * @typedef {import('./types').LoadBaseFn} LoadBaseFn\n * @typedef {import('ipfs-core-types/src/utils').AbortOptions} AbortOptions\n */\n\n/**\n * @type {LoadBaseFn}\n */\nconst LOAD_BASE = (name) => Promise.reject(new Error(`No base found for \"${name}\"`))\n\nexport class Multibases {\n  /**\n   * @param {object} options\n   * @param {LoadBaseFn} [options.loadBase]\n   * @param {MultibaseCodec[]} options.bases\n   */\n  constructor (options) {\n    // Object with current list of active resolvers\n    /** @type {Record<string, MultibaseCodec>}} */\n    this._basesByName = {}\n\n    // Object with current list of active resolvers\n    /** @type {Record<string, MultibaseCodec>}} */\n    this._basesByPrefix = {}\n\n    this._loadBase = options.loadBase || LOAD_BASE\n\n    // Enable all supplied codecs\n    for (const base of options.bases) {\n      this.addBase(base)\n    }\n  }\n\n  /**\n   * Add support for a multibase codec\n   *\n   * @param {MultibaseCodec} base\n   */\n  addBase (base) {\n    if (this._basesByName[base.name] || this._basesByPrefix[base.prefix]) {\n      throw new Error(`Codec already exists for codec \"${base.name}\"`)\n    }\n\n    this._basesByName[base.name] = base\n    this._basesByPrefix[base.prefix] = base\n  }\n\n  /**\n   * Remove support for a multibase codec\n   *\n   * @param {MultibaseCodec} base\n   */\n  removeBase (base) {\n    delete this._basesByName[base.name]\n    delete this._basesByPrefix[base.prefix]\n  }\n\n  /**\n   * @param {string} nameOrPrefix\n   */\n  async getBase (nameOrPrefix) {\n    if (this._basesByName[nameOrPrefix]) {\n      return this._basesByName[nameOrPrefix]\n    }\n\n    if (this._basesByPrefix[nameOrPrefix]) {\n      return this._basesByPrefix[nameOrPrefix]\n    }\n\n    // If not supported, attempt to dynamically load this codec\n    const base = await this._loadBase(nameOrPrefix)\n\n    if (this._basesByName[base.name] == null && this._basesByPrefix[base.prefix] == null) {\n      this.addBase(base)\n    }\n\n    return base\n  }\n\n  listBases () {\n    return Object.values(this._basesByName)\n  }\n}\n","/**\n * @typedef {import('multiformats/codecs/interface').BlockCodec<any, any>} BlockCodec\n * @typedef {import('./types').LoadCodecFn} LoadCodecFn\n * @typedef {import('ipfs-core-types/src/utils').AbortOptions} AbortOptions\n */\n\n/**\n * @type {LoadCodecFn}\n */\nconst LOAD_CODEC = (codeOrName) => Promise.reject(new Error(`No codec found for \"${codeOrName}\"`))\n\nexport class Multicodecs {\n  /**\n   * @param {object} options\n   * @param {LoadCodecFn} [options.loadCodec]\n   * @param {BlockCodec[]} options.codecs\n   */\n  constructor (options) {\n    // Object with current list of active resolvers\n    /** @type {Record<string, BlockCodec>}} */\n    this._codecsByName = {}\n\n    // Object with current list of active resolvers\n    /** @type {Record<number, BlockCodec>}} */\n    this._codecsByCode = {}\n\n    this._loadCodec = options.loadCodec || LOAD_CODEC\n\n    // Enable all supplied codecs\n    for (const codec of options.codecs) {\n      this.addCodec(codec)\n    }\n  }\n\n  /**\n   * Add support for a block codec\n   *\n   * @param {BlockCodec} codec\n   */\n  addCodec (codec) {\n    if (this._codecsByName[codec.name] || this._codecsByCode[codec.code]) {\n      throw new Error(`Resolver already exists for codec \"${codec.name}\"`)\n    }\n\n    this._codecsByName[codec.name] = codec\n    this._codecsByCode[codec.code] = codec\n  }\n\n  /**\n   * Remove support for a block codec\n   *\n   * @param {BlockCodec} codec\n   */\n  removeCodec (codec) {\n    delete this._codecsByName[codec.name]\n    delete this._codecsByCode[codec.code]\n  }\n\n  /**\n   * @param {number | string} code\n   */\n  async getCodec (code) {\n    const table = typeof code === 'string' ? this._codecsByName : this._codecsByCode\n\n    if (table[code]) {\n      return table[code]\n    }\n\n    // If not supported, attempt to dynamically load this codec\n    const codec = await this._loadCodec(code)\n\n    if (table[code] == null) {\n      this.addCodec(codec)\n    }\n\n    return codec\n  }\n\n  listCodecs () {\n    return Object.values(this._codecsByName)\n  }\n}\n","/**\n * @typedef {import('multiformats/hashes/interface').MultihashHasher} MultihashHasher\n * @typedef {import('./types').LoadHasherFn} LoadHasherFn\n * @typedef {import('ipfs-core-types/src/utils').AbortOptions} AbortOptions\n */\n\n/**\n * @type {LoadHasherFn}\n */\nconst LOAD_HASHER = (codeOrName) => Promise.reject(new Error(`No hasher found for \"${codeOrName}\"`))\n\nexport class Multihashes {\n  /**\n   * @param {object} options\n   * @param {LoadHasherFn} [options.loadHasher]\n   * @param {MultihashHasher[]} options.hashers\n   */\n  constructor (options) {\n    // Object with current list of active hashers\n    /** @type {Record<string, MultihashHasher>}} */\n    this._hashersByName = {}\n\n    // Object with current list of active hashers\n    /** @type {Record<number, MultihashHasher>}} */\n    this._hashersByCode = {}\n\n    this._loadHasher = options.loadHasher || LOAD_HASHER\n\n    // Enable all supplied hashers\n    for (const hasher of options.hashers) {\n      this.addHasher(hasher)\n    }\n  }\n\n  /**\n   * Add support for a multibase hasher\n   *\n   * @param {MultihashHasher} hasher\n   */\n  addHasher (hasher) {\n    if (this._hashersByName[hasher.name] || this._hashersByCode[hasher.code]) {\n      throw new Error(`Resolver already exists for codec \"${hasher.name}\"`)\n    }\n\n    this._hashersByName[hasher.name] = hasher\n    this._hashersByCode[hasher.code] = hasher\n  }\n\n  /**\n   * Remove support for a multibase hasher\n   *\n   * @param {MultihashHasher} hasher\n   */\n  removeHasher (hasher) {\n    delete this._hashersByName[hasher.name]\n    delete this._hashersByCode[hasher.code]\n  }\n\n  /**\n   * @param {number | string} code\n   */\n  async getHasher (code) {\n    const table = typeof code === 'string' ? this._hashersByName : this._hashersByCode\n\n    if (table[code]) {\n      return table[code]\n    }\n\n    // If not supported, attempt to dynamically load this hasher\n    const hasher = await this._loadHasher(code)\n\n    if (table[code] == null) {\n      this.addHasher(hasher)\n    }\n\n    return hasher\n  }\n\n  listHashers () {\n    return Object.values(this._hashersByName)\n  }\n}\n","import * as cborg from 'cborg';\nimport { CID } from 'multiformats/cid';\nconst CID_CBOR_TAG = 42;\nfunction cidEncoder(obj) {\n  if (obj.asCID !== obj) {\n    return null;\n  }\n  const cid = CID.asCID(obj);\n  if (!cid) {\n    return null;\n  }\n  const bytes = new Uint8Array(cid.bytes.byteLength + 1);\n  bytes.set(cid.bytes, 1);\n  return [\n    new cborg.Token(cborg.Type.tag, CID_CBOR_TAG),\n    new cborg.Token(cborg.Type.bytes, bytes)\n  ];\n}\nfunction undefinedEncoder() {\n  throw new Error('`undefined` is not supported by the IPLD Data Model and cannot be encoded');\n}\nfunction numberEncoder(num) {\n  if (Number.isNaN(num)) {\n    throw new Error('`NaN` is not supported by the IPLD Data Model and cannot be encoded');\n  }\n  if (num === Infinity || num === -Infinity) {\n    throw new Error('`Infinity` and `-Infinity` is not supported by the IPLD Data Model and cannot be encoded');\n  }\n  return null;\n}\nconst encodeOptions = {\n  float64: true,\n  typeEncoders: {\n    Object: cidEncoder,\n    undefined: undefinedEncoder,\n    number: numberEncoder\n  }\n};\nfunction cidDecoder(bytes) {\n  if (bytes[0] !== 0) {\n    throw new Error('Invalid CID for CBOR tag 42; expected leading 0x00');\n  }\n  return CID.decode(bytes.subarray(1));\n}\nconst decodeOptions = {\n  allowIndefinite: false,\n  coerceUndefinedToNull: true,\n  allowNaN: false,\n  allowInfinity: false,\n  allowBigInt: true,\n  strict: true,\n  useMaps: false,\n  tags: []\n};\ndecodeOptions.tags[CID_CBOR_TAG] = cidDecoder;\nexport const name = 'dag-cbor';\nexport const code = 113;\nexport const encode = node => cborg.encode(node, encodeOptions);\nexport const decode = data => cborg.decode(data, decodeOptions);","import { Type } from '../token.js';\nimport { encodeCustom } from '../encode.js';\nimport { encodeErrPrefix } from '../common.js';\nimport {\n  asU8A,\n  fromString\n} from '../byte-utils.js';\nclass JSONEncoder extends Array {\n  constructor() {\n    super();\n    this.inRecursive = [];\n  }\n  prefix(buf) {\n    const recurs = this.inRecursive[this.inRecursive.length - 1];\n    if (recurs) {\n      if (recurs.type === Type.array) {\n        recurs.elements++;\n        if (recurs.elements !== 1) {\n          buf.push([44]);\n        }\n      }\n      if (recurs.type === Type.map) {\n        recurs.elements++;\n        if (recurs.elements !== 1) {\n          if (recurs.elements % 2 === 1) {\n            buf.push([44]);\n          } else {\n            buf.push([58]);\n          }\n        }\n      }\n    }\n  }\n  [Type.uint.major](buf, token) {\n    this.prefix(buf);\n    const is = String(token.value);\n    const isa = [];\n    for (let i = 0; i < is.length; i++) {\n      isa[i] = is.charCodeAt(i);\n    }\n    buf.push(isa);\n  }\n  [Type.negint.major](buf, token) {\n    this[Type.uint.major](buf, token);\n  }\n  [Type.bytes.major](_buf, _token) {\n    throw new Error(`${ encodeErrPrefix } unsupported type: Uint8Array`);\n  }\n  [Type.string.major](buf, token) {\n    this.prefix(buf);\n    const byts = fromString(JSON.stringify(token.value));\n    buf.push(byts.length > 32 ? asU8A(byts) : byts);\n  }\n  [Type.array.major](buf, _token) {\n    this.prefix(buf);\n    this.inRecursive.push({\n      type: Type.array,\n      elements: 0\n    });\n    buf.push([91]);\n  }\n  [Type.map.major](buf, _token) {\n    this.prefix(buf);\n    this.inRecursive.push({\n      type: Type.map,\n      elements: 0\n    });\n    buf.push([123]);\n  }\n  [Type.tag.major](_buf, _token) {\n  }\n  [Type.float.major](buf, token) {\n    if (token.type.name === 'break') {\n      const recurs = this.inRecursive.pop();\n      if (recurs) {\n        if (recurs.type === Type.array) {\n          buf.push([93]);\n        } else if (recurs.type === Type.map) {\n          buf.push([125]);\n        } else {\n          throw new Error('Unexpected recursive type; this should not happen!');\n        }\n        return;\n      }\n      throw new Error('Unexpected break; this should not happen!');\n    }\n    if (token.value === undefined) {\n      throw new Error(`${ encodeErrPrefix } unsupported type: undefined`);\n    }\n    this.prefix(buf);\n    if (token.type.name === 'true') {\n      buf.push([\n        116,\n        114,\n        117,\n        101\n      ]);\n      return;\n    } else if (token.type.name === 'false') {\n      buf.push([\n        102,\n        97,\n        108,\n        115,\n        101\n      ]);\n      return;\n    } else if (token.type.name === 'null') {\n      buf.push([\n        110,\n        117,\n        108,\n        108\n      ]);\n      return;\n    }\n    const is = String(token.value);\n    const isa = [];\n    let dp = false;\n    for (let i = 0; i < is.length; i++) {\n      isa[i] = is.charCodeAt(i);\n      if (!dp && (isa[i] === 46 || isa[i] === 101 || isa[i] === 69)) {\n        dp = true;\n      }\n    }\n    if (!dp) {\n      isa.push(46);\n      isa.push(48);\n    }\n    buf.push(isa);\n  }\n}\nfunction mapSorter(e1, e2) {\n  if (Array.isArray(e1[0]) || Array.isArray(e2[0])) {\n    throw new Error(`${ encodeErrPrefix } complex map keys are not supported`);\n  }\n  const keyToken1 = e1[0];\n  const keyToken2 = e2[0];\n  if (keyToken1.type !== Type.string || keyToken2.type !== Type.string) {\n    throw new Error(`${ encodeErrPrefix } non-string map keys are not supported`);\n  }\n  if (keyToken1 < keyToken2) {\n    return -1;\n  }\n  if (keyToken1 > keyToken2) {\n    return 1;\n  }\n  throw new Error(`${ encodeErrPrefix } unexpected duplicate map keys, this is not supported`);\n}\nconst defaultEncodeOptions = {\n  addBreakTokens: true,\n  mapSorter\n};\nfunction encode(data, options) {\n  options = Object.assign({}, defaultEncodeOptions, options);\n  return encodeCustom(data, new JSONEncoder(), options);\n}\nexport {\n  encode\n};","import { decode as _decode } from '../decode.js';\nimport {\n  Token,\n  Type\n} from '../token.js';\nimport { decodeCodePointsArray } from '../byte-utils.js';\nimport { decodeErrPrefix } from '../common.js';\nclass Tokenizer {\n  constructor(data, options = {}) {\n    this.pos = 0;\n    this.data = data;\n    this.options = options;\n    this.modeStack = ['value'];\n    this.lastToken = '';\n  }\n  done() {\n    return this.pos >= this.data.length;\n  }\n  ch() {\n    return this.data[this.pos];\n  }\n  currentMode() {\n    return this.modeStack[this.modeStack.length - 1];\n  }\n  skipWhitespace() {\n    let c = this.ch();\n    while (c === 32 || c === 9 || c === 13 || c === 10) {\n      c = this.data[++this.pos];\n    }\n  }\n  expect(str) {\n    if (this.data.length - this.pos < str.length) {\n      throw new Error(`${ decodeErrPrefix } unexpected end of input at position ${ this.pos }`);\n    }\n    for (let i = 0; i < str.length; i++) {\n      if (this.data[this.pos++] !== str[i]) {\n        throw new Error(`${ decodeErrPrefix } unexpected token at position ${ this.pos }, expected to find '${ String.fromCharCode(...str) }'`);\n      }\n    }\n  }\n  parseNumber() {\n    const startPos = this.pos;\n    let negative = false;\n    let float = false;\n    const swallow = chars => {\n      while (!this.done()) {\n        const ch = this.ch();\n        if (chars.includes(ch)) {\n          this.pos++;\n        } else {\n          break;\n        }\n      }\n    };\n    if (this.ch() === 45) {\n      negative = true;\n      this.pos++;\n    }\n    if (this.ch() === 48) {\n      this.pos++;\n      if (this.ch() === 46) {\n        this.pos++;\n        float = true;\n      } else {\n        return new Token(Type.uint, 0, this.pos - startPos);\n      }\n    }\n    swallow([\n      48,\n      49,\n      50,\n      51,\n      52,\n      53,\n      54,\n      55,\n      56,\n      57\n    ]);\n    if (negative && this.pos === startPos + 1) {\n      throw new Error(`${ decodeErrPrefix } unexpected token at position ${ this.pos }`);\n    }\n    if (!this.done() && this.ch() === 46) {\n      if (float) {\n        throw new Error(`${ decodeErrPrefix } unexpected token at position ${ this.pos }`);\n      }\n      float = true;\n      this.pos++;\n      swallow([\n        48,\n        49,\n        50,\n        51,\n        52,\n        53,\n        54,\n        55,\n        56,\n        57\n      ]);\n    }\n    if (!this.done() && (this.ch() === 101 || this.ch() === 69)) {\n      float = true;\n      this.pos++;\n      if (!this.done() && (this.ch() === 43 || this.ch() === 45)) {\n        this.pos++;\n      }\n      swallow([\n        48,\n        49,\n        50,\n        51,\n        52,\n        53,\n        54,\n        55,\n        56,\n        57\n      ]);\n    }\n    const numStr = String.fromCharCode.apply(null, this.data.subarray(startPos, this.pos));\n    const num = parseFloat(numStr);\n    if (float) {\n      return new Token(Type.float, num, this.pos - startPos);\n    }\n    if (this.options.allowBigInt !== true || Number.isSafeInteger(num)) {\n      return new Token(num >= 0 ? Type.uint : Type.negint, num, this.pos - startPos);\n    }\n    return new Token(num >= 0 ? Type.uint : Type.negint, BigInt(numStr), this.pos - startPos);\n  }\n  parseString() {\n    if (this.ch() !== 34) {\n      throw new Error(`${ decodeErrPrefix } unexpected character at position ${ this.pos }; this shouldn't happen`);\n    }\n    this.pos++;\n    for (let i = this.pos, l = 0; i < this.data.length && l < 65536; i++, l++) {\n      const ch = this.data[i];\n      if (ch === 92 || ch < 32 || ch >= 128) {\n        break;\n      }\n      if (ch === 34) {\n        const str = String.fromCharCode.apply(null, this.data.subarray(this.pos, i));\n        this.pos = i + 1;\n        return new Token(Type.string, str, l);\n      }\n    }\n    const startPos = this.pos;\n    const chars = [];\n    const readu4 = () => {\n      if (this.pos + 4 >= this.data.length) {\n        throw new Error(`${ decodeErrPrefix } unexpected end of unicode escape sequence at position ${ this.pos }`);\n      }\n      let u4 = 0;\n      for (let i = 0; i < 4; i++) {\n        let ch = this.ch();\n        if (ch >= 48 && ch <= 57) {\n          ch -= 48;\n        } else if (ch >= 97 && ch <= 102) {\n          ch = ch - 97 + 10;\n        } else if (ch >= 65 && ch <= 70) {\n          ch = ch - 65 + 10;\n        } else {\n          throw new Error(`${ decodeErrPrefix } unexpected unicode escape character at position ${ this.pos }`);\n        }\n        u4 = u4 * 16 + ch;\n        this.pos++;\n      }\n      return u4;\n    };\n    const readUtf8Char = () => {\n      const firstByte = this.ch();\n      let codePoint = null;\n      let bytesPerSequence = firstByte > 239 ? 4 : firstByte > 223 ? 3 : firstByte > 191 ? 2 : 1;\n      if (this.pos + bytesPerSequence > this.data.length) {\n        throw new Error(`${ decodeErrPrefix } unexpected unicode sequence at position ${ this.pos }`);\n      }\n      let secondByte, thirdByte, fourthByte, tempCodePoint;\n      switch (bytesPerSequence) {\n      case 1:\n        if (firstByte < 128) {\n          codePoint = firstByte;\n        }\n        break;\n      case 2:\n        secondByte = this.data[this.pos + 1];\n        if ((secondByte & 192) === 128) {\n          tempCodePoint = (firstByte & 31) << 6 | secondByte & 63;\n          if (tempCodePoint > 127) {\n            codePoint = tempCodePoint;\n          }\n        }\n        break;\n      case 3:\n        secondByte = this.data[this.pos + 1];\n        thirdByte = this.data[this.pos + 2];\n        if ((secondByte & 192) === 128 && (thirdByte & 192) === 128) {\n          tempCodePoint = (firstByte & 15) << 12 | (secondByte & 63) << 6 | thirdByte & 63;\n          if (tempCodePoint > 2047 && (tempCodePoint < 55296 || tempCodePoint > 57343)) {\n            codePoint = tempCodePoint;\n          }\n        }\n        break;\n      case 4:\n        secondByte = this.data[this.pos + 1];\n        thirdByte = this.data[this.pos + 2];\n        fourthByte = this.data[this.pos + 3];\n        if ((secondByte & 192) === 128 && (thirdByte & 192) === 128 && (fourthByte & 192) === 128) {\n          tempCodePoint = (firstByte & 15) << 18 | (secondByte & 63) << 12 | (thirdByte & 63) << 6 | fourthByte & 63;\n          if (tempCodePoint > 65535 && tempCodePoint < 1114112) {\n            codePoint = tempCodePoint;\n          }\n        }\n      }\n      if (codePoint === null) {\n        codePoint = 65533;\n        bytesPerSequence = 1;\n      } else if (codePoint > 65535) {\n        codePoint -= 65536;\n        chars.push(codePoint >>> 10 & 1023 | 55296);\n        codePoint = 56320 | codePoint & 1023;\n      }\n      chars.push(codePoint);\n      this.pos += bytesPerSequence;\n    };\n    while (!this.done()) {\n      const ch = this.ch();\n      let ch1;\n      switch (ch) {\n      case 92:\n        this.pos++;\n        if (this.done()) {\n          throw new Error(`${ decodeErrPrefix } unexpected string termination at position ${ this.pos }`);\n        }\n        ch1 = this.ch();\n        this.pos++;\n        switch (ch1) {\n        case 34:\n        case 39:\n        case 92:\n        case 47:\n          chars.push(ch1);\n          break;\n        case 98:\n          chars.push(8);\n          break;\n        case 116:\n          chars.push(9);\n          break;\n        case 110:\n          chars.push(10);\n          break;\n        case 102:\n          chars.push(12);\n          break;\n        case 114:\n          chars.push(13);\n          break;\n        case 117:\n          chars.push(readu4());\n          break;\n        default:\n          throw new Error(`${ decodeErrPrefix } unexpected string escape character at position ${ this.pos }`);\n        }\n        break;\n      case 34:\n        this.pos++;\n        return new Token(Type.string, decodeCodePointsArray(chars), this.pos - startPos);\n      default:\n        if (ch < 32) {\n          throw new Error(`${ decodeErrPrefix } invalid control character at position ${ this.pos }`);\n        } else if (ch < 128) {\n          chars.push(ch);\n          this.pos++;\n        } else {\n          readUtf8Char();\n        }\n      }\n    }\n    throw new Error(`${ decodeErrPrefix } unexpected end of string at position ${ this.pos }`);\n  }\n  parseValue() {\n    switch (this.ch()) {\n    case 123:\n      this.modeStack.push('obj-start');\n      this.pos++;\n      return new Token(Type.map, Infinity, 1);\n    case 91:\n      this.modeStack.push('array-start');\n      this.pos++;\n      return new Token(Type.array, Infinity, 1);\n    case 34: {\n        return this.parseString();\n      }\n    case 110:\n      this.expect([\n        110,\n        117,\n        108,\n        108\n      ]);\n      return new Token(Type.null, null, 4);\n    case 102:\n      this.expect([\n        102,\n        97,\n        108,\n        115,\n        101\n      ]);\n      return new Token(Type.false, false, 5);\n    case 116:\n      this.expect([\n        116,\n        114,\n        117,\n        101\n      ]);\n      return new Token(Type.true, true, 4);\n    case 45:\n    case 48:\n    case 49:\n    case 50:\n    case 51:\n    case 52:\n    case 53:\n    case 54:\n    case 55:\n    case 56:\n    case 57:\n      return this.parseNumber();\n    default:\n      throw new Error(`${ decodeErrPrefix } unexpected character at position ${ this.pos }`);\n    }\n  }\n  next() {\n    this.skipWhitespace();\n    switch (this.currentMode()) {\n    case 'value':\n      this.modeStack.pop();\n      return this.parseValue();\n    case 'array-value': {\n        this.modeStack.pop();\n        if (this.ch() === 93) {\n          this.pos++;\n          this.skipWhitespace();\n          return new Token(Type.break, undefined, 1);\n        }\n        if (this.ch() !== 44) {\n          throw new Error(`${ decodeErrPrefix } unexpected character at position ${ this.pos }, was expecting array delimiter but found '${ String.fromCharCode(this.ch()) }'`);\n        }\n        this.pos++;\n        this.modeStack.push('array-value');\n        this.skipWhitespace();\n        return this.parseValue();\n      }\n    case 'array-start': {\n        this.modeStack.pop();\n        if (this.ch() === 93) {\n          this.pos++;\n          this.skipWhitespace();\n          return new Token(Type.break, undefined, 1);\n        }\n        this.modeStack.push('array-value');\n        this.skipWhitespace();\n        return this.parseValue();\n      }\n    case 'obj-key':\n      if (this.ch() === 125) {\n        this.modeStack.pop();\n        this.pos++;\n        this.skipWhitespace();\n        return new Token(Type.break, undefined, 1);\n      }\n      if (this.ch() !== 44) {\n        throw new Error(`${ decodeErrPrefix } unexpected character at position ${ this.pos }, was expecting object delimiter but found '${ String.fromCharCode(this.ch()) }'`);\n      }\n      this.pos++;\n      this.skipWhitespace();\n    case 'obj-start': {\n        this.modeStack.pop();\n        if (this.ch() === 125) {\n          this.pos++;\n          this.skipWhitespace();\n          return new Token(Type.break, undefined, 1);\n        }\n        const token = this.parseString();\n        this.skipWhitespace();\n        if (this.ch() !== 58) {\n          throw new Error(`${ decodeErrPrefix } unexpected character at position ${ this.pos }, was expecting key/value delimiter ':' but found '${ String.fromCharCode(this.ch()) }'`);\n        }\n        this.pos++;\n        this.modeStack.push('obj-value');\n        return token;\n      }\n    case 'obj-value': {\n        this.modeStack.pop();\n        this.modeStack.push('obj-key');\n        this.skipWhitespace();\n        return this.parseValue();\n      }\n    default:\n      throw new Error(`${ decodeErrPrefix } unexpected parse state at position ${ this.pos }; this shouldn't happen`);\n    }\n  }\n}\nfunction decode(data, options) {\n  options = Object.assign({ tokenizer: new Tokenizer(data, options) }, options);\n  return _decode(data, options);\n}\nexport {\n  decode,\n  Tokenizer\n};","import { CID } from 'multiformats';\nimport { base64 } from 'multiformats/bases/base64';\nimport {\n  Token,\n  Type\n} from 'cborg';\nimport * as cborgJson from 'cborg/json';\nfunction cidEncoder(obj) {\n  if (obj.asCID !== obj) {\n    return null;\n  }\n  const cid = CID.asCID(obj);\n  if (!cid) {\n    return null;\n  }\n  const cidString = cid.toString();\n  return [\n    new Token(Type.map, Infinity, 1),\n    new Token(Type.string, '/', 1),\n    new Token(Type.string, cidString, cidString.length),\n    new Token(Type.break, undefined, 1)\n  ];\n}\nfunction bytesEncoder(bytes) {\n  const bytesString = base64.encode(bytes).slice(1);\n  return [\n    new Token(Type.map, Infinity, 1),\n    new Token(Type.string, '/', 1),\n    new Token(Type.map, Infinity, 1),\n    new Token(Type.string, 'bytes', 5),\n    new Token(Type.string, bytesString, bytesString.length),\n    new Token(Type.break, undefined, 1),\n    new Token(Type.break, undefined, 1)\n  ];\n}\nfunction undefinedEncoder() {\n  throw new Error('`undefined` is not supported by the IPLD Data Model and cannot be encoded');\n}\nfunction numberEncoder(num) {\n  if (Number.isNaN(num)) {\n    throw new Error('`NaN` is not supported by the IPLD Data Model and cannot be encoded');\n  }\n  if (num === Infinity || num === -Infinity) {\n    throw new Error('`Infinity` and `-Infinity` is not supported by the IPLD Data Model and cannot be encoded');\n  }\n  return null;\n}\nconst encodeOptions = {\n  typeEncoders: {\n    Object: cidEncoder,\n    Uint8Array: bytesEncoder,\n    Buffer: bytesEncoder,\n    undefined: undefinedEncoder,\n    number: numberEncoder\n  }\n};\nclass DagJsonTokenizer extends cborgJson.Tokenizer {\n  constructor(data, options) {\n    super(data, options);\n    this.tokenBuffer = [];\n  }\n  done() {\n    return this.tokenBuffer.length === 0 && super.done();\n  }\n  _next() {\n    if (this.tokenBuffer.length > 0) {\n      return this.tokenBuffer.pop();\n    }\n    return super.next();\n  }\n  next() {\n    const token = this._next();\n    if (token.type === Type.map) {\n      const keyToken = this._next();\n      if (keyToken.type === Type.string && keyToken.value === '/') {\n        const valueToken = this._next();\n        if (valueToken.type === Type.string) {\n          const breakToken = this._next();\n          if (breakToken.type !== Type.break) {\n            throw new Error('Invalid encoded CID form');\n          }\n          this.tokenBuffer.push(valueToken);\n          return new Token(Type.tag, 42, 0);\n        }\n        if (valueToken.type === Type.map) {\n          const innerKeyToken = this._next();\n          if (innerKeyToken.type === Type.string && innerKeyToken.value === 'bytes') {\n            const innerValueToken = this._next();\n            if (innerValueToken.type === Type.string) {\n              for (let i = 0; i < 2; i++) {\n                const breakToken = this._next();\n                if (breakToken.type !== Type.break) {\n                  throw new Error('Invalid encoded Bytes form');\n                }\n              }\n              const bytes = base64.decode(`m${ innerValueToken.value }`);\n              return new Token(Type.bytes, bytes, innerValueToken.value.length);\n            }\n            this.tokenBuffer.push(innerValueToken);\n          }\n          this.tokenBuffer.push(innerKeyToken);\n        }\n        this.tokenBuffer.push(valueToken);\n      }\n      this.tokenBuffer.push(keyToken);\n    }\n    return token;\n  }\n}\nconst decodeOptions = {\n  allowIndefinite: false,\n  allowUndefined: false,\n  allowNaN: false,\n  allowInfinity: false,\n  allowBigInt: true,\n  strict: true,\n  useMaps: false,\n  tags: []\n};\ndecodeOptions.tags[42] = CID.parse;\nexport const name = 'dag-json';\nexport const code = 297;\nexport const encode = node => cborgJson.encode(node, encodeOptions);\nexport const decode = data => {\n  const options = Object.assign(decodeOptions, { tokenizer: new DagJsonTokenizer(data, decodeOptions) });\n  return cborgJson.decode(data, options);\n};","const word = '[a-fA-F\\\\d:]';\n\nconst boundry = options => options && options.includeBoundaries\n\t? `(?:(?<=\\\\s|^)(?=${word})|(?<=${word})(?=\\\\s|$))`\n\t: '';\n\nconst v4 = '(?:25[0-5]|2[0-4]\\\\d|1\\\\d\\\\d|[1-9]\\\\d|\\\\d)(?:\\\\.(?:25[0-5]|2[0-4]\\\\d|1\\\\d\\\\d|[1-9]\\\\d|\\\\d)){3}';\n\nconst v6segment = '[a-fA-F\\\\d]{1,4}';\n\nconst v6 = `\n(?:\n(?:${v6segment}:){7}(?:${v6segment}|:)|                                    // 1:2:3:4:5:6:7::  1:2:3:4:5:6:7:8\n(?:${v6segment}:){6}(?:${v4}|:${v6segment}|:)|                             // 1:2:3:4:5:6::    1:2:3:4:5:6::8   1:2:3:4:5:6::8  1:2:3:4:5:6::1.2.3.4\n(?:${v6segment}:){5}(?::${v4}|(?::${v6segment}){1,2}|:)|                   // 1:2:3:4:5::      1:2:3:4:5::7:8   1:2:3:4:5::8    1:2:3:4:5::7:1.2.3.4\n(?:${v6segment}:){4}(?:(?::${v6segment}){0,1}:${v4}|(?::${v6segment}){1,3}|:)| // 1:2:3:4::        1:2:3:4::6:7:8   1:2:3:4::8      1:2:3:4::6:7:1.2.3.4\n(?:${v6segment}:){3}(?:(?::${v6segment}){0,2}:${v4}|(?::${v6segment}){1,4}|:)| // 1:2:3::          1:2:3::5:6:7:8   1:2:3::8        1:2:3::5:6:7:1.2.3.4\n(?:${v6segment}:){2}(?:(?::${v6segment}){0,3}:${v4}|(?::${v6segment}){1,5}|:)| // 1:2::            1:2::4:5:6:7:8   1:2::8          1:2::4:5:6:7:1.2.3.4\n(?:${v6segment}:){1}(?:(?::${v6segment}){0,4}:${v4}|(?::${v6segment}){1,6}|:)| // 1::              1::3:4:5:6:7:8   1::8            1::3:4:5:6:7:1.2.3.4\n(?::(?:(?::${v6segment}){0,5}:${v4}|(?::${v6segment}){1,7}|:))             // ::2:3:4:5:6:7:8  ::2:3:4:5:6:7:8  ::8             ::1.2.3.4\n)(?:%[0-9a-zA-Z]{1,})?                                             // %eth0            %1\n`.replace(/\\s*\\/\\/.*$/gm, '').replace(/\\n/g, '').trim();\n\n// Pre-compile only the exact regexes because adding a global flag make regexes stateful\nconst v46Exact = new RegExp(`(?:^${v4}$)|(?:^${v6}$)`);\nconst v4exact = new RegExp(`^${v4}$`);\nconst v6exact = new RegExp(`^${v6}$`);\n\nconst ipRegex = options => options && options.exact\n\t? v46Exact\n\t: new RegExp(`(?:${boundry(options)}${v4}${boundry(options)})|(?:${boundry(options)}${v6}${boundry(options)})`, 'g');\n\nipRegex.v4 = options => options && options.exact ? v4exact : new RegExp(`${boundry(options)}${v4}${boundry(options)}`, 'g');\nipRegex.v6 = options => options && options.exact ? v6exact : new RegExp(`${boundry(options)}${v6}${boundry(options)}`, 'g');\n\nexport default ipRegex;\n","const {toString} = Object.prototype;\n\nexport default function isRegexp(value) {\n\treturn toString.call(value) === '[object RegExp]';\n}\n","import isRegexp from 'is-regexp';\n\nconst flagMap = {\n\tglobal: 'g',\n\tignoreCase: 'i',\n\tmultiline: 'm',\n\tdotAll: 's',\n\tsticky: 'y',\n\tunicode: 'u'\n};\n\nexport default function clonedRegexp(regexp, options = {}) {\n\tif (!isRegexp(regexp)) {\n\t\tthrow new TypeError('Expected a RegExp instance');\n\t}\n\n\tconst flags = Object.keys(flagMap).map(flag => (\n\t\t(typeof options[flag] === 'boolean' ? options[flag] : regexp[flag]) ? flagMap[flag] : ''\n\t)).join('');\n\n\tconst clonedRegexp = new RegExp(options.source || regexp.source, flags);\n\n\tclonedRegexp.lastIndex = typeof options.lastIndex === 'number' ?\n\t\toptions.lastIndex :\n\t\tregexp.lastIndex;\n\n\treturn clonedRegexp;\n}\n","import functionTimeout, {isTimeoutError} from 'function-timeout';\nimport timeSpan from 'time-span';\nimport cloneRegexp from 'clone-regexp'; // TODO: Use `structuredClone` instead when targeting Node.js 18.\n\nconst resultToMatch = result => ({\n\tmatch: result[0],\n\tindex: result.index,\n\tgroups: result.slice(1),\n\tnamedGroups: result.groups ?? {},\n\tinput: result.input,\n});\n\nexport function isMatch(regex, string, {timeout} = {}) {\n\ttry {\n\t\treturn functionTimeout(() => cloneRegexp(regex).test(string), {timeout})();\n\t} catch (error) {\n\t\tif (isTimeoutError(error)) {\n\t\t\treturn false;\n\t\t}\n\n\t\tthrow error;\n\t}\n}\n\nexport function firstMatch(regex, string, {timeout} = {}) {\n\ttry {\n\t\tconst result = functionTimeout(() => cloneRegexp(regex).exec(string), {timeout})();\n\n\t\tif (result === null) {\n\t\t\treturn;\n\t\t}\n\n\t\treturn resultToMatch(result);\n\t} catch (error) {\n\t\tif (isTimeoutError(error)) {\n\t\t\treturn;\n\t\t}\n\n\t\tthrow error;\n\t}\n}\n\nexport function matches(regex, string, {timeout = Number.POSITIVE_INFINITY, matchTimeout = Number.POSITIVE_INFINITY} = {}) {\n\tif (!regex.global) {\n\t\tthrow new Error('The regex must have the global flag, otherwise, use `firstMatch()` instead');\n\t}\n\n\treturn {\n\t\t* [Symbol.iterator]() {\n\t\t\ttry {\n\t\t\t\tconst matches = string.matchAll(regex); // The regex is only executed when iterated over.\n\n\t\t\t\twhile (true) {\n\t\t\t\t\tconst nextMatch = functionTimeout(() => matches.next(), {timeout: (timeout !== Number.POSITIVE_INFINITY || matchTimeout !== Number.POSITIVE_INFINITY) ? Math.min(timeout, matchTimeout) : undefined}); // `matches.next` must be called within an arrow function so that it doesn't loose its context.\n\n\t\t\t\t\tconst end = timeSpan();\n\t\t\t\t\tconst {value, done} = nextMatch();\n\t\t\t\t\ttimeout -= Math.ceil(end());\n\n\t\t\t\t\tif (done) {\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\n\t\t\t\t\tyield resultToMatch(value);\n\t\t\t\t}\n\t\t\t} catch (error) {\n\t\t\t\tif (!isTimeoutError(error)) {\n\t\t\t\t\tthrow error;\n\t\t\t\t}\n\t\t\t}\n\t\t},\n\t};\n}\n","// Even though the browser version is a no-op, we wrap it to ensure consistent behavior.\nexport default function functionTimeout(function_) {\n\tconst wrappedFunction = (...arguments_) => function_(...arguments_);\n\n\tObject.defineProperty(wrappedFunction, 'name', {\n\t\tvalue: `functionTimeout(${function_.name || '<anonymous>'})`,\n\t\tconfigurable: true,\n\t});\n\n\treturn wrappedFunction;\n}\n\nexport function isTimeoutError() {\n\treturn false;\n}\n","import ipRegex from 'ip-regex';\nimport {isMatch} from 'super-regex';\n\nconst maxIPv4Length = 15;\nconst maxIPv6Length = 45;\n\nconst options = {\n\ttimeout: 400,\n};\n\nexport function isIP(string) {\n\treturn isMatch(ipRegex({exact: true}), string.slice(0, maxIPv6Length), options);\n}\n\nexport function isIPv6(string) {\n\treturn isMatch(ipRegex.v6({exact: true}), string.slice(0, maxIPv6Length), options);\n}\n\nexport function isIPv4(string) {\n\treturn isMatch(ipRegex.v4({exact: true}), string.slice(0, maxIPv4Length), options);\n}\n\nexport function ipVersion(string) {\n\treturn isIP(string) ? (isIPv6(string) ? 6 : 4) : undefined;\n}\n","import { isIPv4, isIPv6 } from 'is-ip'\nimport { toString as uint8ArrayToString } from 'uint8arrays/to-string'\n\nexport { isIP } from 'is-ip'\nexport const isV4 = isIPv4\nexport const isV6 = isIPv6\n\n// Copied from https://github.com/indutny/node-ip/blob/master/lib/ip.js#L7\n// but with buf/offset args removed because we don't use them\nexport const toBytes = function (ip: string): Uint8Array {\n  let offset = 0\n  let result\n  ip = ip.trim()\n\n  if (isV4(ip)) {\n    result = new Uint8Array(offset + 4)\n    ip.split(/\\./g).forEach((byte) => {\n      result[offset++] = parseInt(byte, 10) & 0xff\n    })\n  } else if (isV6(ip)) {\n    const sections = ip.split(':', 8)\n\n    let i\n    for (i = 0; i < sections.length; i++) {\n      const isv4 = isV4(sections[i])\n      let v4Buffer: Uint8Array | undefined\n\n      if (isv4) {\n        v4Buffer = toBytes(sections[i])\n        sections[i] = uint8ArrayToString(v4Buffer.slice(0, 2), 'base16')\n      }\n\n      if (v4Buffer != null && ++i < 8) {\n        sections.splice(i, 0, uint8ArrayToString(v4Buffer.slice(2, 4), 'base16'))\n      }\n    }\n\n    if (sections[0] === '') {\n      while (sections.length < 8) sections.unshift('0')\n    } else if (sections[sections.length - 1] === '') {\n      while (sections.length < 8) sections.push('0')\n    } else if (sections.length < 8) {\n      for (i = 0; i < sections.length && sections[i] !== ''; i++);\n      const argv: [number, number, ...string[]] = [i, 1]\n      for (i = 9 - sections.length; i > 0; i--) {\n        argv.push('0')\n      }\n      sections.splice.apply(sections, argv)\n    }\n\n    result = new Uint8Array(offset + 16)\n    for (i = 0; i < sections.length; i++) {\n      const word = parseInt(sections[i], 16)\n      result[offset++] = (word >> 8) & 0xff\n      result[offset++] = word & 0xff\n    }\n  }\n\n  if (result == null) {\n    throw new Error(`invalid ip address \"${ip}\"`)\n  }\n\n  return result\n}\n\n// Copied from https://github.com/indutny/node-ip/blob/master/lib/ip.js#L63\nexport const toString = function (buf: Uint8Array, offset: number = 0, length?: number) {\n  offset = ~~offset\n  length = length ?? (buf.length - offset)\n\n  const result = []\n  let string = ''\n  const view = new DataView(buf.buffer)\n  if (length === 4) {\n    // IPv4\n    for (let i = 0; i < length; i++) {\n      result.push(buf[offset + i])\n    }\n    string = result.join('.')\n  } else if (length === 16) {\n    // IPv6\n    for (let i = 0; i < length; i += 2) {\n      result.push(view.getUint16(offset + i).toString(16))\n    }\n    string = result.join(':')\n    string = string.replace(/(^|:)0(:0)*:0(:|$)/, '$1::$3')\n    string = string.replace(/:{3,4}/, '::')\n  }\n\n  return string\n}\n","export interface Protocol {\n  code: number\n  size: number\n  name: string\n  resolvable?: boolean\n  path?: boolean\n}\n\nconst V = -1\nexport const names: Record<string, Protocol> = {}\nexport const codes: Record<number, Protocol> = {}\n\nexport const table: Array<[number, number, string, boolean?, boolean?]> = [\n  [4, 32, 'ip4'],\n  [6, 16, 'tcp'],\n  [33, 16, 'dccp'],\n  [41, 128, 'ip6'],\n  [42, V, 'ip6zone'],\n  [53, V, 'dns', true],\n  [54, V, 'dns4', true],\n  [55, V, 'dns6', true],\n  [56, V, 'dnsaddr', true],\n  [132, 16, 'sctp'],\n  [273, 16, 'udp'],\n  [275, 0, 'p2p-webrtc-star'],\n  [276, 0, 'p2p-webrtc-direct'],\n  [277, 0, 'p2p-stardust'],\n  [280, 0, 'webrtc'],\n  [290, 0, 'p2p-circuit'],\n  [301, 0, 'udt'],\n  [302, 0, 'utp'],\n  [400, V, 'unix', false, true],\n  // `ipfs` is added before `p2p` for legacy support.\n  // All text representations will default to `p2p`, but `ipfs` will\n  // still be supported\n  [421, V, 'ipfs'],\n  // `p2p` is the preferred name for 421, and is now the default\n  [421, V, 'p2p'],\n  [443, 0, 'https'],\n  [444, 96, 'onion'],\n  [445, 296, 'onion3'],\n  [446, V, 'garlic64'],\n  [460, 0, 'quic'],\n  [465, 0, 'webtransport'],\n  [466, V, 'certhash'],\n  [477, 0, 'ws'],\n  [478, 0, 'wss'],\n  [479, 0, 'p2p-websocket-star'],\n  [480, 0, 'http'],\n  [777, V, 'memory']\n]\n\n// populate tables\ntable.forEach(row => {\n  const proto = createProtocol(...row)\n  codes[proto.code] = proto\n  names[proto.name] = proto\n})\n\nexport function createProtocol (code: number, size: number, name: string, resolvable?: any, path?: any): Protocol {\n  return {\n    code,\n    size,\n    name,\n    resolvable: Boolean(resolvable),\n    path: Boolean(path)\n  }\n}\n\nexport function getProtocol (proto: number | string) {\n  if (typeof proto === 'number') {\n    if (codes[proto] != null) {\n      return codes[proto]\n    }\n\n    throw new Error(`no protocol with code: ${proto}`)\n  } else if (typeof proto === 'string') {\n    if (names[proto] != null) {\n      return names[proto]\n    }\n\n    throw new Error(`no protocol with name: ${proto}`)\n  }\n\n  throw new Error(`invalid protocol id type: ${typeof proto}`)\n}\n","\nimport * as ip from './ip.js'\nimport { getProtocol } from './protocols-table.js'\nimport { CID } from 'multiformats/cid'\nimport { base32 } from 'multiformats/bases/base32'\nimport { base58btc } from 'multiformats/bases/base58'\nimport { bases } from 'multiformats/basics'\nimport * as Digest from 'multiformats/hashes/digest'\nimport varint from 'varint'\nimport { toString as uint8ArrayToString } from 'uint8arrays/to-string'\nimport { fromString as uint8ArrayFromString } from 'uint8arrays/from-string'\nimport { concat as uint8ArrayConcat } from 'uint8arrays/concat'\n\n/**\n * converts (serializes) addresses\n */\nexport function convert (proto: string, a: string | Uint8Array) {\n  if (a instanceof Uint8Array) {\n    return convertToString(proto, a)\n  } else {\n    return convertToBytes(proto, a)\n  }\n}\n\n/**\n * Convert [code,Uint8Array] to string\n */\nexport function convertToString (proto: number | string, buf: Uint8Array) {\n  const protocol = getProtocol(proto)\n  switch (protocol.code) {\n    case 4: // ipv4\n    case 41: // ipv6\n      return bytes2ip(buf)\n\n    case 6: // tcp\n    case 273: // udp\n    case 33: // dccp\n    case 132: // sctp\n      return bytes2port(buf).toString()\n\n    case 53: // dns\n    case 54: // dns4\n    case 55: // dns6\n    case 56: // dnsaddr\n    case 400: // unix\n    case 777: // memory\n      return bytes2str(buf)\n\n    case 421: // ipfs\n      return bytes2mh(buf)\n    case 444: // onion\n      return bytes2onion(buf)\n    case 445: // onion3\n      return bytes2onion(buf)\n    case 466: // certhash\n      return bytes2mb(buf)\n    default:\n      return uint8ArrayToString(buf, 'base16') // no clue. convert to hex\n  }\n}\n\nexport function convertToBytes (proto: string | number, str: string) {\n  const protocol = getProtocol(proto)\n  switch (protocol.code) {\n    case 4: // ipv4\n      return ip2bytes(str)\n    case 41: // ipv6\n      return ip2bytes(str)\n\n    case 6: // tcp\n    case 273: // udp\n    case 33: // dccp\n    case 132: // sctp\n      return port2bytes(parseInt(str, 10))\n\n    case 53: // dns\n    case 54: // dns4\n    case 55: // dns6\n    case 56: // dnsaddr\n    case 400: // unix\n    case 777: // memory\n      return str2bytes(str)\n\n    case 421: // ipfs\n      return mh2bytes(str)\n    case 444: // onion\n      return onion2bytes(str)\n    case 445: // onion3\n      return onion32bytes(str)\n    case 466: // certhash\n      return mb2bytes(str)\n    default:\n      return uint8ArrayFromString(str, 'base16') // no clue. convert from hex\n  }\n}\n\nconst decoders = Object.values(bases).map((c) => c.decoder)\nconst anybaseDecoder = (function () {\n  let acc = decoders[0].or(decoders[1])\n  decoders.slice(2).forEach((d) => (acc = acc.or(d)))\n  return acc\n})()\n\nfunction ip2bytes (ipString: string) {\n  if (!ip.isIP(ipString)) {\n    throw new Error(`invalid ip address \"${ipString}\"`)\n  }\n  return ip.toBytes(ipString)\n}\n\nfunction bytes2ip (ipBuff: Uint8Array) {\n  const ipString = ip.toString(ipBuff, 0, ipBuff.length)\n  if (ipString == null) {\n    throw new Error('ipBuff is required')\n  }\n  if (!ip.isIP(ipString)) {\n    throw new Error(`invalid ip address \"${ipString}\"`)\n  }\n  return ipString\n}\n\nfunction port2bytes (port: number) {\n  const buf = new ArrayBuffer(2)\n  const view = new DataView(buf)\n  view.setUint16(0, port)\n\n  return new Uint8Array(buf)\n}\n\nfunction bytes2port (buf: Uint8Array) {\n  const view = new DataView(buf.buffer)\n  return view.getUint16(buf.byteOffset)\n}\n\nfunction str2bytes (str: string) {\n  const buf = uint8ArrayFromString(str)\n  const size = Uint8Array.from(varint.encode(buf.length))\n  return uint8ArrayConcat([size, buf], size.length + buf.length)\n}\n\nfunction bytes2str (buf: Uint8Array) {\n  const size = varint.decode(buf)\n  buf = buf.slice(varint.decode.bytes)\n\n  if (buf.length !== size) {\n    throw new Error('inconsistent lengths')\n  }\n\n  return uint8ArrayToString(buf)\n}\n\nfunction mh2bytes (hash: string) {\n  let mh\n\n  if (hash[0] === 'Q' || hash[0] === '1') {\n    mh = Digest.decode(base58btc.decode(`z${hash}`)).bytes\n  } else {\n    mh = CID.parse(hash).multihash.bytes\n  }\n\n  // the address is a varint prefixed multihash string representation\n  const size = Uint8Array.from(varint.encode(mh.length))\n  return uint8ArrayConcat([size, mh], size.length + mh.length)\n}\n\nfunction mb2bytes (mbstr: string) {\n  const mb = anybaseDecoder.decode(mbstr)\n  const size = Uint8Array.from(varint.encode(mb.length))\n  return uint8ArrayConcat([size, mb], size.length + mb.length)\n}\nfunction bytes2mb (buf: Uint8Array) {\n  const size = varint.decode(buf)\n  const hash = buf.slice(varint.decode.bytes)\n\n  if (hash.length !== size) {\n    throw new Error('inconsistent lengths')\n  }\n\n  return 'u' + uint8ArrayToString(hash, 'base64url')\n}\n\n/**\n * Converts bytes to bas58btc string\n */\nfunction bytes2mh (buf: Uint8Array) {\n  const size = varint.decode(buf)\n  const address = buf.slice(varint.decode.bytes)\n\n  if (address.length !== size) {\n    throw new Error('inconsistent lengths')\n  }\n\n  return uint8ArrayToString(address, 'base58btc')\n}\n\nfunction onion2bytes (str: string) {\n  const addr = str.split(':')\n  if (addr.length !== 2) {\n    throw new Error(`failed to parse onion addr: [\"'${addr.join('\", \"')}'\"]' does not contain a port number`)\n  }\n  if (addr[0].length !== 16) {\n    throw new Error(`failed to parse onion addr: ${addr[0]} not a Tor onion address.`)\n  }\n\n  // onion addresses do not include the multibase prefix, add it before decoding\n  const buf = base32.decode('b' + addr[0])\n\n  // onion port number\n  const port = parseInt(addr[1], 10)\n  if (port < 1 || port > 65536) {\n    throw new Error('Port number is not in range(1, 65536)')\n  }\n  const portBuf = port2bytes(port)\n  return uint8ArrayConcat([buf, portBuf], buf.length + portBuf.length)\n}\n\nfunction onion32bytes (str: string) {\n  const addr = str.split(':')\n  if (addr.length !== 2) {\n    throw new Error(`failed to parse onion addr: [\"'${addr.join('\", \"')}'\"]' does not contain a port number`)\n  }\n  if (addr[0].length !== 56) {\n    throw new Error(`failed to parse onion addr: ${addr[0]} not a Tor onion3 address.`)\n  }\n  // onion addresses do not include the multibase prefix, add it before decoding\n  const buf = base32.decode(`b${addr[0]}`)\n\n  // onion port number\n  const port = parseInt(addr[1], 10)\n  if (port < 1 || port > 65536) {\n    throw new Error('Port number is not in range(1, 65536)')\n  }\n  const portBuf = port2bytes(port)\n  return uint8ArrayConcat([buf, portBuf], buf.length + portBuf.length)\n}\n\nfunction bytes2onion (buf: Uint8Array) {\n  const addrBytes = buf.slice(0, buf.length - 2)\n  const portBytes = buf.slice(buf.length - 2)\n  const addr = uint8ArrayToString(addrBytes, 'base32')\n  const port = bytes2port(portBytes)\n  return `${addr}:${port}`\n}\n","import { convertToBytes, convertToString } from './convert.js'\nimport { getProtocol } from './protocols-table.js'\nimport varint from 'varint'\nimport { concat as uint8ArrayConcat } from 'uint8arrays/concat'\nimport { toString as uint8ArrayToString } from 'uint8arrays/to-string'\nimport type { Protocol } from './protocols-table.js'\n\n/**\n * string -> [[str name, str addr]... ]\n */\nexport function stringToStringTuples (str: string) {\n  const tuples = []\n  const parts = str.split('/').slice(1) // skip first empty elem\n  if (parts.length === 1 && parts[0] === '') {\n    return []\n  }\n\n  for (let p = 0; p < parts.length; p++) {\n    const part = parts[p]\n    const proto = getProtocol(part)\n\n    if (proto.size === 0) {\n      tuples.push([part])\n      continue\n    }\n\n    p++ // advance addr part\n    if (p >= parts.length) {\n      throw ParseError('invalid address: ' + str)\n    }\n\n    // if it's a path proto, take the rest\n    if (proto.path === true) {\n      tuples.push([\n        part,\n        // TODO: should we need to check each path part to see if it's a proto?\n        // This would allow for other protocols to be added after a unix path,\n        // however it would have issues if the path had a protocol name in the path\n        cleanPath(parts.slice(p).join('/'))\n      ])\n      break\n    }\n\n    tuples.push([part, parts[p]])\n  }\n\n  return tuples\n}\n\n/**\n * [[str name, str addr]... ] -> string\n */\nexport function stringTuplesToString (tuples: Array<[number, string?]>) {\n  const parts: string[] = []\n  tuples.map((tup) => {\n    const proto = protoFromTuple(tup)\n    parts.push(proto.name)\n    if (tup.length > 1 && tup[1] != null) {\n      parts.push(tup[1])\n    }\n    return null\n  })\n\n  return cleanPath(parts.join('/'))\n}\n\n/**\n * [[str name, str addr]... ] -> [[int code, Uint8Array]... ]\n */\nexport function stringTuplesToTuples (tuples: Array<string[] | string>): Array<[number, Uint8Array?]> {\n  return tuples.map((tup) => {\n    if (!Array.isArray(tup)) {\n      tup = [tup]\n    }\n    const proto = protoFromTuple(tup)\n    if (tup.length > 1) {\n      return [proto.code, convertToBytes(proto.code, tup[1])]\n    }\n    return [proto.code]\n  })\n}\n\n/**\n * Convert tuples to string tuples\n *\n * [[int code, Uint8Array]... ] -> [[int code, str addr]... ]\n */\nexport function tuplesToStringTuples (tuples: Array<[number, Uint8Array?]>): Array<[number, string?]> {\n  return tuples.map(tup => {\n    const proto = protoFromTuple(tup)\n    if (tup[1] != null) {\n      return [proto.code, convertToString(proto.code, tup[1])]\n    }\n    return [proto.code]\n  })\n}\n\n/**\n * [[int code, Uint8Array ]... ] -> Uint8Array\n */\nexport function tuplesToBytes (tuples: Array<[number, Uint8Array?]>) {\n  return fromBytes(uint8ArrayConcat(tuples.map((tup) => {\n    const proto = protoFromTuple(tup)\n    let buf = Uint8Array.from(varint.encode(proto.code))\n\n    if (tup.length > 1 && tup[1] != null) {\n      buf = uint8ArrayConcat([buf, tup[1]]) // add address buffer\n    }\n\n    return buf\n  })))\n}\n\nexport function sizeForAddr (p: Protocol, addr: Uint8Array | number[]) {\n  if (p.size > 0) {\n    return p.size / 8\n  } else if (p.size === 0) {\n    return 0\n  } else {\n    const size = varint.decode(addr)\n    return size + varint.decode.bytes\n  }\n}\n\nexport function bytesToTuples (buf: Uint8Array): Array<[number, Uint8Array?]> {\n  const tuples: Array<[number, Uint8Array?]> = []\n  let i = 0\n  while (i < buf.length) {\n    const code = varint.decode(buf, i)\n    const n = varint.decode.bytes\n\n    const p = getProtocol(code)\n\n    const size = sizeForAddr(p, buf.slice(i + n))\n\n    if (size === 0) {\n      tuples.push([code])\n      i += n\n      continue\n    }\n\n    const addr = buf.slice(i + n, i + n + size)\n\n    i += (size + n)\n\n    if (i > buf.length) { // did not end _exactly_ at buffer.length\n      throw ParseError('Invalid address Uint8Array: ' + uint8ArrayToString(buf, 'base16'))\n    }\n\n    // ok, tuple seems good.\n    tuples.push([code, addr])\n  }\n\n  return tuples\n}\n\n/**\n * Uint8Array -> String\n */\nexport function bytesToString (buf: Uint8Array) {\n  const a = bytesToTuples(buf)\n  const b = tuplesToStringTuples(a)\n  return stringTuplesToString(b)\n}\n\n/**\n * String -> Uint8Array\n */\nexport function stringToBytes (str: string) {\n  str = cleanPath(str)\n  const a = stringToStringTuples(str)\n  const b = stringTuplesToTuples(a)\n\n  return tuplesToBytes(b)\n}\n\n/**\n * String -> Uint8Array\n */\nexport function fromString (str: string) {\n  return stringToBytes(str)\n}\n\n/**\n * Uint8Array -> Uint8Array\n */\nexport function fromBytes (buf: Uint8Array) {\n  const err = validateBytes(buf)\n  if (err != null) {\n    throw err\n  }\n  return Uint8Array.from(buf) // copy\n}\n\nexport function validateBytes (buf: Uint8Array): Error | undefined {\n  try {\n    bytesToTuples(buf) // try to parse. will throw if breaks\n  } catch (err: any) {\n    return err\n  }\n}\n\nexport function isValidBytes (buf: Uint8Array) {\n  return validateBytes(buf) === undefined\n}\n\nexport function cleanPath (str: string) {\n  return '/' + str.trim().split('/').filter((a) => a).join('/')\n}\n\nexport function ParseError (str: string) {\n  return new Error('Error parsing address: ' + str)\n}\n\nexport function protoFromTuple (tup: any[]) {\n  const proto = getProtocol(tup[0])\n  return proto\n}\n","import * as codec from './codec.js'\nimport { getProtocol, names } from './protocols-table.js'\nimport varint from 'varint'\nimport { CID } from 'multiformats/cid'\nimport { base58btc } from 'multiformats/bases/base58'\nimport errCode from 'err-code'\nimport { toString as uint8ArrayToString } from 'uint8arrays/to-string'\nimport { equals as uint8ArrayEquals } from 'uint8arrays/equals'\n\nconst inspect = Symbol.for('nodejs.util.inspect.custom')\n\nconst DNS_CODES = [\n  getProtocol('dns').code,\n  getProtocol('dns4').code,\n  getProtocol('dns6').code,\n  getProtocol('dnsaddr').code\n]\n\nconst P2P_CODES = [\n  getProtocol('p2p').code,\n  getProtocol('ipfs').code\n]\n\nexport interface Protocol {\n  code: number\n  size: number\n  name: string\n  resolvable?: boolean | undefined\n  path?: boolean | undefined\n}\n\nexport interface MultiaddrObject {\n  family: 4 | 6\n  host: string\n  transport: string\n  port: number\n}\n\nexport interface NodeAddress {\n  family: 4 | 6\n  address: string\n  port: number\n}\n\nexport type MultiaddrInput = string | Multiaddr | Uint8Array | null\n\nexport interface Resolver { (addr: Multiaddr, options?: AbortOptions): Promise<string[]> }\n\nexport interface AbortOptions {\n  signal?: AbortSignal\n}\n\nconst resolvers = new Map<string, Resolver>()\nconst symbol = Symbol.for('@multiformats/js-multiaddr/multiaddr')\n\n/**\n * Creates a [multiaddr](https://github.com/multiformats/multiaddr) from\n * a Uint8Array, String or another Multiaddr instance\n * public key.\n *\n */\nexport class Multiaddr {\n  static resolvers = resolvers\n\n  public bytes: Uint8Array\n\n  /**\n   * @example\n   * ```js\n   * new Multiaddr('/ip4/127.0.0.1/tcp/4001')\n   * // <Multiaddr 047f000001060fa1 - /ip4/127.0.0.1/tcp/4001>\n   * ```\n   *\n   * @param {MultiaddrInput} [addr] - If String or Uint8Array, needs to adhere to the address format of a [multiaddr](https://github.com/multiformats/multiaddr#string-format)\n   */\n  constructor (addr?: MultiaddrInput) {\n    // default\n    if (addr == null) {\n      addr = ''\n    }\n\n    // Define symbol\n    Object.defineProperty(this, symbol, { value: true })\n\n    if (addr instanceof Uint8Array) {\n      this.bytes = codec.fromBytes(addr)\n    } else if (typeof addr === 'string') {\n      if (addr.length > 0 && addr.charAt(0) !== '/') {\n        throw new Error(`multiaddr \"${addr}\" must start with a \"/\"`)\n      }\n      this.bytes = codec.fromString(addr)\n    } else if (Multiaddr.isMultiaddr(addr)) { // Multiaddr\n      this.bytes = codec.fromBytes(addr.bytes) // validate + copy buffer\n    } else {\n      throw new Error('addr must be a string, Buffer, or another Multiaddr')\n    }\n  }\n\n  /**\n   * Returns Multiaddr as a String\n   *\n   * @example\n   * ```js\n   * new Multiaddr('/ip4/127.0.0.1/tcp/4001').toString()\n   * // '/ip4/127.0.0.1/tcp/4001'\n   * ```\n   */\n  toString () {\n    return codec.bytesToString(this.bytes)\n  }\n\n  /**\n   * Returns Multiaddr as a JSON encoded object\n   *\n   * @example\n   * ```js\n   * JSON.stringify(new Multiaddr('/ip4/127.0.0.1/tcp/4001'))\n   * // '/ip4/127.0.0.1/tcp/4001'\n   * ```\n   */\n  toJSON () {\n    return this.toString()\n  }\n\n  /**\n   * Returns Multiaddr as a convinient options object to be used with net.createConnection\n   *\n   * @example\n   * ```js\n   * new Multiaddr('/ip4/127.0.0.1/tcp/4001').toOptions()\n   * // { family: 4, host: '127.0.0.1', transport: 'tcp', port: 4001 }\n   * ```\n   */\n  toOptions (): MultiaddrObject {\n    const codes = this.protoCodes()\n    const parts = this.toString().split('/').slice(1)\n    let transport: string\n    let port: number\n\n    if (parts.length > 2) {\n      // default to https when protocol & port are omitted from DNS addrs\n      if (DNS_CODES.includes(codes[0]) && P2P_CODES.includes(codes[1])) {\n        transport = getProtocol('tcp').name\n        port = 443\n      } else {\n        transport = getProtocol(parts[2]).name\n        port = parseInt(parts[3])\n      }\n    } else if (DNS_CODES.includes(codes[0])) {\n      transport = getProtocol('tcp').name\n      port = 443\n    } else {\n      throw new Error('multiaddr must have a valid format: \"/{ip4, ip6, dns4, dns6, dnsaddr}/{address}/{tcp, udp}/{port}\".')\n    }\n\n    const opts: MultiaddrObject = {\n      family: (codes[0] === 41 || codes[0] === 55) ? 6 : 4,\n      host: parts[1],\n      transport,\n      port\n    }\n\n    return opts\n  }\n\n  /**\n   * Returns the protocols the Multiaddr is defined with, as an array of objects, in\n   * left-to-right order. Each object contains the protocol code, protocol name,\n   * and the size of its address space in bits.\n   * [See list of protocols](https://github.com/multiformats/multiaddr/blob/master/protocols.csv)\n   *\n   * @example\n   * ```js\n   * new Multiaddr('/ip4/127.0.0.1/tcp/4001').protos()\n   * // [ { code: 4, size: 32, name: 'ip4' },\n   * //   { code: 6, size: 16, name: 'tcp' } ]\n   * ```\n   */\n  protos () {\n    return this.protoCodes().map(code => Object.assign({}, getProtocol(code)))\n  }\n\n  /**\n   * Returns the codes of the protocols in left-to-right order.\n   * [See list of protocols](https://github.com/multiformats/multiaddr/blob/master/protocols.csv)\n   *\n   * @example\n   * ```js\n   * Multiaddr('/ip4/127.0.0.1/tcp/4001').protoCodes()\n   * // [ 4, 6 ]\n   * ```\n   */\n  protoCodes () {\n    const codes: number[] = []\n    const buf = this.bytes\n    let i = 0\n    while (i < buf.length) {\n      const code = varint.decode(buf, i)\n      const n = varint.decode.bytes\n\n      const p = getProtocol(code)\n      const size = codec.sizeForAddr(p, buf.slice(i + n))\n\n      i += (size + n)\n      codes.push(code)\n    }\n\n    return codes\n  }\n\n  /**\n   * Returns the names of the protocols in left-to-right order.\n   * [See list of protocols](https://github.com/multiformats/multiaddr/blob/master/protocols.csv)\n   *\n   * @example\n   * ```js\n   * new Multiaddr('/ip4/127.0.0.1/tcp/4001').protoNames()\n   * // [ 'ip4', 'tcp' ]\n   * ```\n   */\n  protoNames () {\n    return this.protos().map(proto => proto.name)\n  }\n\n  /**\n   * Returns a tuple of parts\n   *\n   * @example\n   * ```js\n   * new Multiaddr(\"/ip4/127.0.0.1/tcp/4001\").tuples()\n   * // [ [ 4, <Buffer 7f 00 00 01> ], [ 6, <Buffer 0f a1> ] ]\n   * ```\n   */\n  tuples () {\n    return codec.bytesToTuples(this.bytes)\n  }\n\n  /**\n   * Returns a tuple of string/number parts\n   * - tuples[][0] = code of protocol\n   * - tuples[][1] = contents of address\n   *\n   * @example\n   * ```js\n   * new Multiaddr(\"/ip4/127.0.0.1/tcp/4001\").stringTuples()\n   * // [ [ 4, '127.0.0.1' ], [ 6, '4001' ] ]\n   * ```\n   */\n  stringTuples () {\n    const t = codec.bytesToTuples(this.bytes)\n    return codec.tuplesToStringTuples(t)\n  }\n\n  /**\n   * Encapsulates a Multiaddr in another Multiaddr\n   *\n   * @example\n   * ```js\n   * const mh1 = new Multiaddr('/ip4/8.8.8.8/tcp/1080')\n   * // <Multiaddr 0408080808060438 - /ip4/8.8.8.8/tcp/1080>\n   *\n   * const mh2 = new Multiaddr('/ip4/127.0.0.1/tcp/4001')\n   * // <Multiaddr 047f000001060fa1 - /ip4/127.0.0.1/tcp/4001>\n   *\n   * const mh3 = mh1.encapsulate(mh2)\n   * // <Multiaddr 0408080808060438047f000001060fa1 - /ip4/8.8.8.8/tcp/1080/ip4/127.0.0.1/tcp/4001>\n   *\n   * mh3.toString()\n   * // '/ip4/8.8.8.8/tcp/1080/ip4/127.0.0.1/tcp/4001'\n   * ```\n   *\n   * @param {MultiaddrInput} addr - Multiaddr to add into this Multiaddr\n   */\n  encapsulate (addr: MultiaddrInput) {\n    addr = new Multiaddr(addr)\n    return new Multiaddr(this.toString() + addr.toString())\n  }\n\n  /**\n   * Decapsulates a Multiaddr from another Multiaddr\n   *\n   * @example\n   * ```js\n   * const mh1 = new Multiaddr('/ip4/8.8.8.8/tcp/1080')\n   * // <Multiaddr 0408080808060438 - /ip4/8.8.8.8/tcp/1080>\n   *\n   * const mh2 = new Multiaddr('/ip4/127.0.0.1/tcp/4001')\n   * // <Multiaddr 047f000001060fa1 - /ip4/127.0.0.1/tcp/4001>\n   *\n   * const mh3 = mh1.encapsulate(mh2)\n   * // <Multiaddr 0408080808060438047f000001060fa1 - /ip4/8.8.8.8/tcp/1080/ip4/127.0.0.1/tcp/4001>\n   *\n   * mh3.decapsulate(mh2).toString()\n   * // '/ip4/8.8.8.8/tcp/1080'\n   * ```\n   *\n   * @param {Multiaddr | string} addr - Multiaddr to remove from this Multiaddr\n   */\n  decapsulate (addr: Multiaddr | string) {\n    const addrString = addr.toString()\n    const s = this.toString()\n    const i = s.lastIndexOf(addrString)\n    if (i < 0) {\n      throw new Error(`Address ${this.toString()} does not contain subaddress: ${addr.toString()}`)\n    }\n    return new Multiaddr(s.slice(0, i))\n  }\n\n  /**\n   * A more reliable version of `decapsulate` if you are targeting a\n   * specific code, such as 421 (the `p2p` protocol code). The last index of the code\n   * will be removed from the `Multiaddr`, and a new instance will be returned.\n   * If the code is not present, the original `Multiaddr` is returned.\n   *\n   * @example\n   * ```js\n   * const addr = new Multiaddr('/ip4/0.0.0.0/tcp/8080/p2p/QmcgpsyWgH8Y8ajJz1Cu72KnS5uo2Aa2LpzU7kinSupNKC')\n   * // <Multiaddr 0400... - /ip4/0.0.0.0/tcp/8080/p2p/QmcgpsyWgH8Y8ajJz1Cu72KnS5uo2Aa2LpzU7kinSupNKC>\n   *\n   * addr.decapsulateCode(421).toString()\n   * // '/ip4/0.0.0.0/tcp/8080'\n   *\n   * new Multiaddr('/ip4/127.0.0.1/tcp/8080').decapsulateCode(421).toString()\n   * // '/ip4/127.0.0.1/tcp/8080'\n   * ```\n   */\n  decapsulateCode (code: number) {\n    const tuples = this.tuples()\n    for (let i = tuples.length - 1; i >= 0; i--) {\n      if (tuples[i][0] === code) {\n        return new Multiaddr(codec.tuplesToBytes(tuples.slice(0, i)))\n      }\n    }\n    return this\n  }\n\n  /**\n   * Extract the peerId if the multiaddr contains one\n   *\n   * @example\n   * ```js\n   * const mh1 = new Multiaddr('/ip4/8.8.8.8/tcp/1080/ipfs/QmValidBase58string')\n   * // <Multiaddr 0408080808060438 - /ip4/8.8.8.8/tcp/1080/ipfs/QmValidBase58string>\n   *\n   * // should return QmValidBase58string or null if the id is missing or invalid\n   * const peerId = mh1.getPeerId()\n   * ```\n   */\n  getPeerId (): string | null {\n    try {\n      const tuples = this.stringTuples().filter((tuple) => {\n        if (tuple[0] === names.ipfs.code) {\n          return true\n        }\n        return false\n      })\n\n      // Get the last ipfs tuple ['ipfs', 'peerid string']\n      const tuple = tuples.pop()\n      if (tuple?.[1] != null) {\n        const peerIdStr = tuple[1]\n\n        // peer id is base58btc encoded string but not multibase encoded so add the `z`\n        // prefix so we can validate that it is correctly encoded\n        if (peerIdStr[0] === 'Q' || peerIdStr[0] === '1') {\n          return uint8ArrayToString(base58btc.decode(`z${peerIdStr}`), 'base58btc')\n        }\n\n        // try to parse peer id as CID\n        return uint8ArrayToString(CID.parse(peerIdStr).multihash.bytes, 'base58btc')\n      }\n\n      return null\n    } catch (e) {\n      return null\n    }\n  }\n\n  /**\n   * Extract the path if the multiaddr contains one\n   *\n   * @example\n   * ```js\n   * const mh1 = new Multiaddr('/ip4/8.8.8.8/tcp/1080/unix/tmp/p2p.sock')\n   * // <Multiaddr 0408080808060438 - /ip4/8.8.8.8/tcp/1080/unix/tmp/p2p.sock>\n   *\n   * // should return utf8 string or null if the id is missing or invalid\n   * const path = mh1.getPath()\n   * ```\n   */\n  getPath (): string | null {\n    let path = null\n    try {\n      path = this.stringTuples().filter((tuple) => {\n        const proto = getProtocol(tuple[0])\n        if (proto.path === true) {\n          return true\n        }\n        return false\n      })[0][1]\n\n      if (path == null) {\n        path = null\n      }\n    } catch {\n      path = null\n    }\n    return path\n  }\n\n  /**\n   * Checks if two Multiaddrs are the same\n   *\n   * @example\n   * ```js\n   * const mh1 = new Multiaddr('/ip4/8.8.8.8/tcp/1080')\n   * // <Multiaddr 0408080808060438 - /ip4/8.8.8.8/tcp/1080>\n   *\n   * const mh2 = new Multiaddr('/ip4/127.0.0.1/tcp/4001')\n   * // <Multiaddr 047f000001060fa1 - /ip4/127.0.0.1/tcp/4001>\n   *\n   * mh1.equals(mh1)\n   * // true\n   *\n   * mh1.equals(mh2)\n   * // false\n   * ```\n   */\n  equals (addr: { bytes: Uint8Array }) {\n    return uint8ArrayEquals(this.bytes, addr.bytes)\n  }\n\n  /**\n   * Resolve multiaddr if containing resolvable hostname.\n   *\n   * @example\n   * ```js\n   * Multiaddr.resolvers.set('dnsaddr', resolverFunction)\n   * const mh1 = new Multiaddr('/dnsaddr/bootstrap.libp2p.io/p2p/QmbLHAnMoJPWSCR5Zhtx6BHJX9KiKNN6tpvbUcqanj75Nb')\n   * const resolvedMultiaddrs = await mh1.resolve()\n   * // [\n   * //   <Multiaddr 04934b5353060fa1a503221220c10f9319dac35c270a6b74cd644cb3acfc1f6efc8c821f8eb282599fd1814f64 - /ip4/147.75.83.83/tcp/4001/p2p/QmbLHAnMoJPWSCR5Zhtx6BHJX9KiKNN6tpvbUcqanj75Nb>,\n   * //   <Multiaddr 04934b53530601bbde03a503221220c10f9319dac35c270a6b74cd644cb3acfc1f6efc8c821f8eb282599fd1814f64 - /ip4/147.75.83.83/tcp/443/wss/p2p/QmbLHAnMoJPWSCR5Zhtx6BHJX9KiKNN6tpvbUcqanj75Nb>,\n   * //   <Multiaddr 04934b535391020fa1cc03a503221220c10f9319dac35c270a6b74cd644cb3acfc1f6efc8c821f8eb282599fd1814f64 - /ip4/147.75.83.83/udp/4001/quic/p2p/QmbLHAnMoJPWSCR5Zhtx6BHJX9KiKNN6tpvbUcqanj75Nb>\n   * // ]\n   * ```\n   */\n  async resolve (options?: AbortOptions) {\n    const resolvableProto = this.protos().find((p) => p.resolvable)\n\n    // Multiaddr is not resolvable?\n    if (resolvableProto == null) {\n      return [this]\n    }\n\n    const resolver = resolvers.get(resolvableProto.name)\n    if (resolver == null) {\n      throw errCode(new Error(`no available resolver for ${resolvableProto.name}`), 'ERR_NO_AVAILABLE_RESOLVER')\n    }\n\n    const addresses = await resolver(this, options)\n    return addresses.map((a) => new Multiaddr(a))\n  }\n\n  /**\n   * Gets a Multiaddrs node-friendly address object. Note that protocol information\n   * is left out: in Node (and most network systems) the protocol is unknowable\n   * given only the address.\n   *\n   * Has to be a ThinWaist Address, otherwise throws error\n   *\n   * @example\n   * ```js\n   * new Multiaddr('/ip4/127.0.0.1/tcp/4001').nodeAddress()\n   * // {family: 4, address: '127.0.0.1', port: 4001}\n   * ```\n   */\n  nodeAddress (): NodeAddress {\n    const options = this.toOptions()\n\n    if (options.transport !== 'tcp' && options.transport !== 'udp') {\n      throw new Error(`multiaddr must have a valid format - no protocol with name: \"${options.transport}\". Must have a valid transport protocol: \"{tcp, udp}\"`)\n    }\n\n    return {\n      family: options.family,\n      address: options.host,\n      port: options.port\n    }\n  }\n\n  /**\n   * Returns if a Multiaddr is a Thin Waist address or not.\n   *\n   * Thin Waist is if a Multiaddr adheres to the standard combination of:\n   *\n   * `{IPv4, IPv6}/{TCP, UDP}`\n   *\n   * @example\n   * ```js\n   * const mh1 = new Multiaddr('/ip4/127.0.0.1/tcp/4001')\n   * // <Multiaddr 047f000001060fa1 - /ip4/127.0.0.1/tcp/4001>\n   * const mh2 = new Multiaddr('/ip4/192.168.2.1/tcp/5001')\n   * // <Multiaddr 04c0a80201061389 - /ip4/192.168.2.1/tcp/5001>\n   * const mh3 = mh1.encapsulate(mh2)\n   * // <Multiaddr 047f000001060fa104c0a80201061389 - /ip4/127.0.0.1/tcp/4001/ip4/192.168.2.1/tcp/5001>\n   * const mh4 = new Multiaddr('/ip4/127.0.0.1/tcp/2000/wss/p2p-webrtc-star/p2p/QmcgpsyWgH8Y8ajJz1Cu72KnS5uo2Aa2LpzU7kinSooo2a')\n   * // <Multiaddr 047f0000010607d0de039302a503221220d52ebb89d85b02a284948203a62ff28389c57c9f42beec4ec20db76a64835843 - /ip4/127.0.0.1/tcp/2000/wss/p2p-webrtc-star/p2p/QmcgpsyWgH8Y8ajJz1Cu72KnS5uo2Aa2LpzU7kinSooo2a>\n   * mh1.isThinWaistAddress()\n   * // true\n   * mh2.isThinWaistAddress()\n   * // true\n   * mh3.isThinWaistAddress()\n   * // false\n   * mh4.isThinWaistAddress()\n   * // false\n   * ```\n   */\n  isThinWaistAddress (addr?: Multiaddr) {\n    const protos = (addr ?? this).protos()\n\n    if (protos.length !== 2) {\n      return false\n    }\n\n    if (protos[0].code !== 4 && protos[0].code !== 41) {\n      return false\n    }\n    if (protos[1].code !== 6 && protos[1].code !== 273) {\n      return false\n    }\n    return true\n  }\n\n  /**\n   * Creates a Multiaddr from a node-friendly address object\n   *\n   * @example\n   * ```js\n   * Multiaddr.fromNodeAddress({address: '127.0.0.1', port: '4001'}, 'tcp')\n   * // <Multiaddr 047f000001060fa1 - /ip4/127.0.0.1/tcp/4001>\n   * ```\n   */\n  static fromNodeAddress (addr: NodeAddress, transport: string) {\n    if (addr == null) {\n      throw new Error('requires node address object')\n    }\n    if (transport == null) {\n      throw new Error('requires transport protocol')\n    }\n    let ip\n    switch (addr.family) {\n      case 4:\n        ip = 'ip4'\n        break\n      case 6:\n        ip = 'ip6'\n        break\n      default:\n        throw Error('Invalid addr family, should be 4 or 6.')\n    }\n    return new Multiaddr('/' + [ip, addr.address, transport, addr.port].join('/'))\n  }\n\n  /**\n   * Returns if something is a Multiaddr that is a name\n   */\n  static isName (addr: Multiaddr) {\n    if (!Multiaddr.isMultiaddr(addr)) {\n      return false\n    }\n\n    // if a part of the multiaddr is resolvable, then return true\n    return addr.protos().some((proto) => proto.resolvable)\n  }\n\n  /**\n   * Check if object is a CID instance\n   */\n  static isMultiaddr (value: any): value is Multiaddr {\n    return Boolean(value?.[symbol])\n  }\n\n  /**\n   * Returns Multiaddr as a human-readable string.\n   * For post Node.js v10.0.0.\n   * https://nodejs.org/api/deprecations.html#deprecations_dep0079_custom_inspection_function_on_objects_via_inspect\n   *\n   * @example\n   * ```js\n   * console.log(new Multiaddr('/ip4/127.0.0.1/tcp/4001'))\n   * // '<Multiaddr 047f000001060fa1 - /ip4/127.0.0.1/tcp/4001>'\n   * ```\n   */\n  [inspect] () {\n    return '<Multiaddr ' +\n    uint8ArrayToString(this.bytes, 'base16') + ' - ' +\n    codec.bytesToString(this.bytes) + '>'\n  }\n\n  /**\n   * Returns Multiaddr as a human-readable string.\n   * Fallback for pre Node.js v10.0.0.\n   * https://nodejs.org/api/deprecations.html#deprecations_dep0079_custom_inspection_function_on_objects_via_inspect\n   *\n   * @example\n   * ```js\n   * new Multiaddr('/ip4/127.0.0.1/tcp/4001').inspect()\n   * // '<Multiaddr 047f000001060fa1 - /ip4/127.0.0.1/tcp/4001>'\n   * ```\n   */\n  inspect () {\n    return '<Multiaddr ' +\n      uint8ArrayToString(this.bytes, 'base16') + ' - ' +\n      codec.bytesToString(this.bytes) + '>'\n  }\n}\n\n/**\n * Static factory\n */\nexport function multiaddr (addr: MultiaddrInput) {\n  return new Multiaddr(addr)\n}\n\nexport { getProtocol as protocols }\nexport { resolvers }\n","let durationRE = /(-?(?:\\d+\\.?\\d*|\\d*\\.?\\d+)(?:e[-+]?\\d+)?)\\s*([\\p{L}]*)/uig\n\n\n/**\n * conversion ratios\n */\n\nparse.nanosecond =\nparse.ns = 1 / 1e6\n\nparse['µs'] =\nparse['μs'] =\nparse.us =\nparse.microsecond = 1 / 1e3\n\nparse.millisecond =\nparse.ms =\nparse[''] = 1\n\nparse.second =\nparse.sec =\nparse.s = parse.ms * 1000\n\nparse.minute =\nparse.min =\nparse.m = parse.s * 60\n\nparse.hour =\nparse.hr =\nparse.h = parse.m * 60\n\nparse.day =\nparse.d = parse.h * 24\n\nparse.week =\nparse.wk =\nparse.w = parse.d * 7\n\nparse.month =\nparse.b =\nparse.d * (365.25 / 12)\n\nparse.year =\nparse.yr =\nparse.y = parse.d * 365.25\n\n/**\n * convert `str` to ms\n *\n * @param {String} str\n * @param {String} format\n * @return {Number}\n */\n\nfunction parse(str='', format='ms'){\n  var result = null\n  // ignore commas/placeholders\n  str = (str+'').replace(/(\\d)[,_](\\d)/g, '$1$2')\n  str.replace(durationRE, function(_, n, units){\n    units = unitRatio(units)\n    if (units) result = (result || 0) + parseFloat(n, 10) * units\n  })\n\n  return result && (result / (unitRatio(format) || 1))\n}\n\nfunction unitRatio(str) {\n  return parse[str] || parse[str.toLowerCase().replace(/s$/, '')]\n}\n\nexport default parse\n","import debug from 'debug'\nimport { base58btc } from 'multiformats/bases/base58'\nimport { base32 } from 'multiformats/bases/base32'\nimport { base64 } from 'multiformats/bases/base64'\nimport type { PeerId } from '@libp2p/interfaces/peer-id'\nimport type { CID } from 'multiformats/cid'\nimport type { Key } from 'interface-datastore'\n\n// Add a formatter for converting to a base58 string\ndebug.formatters.b = (v?: Uint8Array) => {\n  return v == null ? 'undefined' : base58btc.baseEncode(v)\n}\n\n// Add a formatter for converting to a base32 string\ndebug.formatters.t = (v?: Uint8Array) => {\n  return v == null ? 'undefined' : base32.baseEncode(v)\n}\n\n// Add a formatter for converting to a base64 string\ndebug.formatters.m = (v?: Uint8Array) => {\n  return v == null ? 'undefined' : base64.baseEncode(v)\n}\n\n// Add a formatter for stringifying peer ids\ndebug.formatters.p = (v?: PeerId) => {\n  return v == null ? 'undefined' : v.toString()\n}\n\n// Add a formatter for stringifying CIDs\ndebug.formatters.c = (v?: CID) => {\n  return v == null ? 'undefined' : v.toString()\n}\n\n// Add a formatter for stringifying Datastore keys\ndebug.formatters.k = (v: Key) => {\n  return v == null ? 'undefined' : v.toString()\n}\n\nexport interface Logger {\n  (formatter: any, ...args: any[]): void\n  error: (formatter: any, ...args: any[]) => void\n  trace: (formatter: any, ...args: any[]) => void\n  enabled: boolean\n}\n\nexport function logger (name: string): Logger {\n  return Object.assign(debug(name), {\n    error: debug(`${name}:error`),\n    trace: debug(`${name}:trace`)\n  })\n}\n\nexport function disable () {\n  debug.disable()\n}\n\nexport function enable (namespaces: string) {\n  debug.enable(namespaces)\n}\n\nexport function enabled (namespaces: string) {\n  return debug.enabled(namespaces)\n}\n","/**\n * Thin ESM wrapper for CJS named exports.\n *\n * Ref: https://redfin.engineering/node-modules-at-war-why-commonjs-and-es-modules-cant-get-along-9617135eeca1\n */\n\nimport mergeOptions from './index.js';\nexport default mergeOptions;\n",null,null,null,"// base-x encoding / decoding\n// Copyright (c) 2018 base-x contributors\n// Copyright (c) 2014-2018 The Bitcoin Core developers (base58.cpp)\n// Distributed under the MIT software license, see the accompanying\n// file LICENSE or http://www.opensource.org/licenses/mit-license.php.\nfunction base (ALPHABET, name) {\n  if (ALPHABET.length >= 255) { throw new TypeError('Alphabet too long') }\n  var BASE_MAP = new Uint8Array(256);\n  for (var j = 0; j < BASE_MAP.length; j++) {\n    BASE_MAP[j] = 255;\n  }\n  for (var i = 0; i < ALPHABET.length; i++) {\n    var x = ALPHABET.charAt(i);\n    var xc = x.charCodeAt(0);\n    if (BASE_MAP[xc] !== 255) { throw new TypeError(x + ' is ambiguous') }\n    BASE_MAP[xc] = i;\n  }\n  var BASE = ALPHABET.length;\n  var LEADER = ALPHABET.charAt(0);\n  var FACTOR = Math.log(BASE) / Math.log(256); // log(BASE) / log(256), rounded up\n  var iFACTOR = Math.log(256) / Math.log(BASE); // log(256) / log(BASE), rounded up\n  function encode (source) {\n    if (source instanceof Uint8Array) ; else if (ArrayBuffer.isView(source)) {\n      source = new Uint8Array(source.buffer, source.byteOffset, source.byteLength);\n    } else if (Array.isArray(source)) {\n      source = Uint8Array.from(source);\n    }\n    if (!(source instanceof Uint8Array)) { throw new TypeError('Expected Uint8Array') }\n    if (source.length === 0) { return '' }\n        // Skip & count leading zeroes.\n    var zeroes = 0;\n    var length = 0;\n    var pbegin = 0;\n    var pend = source.length;\n    while (pbegin !== pend && source[pbegin] === 0) {\n      pbegin++;\n      zeroes++;\n    }\n        // Allocate enough space in big-endian base58 representation.\n    var size = ((pend - pbegin) * iFACTOR + 1) >>> 0;\n    var b58 = new Uint8Array(size);\n        // Process the bytes.\n    while (pbegin !== pend) {\n      var carry = source[pbegin];\n            // Apply \"b58 = b58 * 256 + ch\".\n      var i = 0;\n      for (var it1 = size - 1; (carry !== 0 || i < length) && (it1 !== -1); it1--, i++) {\n        carry += (256 * b58[it1]) >>> 0;\n        b58[it1] = (carry % BASE) >>> 0;\n        carry = (carry / BASE) >>> 0;\n      }\n      if (carry !== 0) { throw new Error('Non-zero carry') }\n      length = i;\n      pbegin++;\n    }\n        // Skip leading zeroes in base58 result.\n    var it2 = size - length;\n    while (it2 !== size && b58[it2] === 0) {\n      it2++;\n    }\n        // Translate the result into a string.\n    var str = LEADER.repeat(zeroes);\n    for (; it2 < size; ++it2) { str += ALPHABET.charAt(b58[it2]); }\n    return str\n  }\n  function decodeUnsafe (source) {\n    if (typeof source !== 'string') { throw new TypeError('Expected String') }\n    if (source.length === 0) { return new Uint8Array() }\n    var psz = 0;\n        // Skip leading spaces.\n    if (source[psz] === ' ') { return }\n        // Skip and count leading '1's.\n    var zeroes = 0;\n    var length = 0;\n    while (source[psz] === LEADER) {\n      zeroes++;\n      psz++;\n    }\n        // Allocate enough space in big-endian base256 representation.\n    var size = (((source.length - psz) * FACTOR) + 1) >>> 0; // log(58) / log(256), rounded up.\n    var b256 = new Uint8Array(size);\n        // Process the characters.\n    while (source[psz]) {\n            // Decode character\n      var carry = BASE_MAP[source.charCodeAt(psz)];\n            // Invalid character\n      if (carry === 255) { return }\n      var i = 0;\n      for (var it3 = size - 1; (carry !== 0 || i < length) && (it3 !== -1); it3--, i++) {\n        carry += (BASE * b256[it3]) >>> 0;\n        b256[it3] = (carry % 256) >>> 0;\n        carry = (carry / 256) >>> 0;\n      }\n      if (carry !== 0) { throw new Error('Non-zero carry') }\n      length = i;\n      psz++;\n    }\n        // Skip trailing spaces.\n    if (source[psz] === ' ') { return }\n        // Skip leading zeroes in b256.\n    var it4 = size - length;\n    while (it4 !== size && b256[it4] === 0) {\n      it4++;\n    }\n    var vch = new Uint8Array(zeroes + (size - it4));\n    var j = zeroes;\n    while (it4 !== size) {\n      vch[j++] = b256[it4++];\n    }\n    return vch\n  }\n  function decode (string) {\n    var buffer = decodeUnsafe(string);\n    if (buffer) { return buffer }\n    throw new Error(`Non-${name} character`)\n  }\n  return {\n    encode: encode,\n    decodeUnsafe: decodeUnsafe,\n    decode: decode\n  }\n}\nvar src = base;\n\nvar _brrp__multiformats_scope_baseX = src;\n\nexport default _brrp__multiformats_scope_baseX;\n","const empty = new Uint8Array(0)\n\n/**\n * @param {Uint8Array} d\n */\nconst toHex = d => d.reduce((hex, byte) => hex + byte.toString(16).padStart(2, '0'), '')\n\n/**\n * @param {string} hex\n */\nconst fromHex = hex => {\n  const hexes = hex.match(/../g)\n  return hexes ? new Uint8Array(hexes.map(b => parseInt(b, 16))) : empty\n}\n\n/**\n * @param {Uint8Array} aa\n * @param {Uint8Array} bb\n */\nconst equals = (aa, bb) => {\n  if (aa === bb) return true\n  if (aa.byteLength !== bb.byteLength) {\n    return false\n  }\n\n  for (let ii = 0; ii < aa.byteLength; ii++) {\n    if (aa[ii] !== bb[ii]) {\n      return false\n    }\n  }\n\n  return true\n}\n\n/**\n * @param {ArrayBufferView|ArrayBuffer|Uint8Array} o\n * @returns {Uint8Array}\n */\nconst coerce = o => {\n  if (o instanceof Uint8Array && o.constructor.name === 'Uint8Array') return o\n  if (o instanceof ArrayBuffer) return new Uint8Array(o)\n  if (ArrayBuffer.isView(o)) {\n    return new Uint8Array(o.buffer, o.byteOffset, o.byteLength)\n  }\n  throw new Error('Unknown type, must be binary type')\n}\n\n/**\n * @param {any} o\n * @returns {o is ArrayBuffer|ArrayBufferView}\n */\nconst isBinary = o =>\n  o instanceof ArrayBuffer || ArrayBuffer.isView(o)\n\n/**\n * @param {string} str\n * @returns {Uint8Array}\n */\nconst fromString = str => (new TextEncoder()).encode(str)\n\n/**\n * @param {Uint8Array} b\n * @returns {string}\n */\nconst toString = b => (new TextDecoder()).decode(b)\n\nexport { equals, coerce, isBinary, fromHex, toHex, fromString, toString, empty }\n","import basex from '../../vendor/base-x.js'\nimport { coerce } from '../bytes.js'\n// Linter can't see that API is used in types.\n// eslint-disable-next-line\nimport * as API from './interface.js'\n\n/**\n * Class represents both BaseEncoder and MultibaseEncoder meaning it\n * can be used to encode to multibase or base encode without multibase\n * prefix.\n *\n * @class\n * @template {string} Base\n * @template {string} Prefix\n * @implements {API.MultibaseEncoder<Prefix>}\n * @implements {API.BaseEncoder}\n */\nclass Encoder {\n  /**\n   * @param {Base} name\n   * @param {Prefix} prefix\n   * @param {(bytes:Uint8Array) => string} baseEncode\n   */\n  constructor (name, prefix, baseEncode) {\n    this.name = name\n    this.prefix = prefix\n    this.baseEncode = baseEncode\n  }\n\n  /**\n   * @param {Uint8Array} bytes\n   * @returns {API.Multibase<Prefix>}\n   */\n  encode (bytes) {\n    if (bytes instanceof Uint8Array) {\n      return `${this.prefix}${this.baseEncode(bytes)}`\n    } else {\n      throw Error('Unknown type, must be binary type')\n    }\n  }\n}\n\n/**\n * @template {string} Prefix\n */\n/**\n * Class represents both BaseDecoder and MultibaseDecoder so it could be used\n * to decode multibases (with matching prefix) or just base decode strings\n * with corresponding base encoding.\n *\n * @class\n * @template {string} Base\n * @template {string} Prefix\n * @implements {API.MultibaseDecoder<Prefix>}\n * @implements {API.UnibaseDecoder<Prefix>}\n * @implements {API.BaseDecoder}\n */\nclass Decoder {\n  /**\n   * @param {Base} name\n   * @param {Prefix} prefix\n   * @param {(text:string) => Uint8Array} baseDecode\n   */\n  constructor (name, prefix, baseDecode) {\n    this.name = name\n    this.prefix = prefix\n    /* c8 ignore next 3 */\n    if (prefix.codePointAt(0) === undefined) {\n      throw new Error('Invalid prefix character')\n    }\n    /** @private */\n    this.prefixCodePoint = /** @type {number} */ (prefix.codePointAt(0))\n    this.baseDecode = baseDecode\n  }\n\n  /**\n   * @param {string} text\n   */\n  decode (text) {\n    if (typeof text === 'string') {\n      if (text.codePointAt(0) !== this.prefixCodePoint) {\n        throw Error(`Unable to decode multibase string ${JSON.stringify(text)}, ${this.name} decoder only supports inputs prefixed with ${this.prefix}`)\n      }\n      return this.baseDecode(text.slice(this.prefix.length))\n    } else {\n      throw Error('Can only multibase decode strings')\n    }\n  }\n\n  /**\n   * @template {string} OtherPrefix\n   * @param {API.UnibaseDecoder<OtherPrefix>|ComposedDecoder<OtherPrefix>} decoder\n   * @returns {ComposedDecoder<Prefix|OtherPrefix>}\n   */\n  or (decoder) {\n    return or(this, decoder)\n  }\n}\n\n/**\n * @template {string} Prefix\n * @typedef {Record<Prefix, API.UnibaseDecoder<Prefix>>} Decoders\n */\n\n/**\n * @template {string} Prefix\n * @implements {API.MultibaseDecoder<Prefix>}\n * @implements {API.CombobaseDecoder<Prefix>}\n */\nclass ComposedDecoder {\n  /**\n   * @param {Decoders<Prefix>} decoders\n   */\n  constructor (decoders) {\n    this.decoders = decoders\n  }\n\n  /**\n   * @template {string} OtherPrefix\n   * @param {API.UnibaseDecoder<OtherPrefix>|ComposedDecoder<OtherPrefix>} decoder\n   * @returns {ComposedDecoder<Prefix|OtherPrefix>}\n   */\n  or (decoder) {\n    return or(this, decoder)\n  }\n\n  /**\n   * @param {string} input\n   * @returns {Uint8Array}\n   */\n  decode (input) {\n    const prefix = /** @type {Prefix} */ (input[0])\n    const decoder = this.decoders[prefix]\n    if (decoder) {\n      return decoder.decode(input)\n    } else {\n      throw RangeError(`Unable to decode multibase string ${JSON.stringify(input)}, only inputs prefixed with ${Object.keys(this.decoders)} are supported`)\n    }\n  }\n}\n\n/**\n * @template {string} L\n * @template {string} R\n * @param {API.UnibaseDecoder<L>|API.CombobaseDecoder<L>} left\n * @param {API.UnibaseDecoder<R>|API.CombobaseDecoder<R>} right\n * @returns {ComposedDecoder<L|R>}\n */\nexport const or = (left, right) => new ComposedDecoder(/** @type {Decoders<L|R>} */({\n  ...(left.decoders || { [/** @type API.UnibaseDecoder<L> */(left).prefix]: left }),\n  ...(right.decoders || { [/** @type API.UnibaseDecoder<R> */(right).prefix]: right })\n}))\n\n/**\n * @class\n * @template {string} Base\n * @template {string} Prefix\n * @implements {API.MultibaseCodec<Prefix>}\n * @implements {API.MultibaseEncoder<Prefix>}\n * @implements {API.MultibaseDecoder<Prefix>}\n * @implements {API.BaseCodec}\n * @implements {API.BaseEncoder}\n * @implements {API.BaseDecoder}\n */\nexport class Codec {\n  /**\n   * @param {Base} name\n   * @param {Prefix} prefix\n   * @param {(bytes:Uint8Array) => string} baseEncode\n   * @param {(text:string) => Uint8Array} baseDecode\n   */\n  constructor (name, prefix, baseEncode, baseDecode) {\n    this.name = name\n    this.prefix = prefix\n    this.baseEncode = baseEncode\n    this.baseDecode = baseDecode\n    this.encoder = new Encoder(name, prefix, baseEncode)\n    this.decoder = new Decoder(name, prefix, baseDecode)\n  }\n\n  /**\n   * @param {Uint8Array} input\n   */\n  encode (input) {\n    return this.encoder.encode(input)\n  }\n\n  /**\n   * @param {string} input\n   */\n  decode (input) {\n    return this.decoder.decode(input)\n  }\n}\n\n/**\n * @template {string} Base\n * @template {string} Prefix\n * @param {object} options\n * @param {Base} options.name\n * @param {Prefix} options.prefix\n * @param {(bytes:Uint8Array) => string} options.encode\n * @param {(input:string) => Uint8Array} options.decode\n * @returns {Codec<Base, Prefix>}\n */\nexport const from = ({ name, prefix, encode, decode }) =>\n  new Codec(name, prefix, encode, decode)\n\n/**\n * @template {string} Base\n * @template {string} Prefix\n * @param {object} options\n * @param {Base} options.name\n * @param {Prefix} options.prefix\n * @param {string} options.alphabet\n * @returns {Codec<Base, Prefix>}\n */\nexport const baseX = ({ prefix, name, alphabet }) => {\n  const { encode, decode } = basex(alphabet, name)\n  return from({\n    prefix,\n    name,\n    encode,\n    /**\n     * @param {string} text\n     */\n    decode: text => coerce(decode(text))\n  })\n}\n\n/**\n * @param {string} string\n * @param {string} alphabet\n * @param {number} bitsPerChar\n * @param {string} name\n * @returns {Uint8Array}\n */\nconst decode = (string, alphabet, bitsPerChar, name) => {\n  // Build the character lookup table:\n  /** @type {Record<string, number>} */\n  const codes = {}\n  for (let i = 0; i < alphabet.length; ++i) {\n    codes[alphabet[i]] = i\n  }\n\n  // Count the padding bytes:\n  let end = string.length\n  while (string[end - 1] === '=') {\n    --end\n  }\n\n  // Allocate the output:\n  const out = new Uint8Array((end * bitsPerChar / 8) | 0)\n\n  // Parse the data:\n  let bits = 0 // Number of bits currently in the buffer\n  let buffer = 0 // Bits waiting to be written out, MSB first\n  let written = 0 // Next byte to write\n  for (let i = 0; i < end; ++i) {\n    // Read one character from the string:\n    const value = codes[string[i]]\n    if (value === undefined) {\n      throw new SyntaxError(`Non-${name} character`)\n    }\n\n    // Append the bits to the buffer:\n    buffer = (buffer << bitsPerChar) | value\n    bits += bitsPerChar\n\n    // Write out some bits if the buffer has a byte's worth:\n    if (bits >= 8) {\n      bits -= 8\n      out[written++] = 0xff & (buffer >> bits)\n    }\n  }\n\n  // Verify that we have received just enough bits:\n  if (bits >= bitsPerChar || 0xff & (buffer << (8 - bits))) {\n    throw new SyntaxError('Unexpected end of data')\n  }\n\n  return out\n}\n\n/**\n * @param {Uint8Array} data\n * @param {string} alphabet\n * @param {number} bitsPerChar\n * @returns {string}\n */\nconst encode = (data, alphabet, bitsPerChar) => {\n  const pad = alphabet[alphabet.length - 1] === '='\n  const mask = (1 << bitsPerChar) - 1\n  let out = ''\n\n  let bits = 0 // Number of bits currently in the buffer\n  let buffer = 0 // Bits waiting to be written out, MSB first\n  for (let i = 0; i < data.length; ++i) {\n    // Slurp data into the buffer:\n    buffer = (buffer << 8) | data[i]\n    bits += 8\n\n    // Write out as much as we can:\n    while (bits > bitsPerChar) {\n      bits -= bitsPerChar\n      out += alphabet[mask & (buffer >> bits)]\n    }\n  }\n\n  // Partial character:\n  if (bits) {\n    out += alphabet[mask & (buffer << (bitsPerChar - bits))]\n  }\n\n  // Add padding characters until we hit a byte boundary:\n  if (pad) {\n    while ((out.length * bitsPerChar) & 7) {\n      out += '='\n    }\n  }\n\n  return out\n}\n\n/**\n * RFC4648 Factory\n *\n * @template {string} Base\n * @template {string} Prefix\n * @param {object} options\n * @param {Base} options.name\n * @param {Prefix} options.prefix\n * @param {string} options.alphabet\n * @param {number} options.bitsPerChar\n */\nexport const rfc4648 = ({ name, prefix, bitsPerChar, alphabet }) => {\n  return from({\n    prefix,\n    name,\n    encode (input) {\n      return encode(input, alphabet, bitsPerChar)\n    },\n    decode (input) {\n      return decode(input, alphabet, bitsPerChar, name)\n    }\n  })\n}\n","// @ts-check\n\nimport { from } from './base.js'\nimport { fromString, toString } from '../bytes.js'\n\nexport const identity = from({\n  prefix: '\\x00',\n  name: 'identity',\n  encode: (buf) => toString(buf),\n  decode: (str) => fromString(str)\n})\n","// @ts-check\n\nimport { rfc4648 } from './base.js'\n\nexport const base2 = rfc4648({\n  prefix: '0',\n  name: 'base2',\n  alphabet: '01',\n  bitsPerChar: 1\n})\n","// @ts-check\n\nimport { rfc4648 } from './base.js'\n\nexport const base8 = rfc4648({\n  prefix: '7',\n  name: 'base8',\n  alphabet: '01234567',\n  bitsPerChar: 3\n})\n","import { baseX } from './base.js'\n\nexport const base10 = baseX({\n  prefix: '9',\n  name: 'base10',\n  alphabet: '0123456789'\n})\n","// @ts-check\n\nimport { rfc4648 } from './base.js'\n\nexport const base16 = rfc4648({\n  prefix: 'f',\n  name: 'base16',\n  alphabet: '0123456789abcdef',\n  bitsPerChar: 4\n})\n\nexport const base16upper = rfc4648({\n  prefix: 'F',\n  name: 'base16upper',\n  alphabet: '0123456789ABCDEF',\n  bitsPerChar: 4\n})\n","import { rfc4648 } from './base.js'\n\nexport const base32 = rfc4648({\n  prefix: 'b',\n  name: 'base32',\n  alphabet: 'abcdefghijklmnopqrstuvwxyz234567',\n  bitsPerChar: 5\n})\n\nexport const base32upper = rfc4648({\n  prefix: 'B',\n  name: 'base32upper',\n  alphabet: 'ABCDEFGHIJKLMNOPQRSTUVWXYZ234567',\n  bitsPerChar: 5\n})\n\nexport const base32pad = rfc4648({\n  prefix: 'c',\n  name: 'base32pad',\n  alphabet: 'abcdefghijklmnopqrstuvwxyz234567=',\n  bitsPerChar: 5\n})\n\nexport const base32padupper = rfc4648({\n  prefix: 'C',\n  name: 'base32padupper',\n  alphabet: 'ABCDEFGHIJKLMNOPQRSTUVWXYZ234567=',\n  bitsPerChar: 5\n})\n\nexport const base32hex = rfc4648({\n  prefix: 'v',\n  name: 'base32hex',\n  alphabet: '0123456789abcdefghijklmnopqrstuv',\n  bitsPerChar: 5\n})\n\nexport const base32hexupper = rfc4648({\n  prefix: 'V',\n  name: 'base32hexupper',\n  alphabet: '0123456789ABCDEFGHIJKLMNOPQRSTUV',\n  bitsPerChar: 5\n})\n\nexport const base32hexpad = rfc4648({\n  prefix: 't',\n  name: 'base32hexpad',\n  alphabet: '0123456789abcdefghijklmnopqrstuv=',\n  bitsPerChar: 5\n})\n\nexport const base32hexpadupper = rfc4648({\n  prefix: 'T',\n  name: 'base32hexpadupper',\n  alphabet: '0123456789ABCDEFGHIJKLMNOPQRSTUV=',\n  bitsPerChar: 5\n})\n\nexport const base32z = rfc4648({\n  prefix: 'h',\n  name: 'base32z',\n  alphabet: 'ybndrfg8ejkmcpqxot1uwisza345h769',\n  bitsPerChar: 5\n})\n","import { baseX } from './base.js'\n\nexport const base36 = baseX({\n  prefix: 'k',\n  name: 'base36',\n  alphabet: '0123456789abcdefghijklmnopqrstuvwxyz'\n})\n\nexport const base36upper = baseX({\n  prefix: 'K',\n  name: 'base36upper',\n  alphabet: '0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ'\n})\n","import { baseX } from './base.js'\n\nexport const base58btc = baseX({\n  name: 'base58btc',\n  prefix: 'z',\n  alphabet: '123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz'\n})\n\nexport const base58flickr = baseX({\n  name: 'base58flickr',\n  prefix: 'Z',\n  alphabet: '123456789abcdefghijkmnopqrstuvwxyzABCDEFGHJKLMNPQRSTUVWXYZ'\n})\n","// @ts-check\n\nimport { rfc4648 } from './base.js'\n\nexport const base64 = rfc4648({\n  prefix: 'm',\n  name: 'base64',\n  alphabet: 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/',\n  bitsPerChar: 6\n})\n\nexport const base64pad = rfc4648({\n  prefix: 'M',\n  name: 'base64pad',\n  alphabet: 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=',\n  bitsPerChar: 6\n})\n\nexport const base64url = rfc4648({\n  prefix: 'u',\n  name: 'base64url',\n  alphabet: 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789-_',\n  bitsPerChar: 6\n})\n\nexport const base64urlpad = rfc4648({\n  prefix: 'U',\n  name: 'base64urlpad',\n  alphabet: 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789-_=',\n  bitsPerChar: 6\n})\n","import { from } from './base.js'\n\nconst alphabet = Array.from('🚀🪐☄🛰🌌🌑🌒🌓🌔🌕🌖🌗🌘🌍🌏🌎🐉☀💻🖥💾💿😂❤😍🤣😊🙏💕😭😘👍😅👏😁🔥🥰💔💖💙😢🤔😆🙄💪😉☺👌🤗💜😔😎😇🌹🤦🎉💞✌✨🤷😱😌🌸🙌😋💗💚😏💛🙂💓🤩😄😀🖤😃💯🙈👇🎶😒🤭❣😜💋👀😪😑💥🙋😞😩😡🤪👊🥳😥🤤👉💃😳✋😚😝😴🌟😬🙃🍀🌷😻😓⭐✅🥺🌈😈🤘💦✔😣🏃💐☹🎊💘😠☝😕🌺🎂🌻😐🖕💝🙊😹🗣💫💀👑🎵🤞😛🔴😤🌼😫⚽🤙☕🏆🤫👈😮🙆🍻🍃🐶💁😲🌿🧡🎁⚡🌞🎈❌✊👋😰🤨😶🤝🚶💰🍓💢🤟🙁🚨💨🤬✈🎀🍺🤓😙💟🌱😖👶🥴▶➡❓💎💸⬇😨🌚🦋😷🕺⚠🙅😟😵👎🤲🤠🤧📌🔵💅🧐🐾🍒😗🤑🌊🤯🐷☎💧😯💆👆🎤🙇🍑❄🌴💣🐸💌📍🥀🤢👅💡💩👐📸👻🤐🤮🎼🥵🚩🍎🍊👼💍📣🥂')\nconst alphabetBytesToChars = /** @type {string[]} */ (alphabet.reduce((p, c, i) => { p[i] = c; return p }, /** @type {string[]} */([])))\nconst alphabetCharsToBytes = /** @type {number[]} */ (alphabet.reduce((p, c, i) => { p[/** @type {number} */ (c.codePointAt(0))] = i; return p }, /** @type {number[]} */([])))\n\n/**\n * @param {Uint8Array} data\n * @returns {string}\n */\nfunction encode (data) {\n  return data.reduce((p, c) => {\n    p += alphabetBytesToChars[c]\n    return p\n  }, '')\n}\n\n/**\n * @param {string} str\n * @returns {Uint8Array}\n */\nfunction decode (str) {\n  const byts = []\n  for (const char of str) {\n    const byt = alphabetCharsToBytes[/** @type {number} */ (char.codePointAt(0))]\n    if (byt === undefined) {\n      throw new Error(`Non-base256emoji character: ${char}`)\n    }\n    byts.push(byt)\n  }\n  return new Uint8Array(byts)\n}\n\nexport const base256emoji = from({\n  prefix: '🚀',\n  name: 'base256emoji',\n  encode,\n  decode\n})\n","var encode_1 = encode;\n\nvar MSB = 0x80\n  , REST = 0x7F\n  , MSBALL = ~REST\n  , INT = Math.pow(2, 31);\n\nfunction encode(num, out, offset) {\n  out = out || [];\n  offset = offset || 0;\n  var oldOffset = offset;\n\n  while(num >= INT) {\n    out[offset++] = (num & 0xFF) | MSB;\n    num /= 128;\n  }\n  while(num & MSBALL) {\n    out[offset++] = (num & 0xFF) | MSB;\n    num >>>= 7;\n  }\n  out[offset] = num | 0;\n  \n  encode.bytes = offset - oldOffset + 1;\n  \n  return out\n}\n\nvar decode = read;\n\nvar MSB$1 = 0x80\n  , REST$1 = 0x7F;\n\nfunction read(buf, offset) {\n  var res    = 0\n    , offset = offset || 0\n    , shift  = 0\n    , counter = offset\n    , b\n    , l = buf.length;\n\n  do {\n    if (counter >= l) {\n      read.bytes = 0;\n      throw new RangeError('Could not decode varint')\n    }\n    b = buf[counter++];\n    res += shift < 28\n      ? (b & REST$1) << shift\n      : (b & REST$1) * Math.pow(2, shift);\n    shift += 7;\n  } while (b >= MSB$1)\n\n  read.bytes = counter - offset;\n\n  return res\n}\n\nvar N1 = Math.pow(2,  7);\nvar N2 = Math.pow(2, 14);\nvar N3 = Math.pow(2, 21);\nvar N4 = Math.pow(2, 28);\nvar N5 = Math.pow(2, 35);\nvar N6 = Math.pow(2, 42);\nvar N7 = Math.pow(2, 49);\nvar N8 = Math.pow(2, 56);\nvar N9 = Math.pow(2, 63);\n\nvar length = function (value) {\n  return (\n    value < N1 ? 1\n  : value < N2 ? 2\n  : value < N3 ? 3\n  : value < N4 ? 4\n  : value < N5 ? 5\n  : value < N6 ? 6\n  : value < N7 ? 7\n  : value < N8 ? 8\n  : value < N9 ? 9\n  :              10\n  )\n};\n\nvar varint = {\n    encode: encode_1\n  , decode: decode\n  , encodingLength: length\n};\n\nvar _brrp_varint = varint;\n\nexport default _brrp_varint;\n","import varint from '../vendor/varint.js'\n\n/**\n * @param {Uint8Array} data\n * @param {number} [offset=0]\n * @returns {[number, number]}\n */\nexport const decode = (data, offset = 0) => {\n  const code = varint.decode(data, offset)\n  return [code, varint.decode.bytes]\n}\n\n/**\n * @param {number} int\n * @param {Uint8Array} target\n * @param {number} [offset=0]\n */\nexport const encodeTo = (int, target, offset = 0) => {\n  varint.encode(int, target, offset)\n  return target\n}\n\n/**\n * @param {number} int\n * @returns {number}\n */\nexport const encodingLength = (int) => {\n  return varint.encodingLength(int)\n}\n","import { coerce, equals as equalBytes } from '../bytes.js'\nimport * as varint from '../varint.js'\n\n/**\n * Creates a multihash digest.\n *\n * @template {number} Code\n * @param {Code} code\n * @param {Uint8Array} digest\n */\nexport const create = (code, digest) => {\n  const size = digest.byteLength\n  const sizeOffset = varint.encodingLength(code)\n  const digestOffset = sizeOffset + varint.encodingLength(size)\n\n  const bytes = new Uint8Array(digestOffset + size)\n  varint.encodeTo(code, bytes, 0)\n  varint.encodeTo(size, bytes, sizeOffset)\n  bytes.set(digest, digestOffset)\n\n  return new Digest(code, size, digest, bytes)\n}\n\n/**\n * Turns bytes representation of multihash digest into an instance.\n *\n * @param {Uint8Array} multihash\n * @returns {MultihashDigest}\n */\nexport const decode = (multihash) => {\n  const bytes = coerce(multihash)\n  const [code, sizeOffset] = varint.decode(bytes)\n  const [size, digestOffset] = varint.decode(bytes.subarray(sizeOffset))\n  const digest = bytes.subarray(sizeOffset + digestOffset)\n\n  if (digest.byteLength !== size) {\n    throw new Error('Incorrect length')\n  }\n\n  return new Digest(code, size, digest, bytes)\n}\n\n/**\n * @param {MultihashDigest} a\n * @param {unknown} b\n * @returns {b is MultihashDigest}\n */\nexport const equals = (a, b) => {\n  if (a === b) {\n    return true\n  } else {\n    const data = /** @type {{code?:unknown, size?:unknown, bytes?:unknown}} */(b)\n\n    return (\n      a.code === data.code &&\n      a.size === data.size &&\n      data.bytes instanceof Uint8Array &&\n      equalBytes(a.bytes, data.bytes)\n    )\n  }\n}\n\n/**\n * @typedef {import('./interface.js').MultihashDigest} MultihashDigest\n */\n\n/**\n * Represents a multihash digest which carries information about the\n * hashing algorithm and an actual hash digest.\n *\n * @template {number} Code\n * @template {number} Size\n * @class\n * @implements {MultihashDigest}\n */\nexport class Digest {\n  /**\n   * Creates a multihash digest.\n   *\n   * @param {Code} code\n   * @param {Size} size\n   * @param {Uint8Array} digest\n   * @param {Uint8Array} bytes\n   */\n  constructor (code, size, digest, bytes) {\n    this.code = code\n    this.size = size\n    this.digest = digest\n    this.bytes = bytes\n  }\n}\n","import * as Digest from './digest.js'\n\n/**\n * @template {string} Name\n * @template {number} Code\n * @param {object} options\n * @param {Name} options.name\n * @param {Code} options.code\n * @param {(input: Uint8Array) => Await<Uint8Array>} options.encode\n */\nexport const from = ({ name, code, encode }) => new Hasher(name, code, encode)\n\n/**\n * Hasher represents a hashing algorithm implementation that produces as\n * `MultihashDigest`.\n *\n * @template {string} Name\n * @template {number} Code\n * @class\n * @implements {MultihashHasher<Code>}\n */\nexport class Hasher {\n  /**\n   *\n   * @param {Name} name\n   * @param {Code} code\n   * @param {(input: Uint8Array) => Await<Uint8Array>} encode\n   */\n  constructor (name, code, encode) {\n    this.name = name\n    this.code = code\n    this.encode = encode\n  }\n\n  /**\n   * @param {Uint8Array} input\n   * @returns {Await<Digest.Digest<Code, number>>}\n   */\n  digest (input) {\n    if (input instanceof Uint8Array) {\n      const result = this.encode(input)\n      return result instanceof Uint8Array\n        ? Digest.create(this.code, result)\n        /* c8 ignore next 1 */\n        : result.then(digest => Digest.create(this.code, digest))\n    } else {\n      throw Error('Unknown type, must be binary type')\n      /* c8 ignore next 1 */\n    }\n  }\n}\n\n/**\n * @template {number} Alg\n * @typedef {import('./interface.js').MultihashHasher} MultihashHasher\n */\n\n/**\n * @template T\n * @typedef {Promise<T>|T} Await\n */\n","/* global crypto */\n\nimport { from } from './hasher.js'\n\n/**\n * @param {AlgorithmIdentifier} name\n */\nconst sha = name =>\n  /**\n   * @param {Uint8Array} data\n   */\n  async data => new Uint8Array(await crypto.subtle.digest(name, data))\n\nexport const sha256 = from({\n  name: 'sha2-256',\n  code: 0x12,\n  encode: sha('SHA-256')\n})\n\nexport const sha512 = from({\n  name: 'sha2-512',\n  code: 0x13,\n  encode: sha('SHA-512')\n})\n","import { coerce } from '../bytes.js'\nimport * as Digest from './digest.js'\n\nconst code = 0x0\nconst name = 'identity'\n\n/** @type {(input:Uint8Array) => Uint8Array} */\nconst encode = coerce\n\n/**\n * @param {Uint8Array} input\n * @returns {Digest.Digest<typeof code, number>}\n */\nconst digest = (input) => Digest.create(code, encode(input))\n\nexport const identity = { code, name, encode, digest }\n","// @ts-check\n\nimport { coerce } from '../bytes.js'\n\n/**\n * @template T\n * @typedef {import('./interface.js').ByteView<T>} ByteView\n */\n\nexport const name = 'raw'\nexport const code = 0x55\n\n/**\n * @param {Uint8Array} node\n * @returns {ByteView<Uint8Array>}\n */\nexport const encode = (node) => coerce(node)\n\n/**\n * @param {ByteView<Uint8Array>} data\n * @returns {Uint8Array}\n */\nexport const decode = (data) => coerce(data)\n","// @ts-check\n\n/**\n * @template T\n * @typedef {import('./interface.js').ByteView<T>} ByteView\n */\n\nconst textEncoder = new TextEncoder()\nconst textDecoder = new TextDecoder()\n\nexport const name = 'json'\nexport const code = 0x0200\n\n/**\n * @template T\n * @param {T} node\n * @returns {ByteView<T>}\n */\nexport const encode = (node) => textEncoder.encode(JSON.stringify(node))\n\n/**\n * @template T\n * @param {ByteView<T>} data\n * @returns {T}\n */\nexport const decode = (data) => JSON.parse(textDecoder.decode(data))\n","import * as varint from './varint.js'\nimport * as Digest from './hashes/digest.js'\nimport { base58btc } from './bases/base58.js'\nimport { base32 } from './bases/base32.js'\nimport { coerce } from './bytes.js'\n// Linter can see that API is used in types.\n// eslint-disable-next-line\nimport * as API from \"./link/interface.js\"\n\n// This way TS will also expose all the types from module\nexport * from './link/interface.js'\n\n/**\n * @template {API.Link<unknown, number, number, API.Version>} T\n * @template {string} Prefix\n * @param {T} link\n * @param {API.MultibaseEncoder<Prefix>} [base]\n * @returns {API.ToString<T, Prefix>}\n */\nexport const format = (link, base) => {\n  const { bytes, version } = link\n  switch (version) {\n    case 0:\n      return toStringV0(\n        bytes,\n        baseCache(link),\n        /** @type {API.MultibaseEncoder<\"z\">} */ (base) || base58btc.encoder\n      )\n    default:\n      return toStringV1(\n        bytes,\n        baseCache(link),\n        /** @type {API.MultibaseEncoder<Prefix>} */ (base || base32.encoder)\n      )\n  }\n}\n\n/**\n * @template {API.UnknownLink} Link\n * @param {Link} link\n * @returns {API.LinkJSON<Link>}\n */\nexport const toJSON = (link) => ({\n  '/': format(link)\n})\n\n/**\n * @template {API.UnknownLink} Link\n * @param {API.LinkJSON<Link>} json\n */\nexport const fromJSON = (json) =>\n  CID.parse(json['/'])\n\n/** @type {WeakMap<API.UnknownLink, Map<string, string>>} */\nconst cache = new WeakMap()\n\n/**\n * @param {API.UnknownLink} cid\n * @returns {Map<string, string>}\n */\nconst baseCache = cid => {\n  const baseCache = cache.get(cid)\n  if (baseCache == null) {\n    const baseCache = new Map()\n    cache.set(cid, baseCache)\n    return baseCache\n  }\n  return baseCache\n}\n\n/**\n * @template {unknown} [Data=unknown]\n * @template {number} [Format=number]\n * @template {number} [Alg=number]\n * @template {API.Version} [Version=API.Version]\n * @implements {API.Link<Data, Format, Alg, Version>}\n */\n\nexport class CID {\n  /**\n   * @param {Version} version - Version of the CID\n   * @param {Format} code - Code of the codec content is encoded in, see https://github.com/multiformats/multicodec/blob/master/table.csv\n   * @param {API.MultihashDigest<Alg>} multihash - (Multi)hash of the of the content.\n   * @param {Uint8Array} bytes\n   *\n   */\n  constructor (version, code, multihash, bytes) {\n    /** @readonly */\n    this.code = code\n    /** @readonly */\n    this.version = version\n    /** @readonly */\n    this.multihash = multihash\n    /** @readonly */\n    this.bytes = bytes\n\n    // flag to serializers that this is a CID and\n    // should be treated specially\n    /** @readonly */\n    this['/'] = bytes\n  }\n\n  /**\n   * Signalling `cid.asCID === cid` has been replaced with `cid['/'] === cid.bytes`\n   * please either use `CID.asCID(cid)` or switch to new signalling mechanism\n   *\n   * @deprecated\n   */\n  get asCID () {\n    return this\n  }\n\n  // ArrayBufferView\n  get byteOffset () {\n    return this.bytes.byteOffset\n  }\n\n  // ArrayBufferView\n  get byteLength () {\n    return this.bytes.byteLength\n  }\n\n  /**\n   * @returns {CID<Data, API.DAG_PB, API.SHA_256, 0>}\n   */\n  toV0 () {\n    switch (this.version) {\n      case 0: {\n        return /** @type {CID<Data, API.DAG_PB, API.SHA_256, 0>} */ (this)\n      }\n      case 1: {\n        const { code, multihash } = this\n\n        if (code !== DAG_PB_CODE) {\n          throw new Error('Cannot convert a non dag-pb CID to CIDv0')\n        }\n\n        // sha2-256\n        if (multihash.code !== SHA_256_CODE) {\n          throw new Error('Cannot convert non sha2-256 multihash CID to CIDv0')\n        }\n\n        return /** @type {CID<Data, API.DAG_PB, API.SHA_256, 0>} */ (\n          CID.createV0(\n            /** @type {API.MultihashDigest<API.SHA_256>} */ (multihash)\n          )\n        )\n      }\n      default: {\n        throw Error(\n          `Can not convert CID version ${this.version} to version 0. This is a bug please report`\n        )\n      }\n    }\n  }\n\n  /**\n   * @returns {CID<Data, Format, Alg, 1>}\n   */\n  toV1 () {\n    switch (this.version) {\n      case 0: {\n        const { code, digest } = this.multihash\n        const multihash = Digest.create(code, digest)\n        return /** @type {CID<Data, Format, Alg, 1>} */ (\n          CID.createV1(this.code, multihash)\n        )\n      }\n      case 1: {\n        return /** @type {CID<Data, Format, Alg, 1>} */ (this)\n      }\n      default: {\n        throw Error(\n          `Can not convert CID version ${this.version} to version 1. This is a bug please report`\n        )\n      }\n    }\n  }\n\n  /**\n   * @param {unknown} other\n   * @returns {other is CID<Data, Format, Alg, Version>}\n   */\n  equals (other) {\n    return CID.equals(this, other)\n  }\n\n  /**\n   * @template {unknown} Data\n   * @template {number} Format\n   * @template {number} Alg\n   * @template {API.Version} Version\n   * @param {API.Link<Data, Format, Alg, Version>} self\n   * @param {unknown} other\n   * @returns {other is CID}\n   */\n  static equals (self, other) {\n    const unknown =\n      /** @type {{code?:unknown, version?:unknown, multihash?:unknown}} */ (\n        other\n      )\n    return (\n      unknown &&\n      self.code === unknown.code &&\n      self.version === unknown.version &&\n      Digest.equals(self.multihash, unknown.multihash)\n    )\n  }\n\n  /**\n   * @param {API.MultibaseEncoder<string>} [base]\n   * @returns {string}\n   */\n  toString (base) {\n    return format(this, base)\n  }\n\n  toJSON () {\n    return { '/': format(this) }\n  }\n\n  link () {\n    return this\n  }\n\n  get [Symbol.toStringTag] () {\n    return 'CID'\n  }\n\n  // Legacy\n\n  [Symbol.for('nodejs.util.inspect.custom')] () {\n    return `CID(${this.toString()})`\n  }\n\n  /**\n   * Takes any input `value` and returns a `CID` instance if it was\n   * a `CID` otherwise returns `null`. If `value` is instanceof `CID`\n   * it will return value back. If `value` is not instance of this CID\n   * class, but is compatible CID it will return new instance of this\n   * `CID` class. Otherwise returns null.\n   *\n   * This allows two different incompatible versions of CID library to\n   * co-exist and interop as long as binary interface is compatible.\n   *\n   * @template {unknown} Data\n   * @template {number} Format\n   * @template {number} Alg\n   * @template {API.Version} Version\n   * @template {unknown} U\n   * @param {API.Link<Data, Format, Alg, Version>|U} input\n   * @returns {CID<Data, Format, Alg, Version>|null}\n   */\n  static asCID (input) {\n    if (input == null) {\n      return null\n    }\n\n    const value = /** @type {any} */ (input)\n    if (value instanceof CID) {\n      // If value is instance of CID then we're all set.\n      return value\n    } else if ((value['/'] != null && value['/'] === value.bytes) || value.asCID === value) {\n      // If value isn't instance of this CID class but `this.asCID === this` or\n      // `value['/'] === value.bytes` is true it is CID instance coming from a\n      // different implementation (diff version or duplicate). In that case we\n      // rebase it to this `CID` implementation so caller is guaranteed to get\n      // instance with expected API.\n      const { version, code, multihash, bytes } = value\n      return new CID(\n        version,\n        code,\n        /** @type {API.MultihashDigest<Alg>} */ (multihash),\n        bytes || encodeCID(version, code, multihash.bytes)\n      )\n    } else if (value[cidSymbol] === true) {\n      // If value is a CID from older implementation that used to be tagged via\n      // symbol we still rebase it to the this `CID` implementation by\n      // delegating that to a constructor.\n      const { version, multihash, code } = value\n      const digest =\n        /** @type {API.MultihashDigest<Alg>} */\n        (Digest.decode(multihash))\n      return CID.create(version, code, digest)\n    } else {\n      // Otherwise value is not a CID (or an incompatible version of it) in\n      // which case we return `null`.\n      return null\n    }\n  }\n\n  /**\n   *\n   * @template {unknown} Data\n   * @template {number} Format\n   * @template {number} Alg\n   * @template {API.Version} Version\n   * @param {Version} version - Version of the CID\n   * @param {Format} code - Code of the codec content is encoded in, see https://github.com/multiformats/multicodec/blob/master/table.csv\n   * @param {API.MultihashDigest<Alg>} digest - (Multi)hash of the of the content.\n   * @returns {CID<Data, Format, Alg, Version>}\n   */\n  static create (version, code, digest) {\n    if (typeof code !== 'number') {\n      throw new Error('String codecs are no longer supported')\n    }\n\n    if (!(digest.bytes instanceof Uint8Array)) {\n      throw new Error('Invalid digest')\n    }\n\n    switch (version) {\n      case 0: {\n        if (code !== DAG_PB_CODE) {\n          throw new Error(\n            `Version 0 CID must use dag-pb (code: ${DAG_PB_CODE}) block encoding`\n          )\n        } else {\n          return new CID(version, code, digest, digest.bytes)\n        }\n      }\n      case 1: {\n        const bytes = encodeCID(version, code, digest.bytes)\n        return new CID(version, code, digest, bytes)\n      }\n      default: {\n        throw new Error('Invalid version')\n      }\n    }\n  }\n\n  /**\n   * Simplified version of `create` for CIDv0.\n   *\n   * @template {unknown} [T=unknown]\n   * @param {API.MultihashDigest<typeof SHA_256_CODE>} digest - Multihash.\n   * @returns {CID<T, typeof DAG_PB_CODE, typeof SHA_256_CODE, 0>}\n   */\n  static createV0 (digest) {\n    return CID.create(0, DAG_PB_CODE, digest)\n  }\n\n  /**\n   * Simplified version of `create` for CIDv1.\n   *\n   * @template {unknown} Data\n   * @template {number} Code\n   * @template {number} Alg\n   * @param {Code} code - Content encoding format code.\n   * @param {API.MultihashDigest<Alg>} digest - Miltihash of the content.\n   * @returns {CID<Data, Code, Alg, 1>}\n   */\n  static createV1 (code, digest) {\n    return CID.create(1, code, digest)\n  }\n\n  /**\n   * Decoded a CID from its binary representation. The byte array must contain\n   * only the CID with no additional bytes.\n   *\n   * An error will be thrown if the bytes provided do not contain a valid\n   * binary representation of a CID.\n   *\n   * @template {unknown} Data\n   * @template {number} Code\n   * @template {number} Alg\n   * @template {API.Version} Ver\n   * @param {API.ByteView<API.Link<Data, Code, Alg, Ver>>} bytes\n   * @returns {CID<Data, Code, Alg, Ver>}\n   */\n  static decode (bytes) {\n    const [cid, remainder] = CID.decodeFirst(bytes)\n    if (remainder.length) {\n      throw new Error('Incorrect length')\n    }\n    return cid\n  }\n\n  /**\n   * Decoded a CID from its binary representation at the beginning of a byte\n   * array.\n   *\n   * Returns an array with the first element containing the CID and the second\n   * element containing the remainder of the original byte array. The remainder\n   * will be a zero-length byte array if the provided bytes only contained a\n   * binary CID representation.\n   *\n   * @template {unknown} T\n   * @template {number} C\n   * @template {number} A\n   * @template {API.Version} V\n   * @param {API.ByteView<API.Link<T, C, A, V>>} bytes\n   * @returns {[CID<T, C, A, V>, Uint8Array]}\n   */\n  static decodeFirst (bytes) {\n    const specs = CID.inspectBytes(bytes)\n    const prefixSize = specs.size - specs.multihashSize\n    const multihashBytes = coerce(\n      bytes.subarray(prefixSize, prefixSize + specs.multihashSize)\n    )\n    if (multihashBytes.byteLength !== specs.multihashSize) {\n      throw new Error('Incorrect length')\n    }\n    const digestBytes = multihashBytes.subarray(\n      specs.multihashSize - specs.digestSize\n    )\n    const digest = new Digest.Digest(\n      specs.multihashCode,\n      specs.digestSize,\n      digestBytes,\n      multihashBytes\n    )\n    const cid =\n      specs.version === 0\n        ? CID.createV0(/** @type {API.MultihashDigest<API.SHA_256>} */ (digest))\n        : CID.createV1(specs.codec, digest)\n    return [/** @type {CID<T, C, A, V>} */(cid), bytes.subarray(specs.size)]\n  }\n\n  /**\n   * Inspect the initial bytes of a CID to determine its properties.\n   *\n   * Involves decoding up to 4 varints. Typically this will require only 4 to 6\n   * bytes but for larger multicodec code values and larger multihash digest\n   * lengths these varints can be quite large. It is recommended that at least\n   * 10 bytes be made available in the `initialBytes` argument for a complete\n   * inspection.\n   *\n   * @template {unknown} T\n   * @template {number} C\n   * @template {number} A\n   * @template {API.Version} V\n   * @param {API.ByteView<API.Link<T, C, A, V>>} initialBytes\n   * @returns {{ version:V, codec:C, multihashCode:A, digestSize:number, multihashSize:number, size:number }}\n   */\n  static inspectBytes (initialBytes) {\n    let offset = 0\n    const next = () => {\n      const [i, length] = varint.decode(initialBytes.subarray(offset))\n      offset += length\n      return i\n    }\n\n    let version = /** @type {V} */ (next())\n    let codec = /** @type {C} */ (DAG_PB_CODE)\n    if (/** @type {number} */(version) === 18) {\n      // CIDv0\n      version = /** @type {V} */ (0)\n      offset = 0\n    } else {\n      codec = /** @type {C} */ (next())\n    }\n\n    if (version !== 0 && version !== 1) {\n      throw new RangeError(`Invalid CID version ${version}`)\n    }\n\n    const prefixSize = offset\n    const multihashCode = /** @type {A} */ (next()) // multihash code\n    const digestSize = next() // multihash length\n    const size = offset + digestSize\n    const multihashSize = size - prefixSize\n\n    return { version, codec, multihashCode, digestSize, multihashSize, size }\n  }\n\n  /**\n   * Takes cid in a string representation and creates an instance. If `base`\n   * decoder is not provided will use a default from the configuration. It will\n   * throw an error if encoding of the CID is not compatible with supplied (or\n   * a default decoder).\n   *\n   * @template {string} Prefix\n   * @template {unknown} Data\n   * @template {number} Code\n   * @template {number} Alg\n   * @template {API.Version} Ver\n   * @param {API.ToString<API.Link<Data, Code, Alg, Ver>, Prefix>} source\n   * @param {API.MultibaseDecoder<Prefix>} [base]\n   * @returns {CID<Data, Code, Alg, Ver>}\n   */\n  static parse (source, base) {\n    const [prefix, bytes] = parseCIDtoBytes(source, base)\n\n    const cid = CID.decode(bytes)\n\n    if (cid.version === 0 && source[0] !== 'Q') {\n      throw Error('Version 0 CID string must not include multibase prefix')\n    }\n\n    // Cache string representation to avoid computing it on `this.toString()`\n    baseCache(cid).set(prefix, source)\n\n    return cid\n  }\n}\n\n/**\n * @template {string} Prefix\n * @template {unknown} Data\n * @template {number} Code\n * @template {number} Alg\n * @template {API.Version} Ver\n * @param {API.ToString<API.Link<Data, Code, Alg, Ver>, Prefix>} source\n * @param {API.MultibaseDecoder<Prefix>} [base]\n * @returns {[Prefix, API.ByteView<API.Link<Data, Code, Alg, Ver>>]}\n */\nconst parseCIDtoBytes = (source, base) => {\n  switch (source[0]) {\n    // CIDv0 is parsed differently\n    case 'Q': {\n      const decoder = base || base58btc\n      return [\n        /** @type {Prefix} */ (base58btc.prefix),\n        decoder.decode(`${base58btc.prefix}${source}`)\n      ]\n    }\n    case base58btc.prefix: {\n      const decoder = base || base58btc\n      return [/** @type {Prefix} */(base58btc.prefix), decoder.decode(source)]\n    }\n    case base32.prefix: {\n      const decoder = base || base32\n      return [/** @type {Prefix} */(base32.prefix), decoder.decode(source)]\n    }\n    default: {\n      if (base == null) {\n        throw Error(\n          'To parse non base32 or base58btc encoded CID multibase decoder must be provided'\n        )\n      }\n      return [/** @type {Prefix} */(source[0]), base.decode(source)]\n    }\n  }\n}\n\n/**\n *\n * @param {Uint8Array} bytes\n * @param {Map<string, string>} cache\n * @param {API.MultibaseEncoder<'z'>} base\n */\nconst toStringV0 = (bytes, cache, base) => {\n  const { prefix } = base\n  if (prefix !== base58btc.prefix) {\n    throw Error(`Cannot string encode V0 in ${base.name} encoding`)\n  }\n\n  const cid = cache.get(prefix)\n  if (cid == null) {\n    const cid = base.encode(bytes).slice(1)\n    cache.set(prefix, cid)\n    return cid\n  } else {\n    return cid\n  }\n}\n\n/**\n * @template {string} Prefix\n * @param {Uint8Array} bytes\n * @param {Map<string, string>} cache\n * @param {API.MultibaseEncoder<Prefix>} base\n */\nconst toStringV1 = (bytes, cache, base) => {\n  const { prefix } = base\n  const cid = cache.get(prefix)\n  if (cid == null) {\n    const cid = base.encode(bytes)\n    cache.set(prefix, cid)\n    return cid\n  } else {\n    return cid\n  }\n}\n\nconst DAG_PB_CODE = 0x70\nconst SHA_256_CODE = 0x12\n\n/**\n * @param {API.Version} version\n * @param {number} code\n * @param {Uint8Array} multihash\n * @returns {Uint8Array}\n */\nconst encodeCID = (version, code, multihash) => {\n  const codeOffset = varint.encodingLength(version)\n  const hashOffset = codeOffset + varint.encodingLength(code)\n  const bytes = new Uint8Array(hashOffset + multihash.byteLength)\n  varint.encodeTo(version, bytes, 0)\n  varint.encodeTo(code, bytes, codeOffset)\n  bytes.set(multihash, hashOffset)\n  return bytes\n}\n\nconst cidSymbol = Symbol.for('@ipld/js-cid/CID')\n","// @ts-check\n\nimport * as identityBase from './bases/identity.js'\nimport * as base2 from './bases/base2.js'\nimport * as base8 from './bases/base8.js'\nimport * as base10 from './bases/base10.js'\nimport * as base16 from './bases/base16.js'\nimport * as base32 from './bases/base32.js'\nimport * as base36 from './bases/base36.js'\nimport * as base58 from './bases/base58.js'\nimport * as base64 from './bases/base64.js'\nimport * as base256emoji from './bases/base256emoji.js'\nimport * as sha2 from './hashes/sha2.js'\nimport * as identity from './hashes/identity.js'\n\nimport * as raw from './codecs/raw.js'\nimport * as json from './codecs/json.js'\n\nimport { CID, hasher, digest, varint, bytes } from './index.js'\n\nconst bases = { ...identityBase, ...base2, ...base8, ...base10, ...base16, ...base32, ...base36, ...base58, ...base64, ...base256emoji }\nconst hashes = { ...sha2, ...identity }\nconst codecs = { raw, json }\n\nexport { CID, hasher, digest, varint, bytes, hashes, bases, codecs }\n","\n/**\n * To guarantee Uint8Array semantics, convert nodejs Buffers\n * into vanilla Uint8Arrays\n */\nexport function asUint8Array (buf: Uint8Array): Uint8Array {\n  if (globalThis.Buffer != null) {\n    return new Uint8Array(buf.buffer, buf.byteOffset, buf.byteLength)\n  }\n\n  return buf\n}\n","import { asUint8Array } from './util/as-uint8array.js'\n\n/**\n * Returns a `Uint8Array` of the requested size. Referenced memory will\n * be initialized to 0.\n */\nexport function alloc (size: number = 0): Uint8Array {\n  if (globalThis.Buffer?.alloc != null) {\n    return asUint8Array(globalThis.Buffer.alloc(size))\n  }\n\n  return new Uint8Array(size)\n}\n\n/**\n * Where possible returns a Uint8Array of the requested size that references\n * uninitialized memory. Only use if you are certain you will immediately\n * overwrite every value in the returned `Uint8Array`.\n */\nexport function allocUnsafe (size: number = 0): Uint8Array {\n  if (globalThis.Buffer?.allocUnsafe != null) {\n    return asUint8Array(globalThis.Buffer.allocUnsafe(size))\n  }\n\n  return new Uint8Array(size)\n}\n","import type { MultibaseCodec } from 'multiformats'\nimport { bases } from 'multiformats/basics'\nimport { allocUnsafe } from '../alloc.js'\n\nfunction createCodec (name: string, prefix: string, encode: (buf: Uint8Array) => string, decode: (str: string) => Uint8Array): MultibaseCodec<any> {\n  return {\n    name,\n    prefix,\n    encoder: {\n      name,\n      prefix,\n      encode\n    },\n    decoder: {\n      decode\n    }\n  }\n}\n\nconst string = createCodec('utf8', 'u', (buf) => {\n  const decoder = new TextDecoder('utf8')\n  return 'u' + decoder.decode(buf)\n}, (str) => {\n  const encoder = new TextEncoder()\n  return encoder.encode(str.substring(1))\n})\n\nconst ascii = createCodec('ascii', 'a', (buf) => {\n  let string = 'a'\n\n  for (let i = 0; i < buf.length; i++) {\n    string += String.fromCharCode(buf[i])\n  }\n  return string\n}, (str) => {\n  str = str.substring(1)\n  const buf = allocUnsafe(str.length)\n\n  for (let i = 0; i < str.length; i++) {\n    buf[i] = str.charCodeAt(i)\n  }\n\n  return buf\n})\n\nexport type SupportedEncodings = 'utf8' | 'utf-8' | 'hex' | 'latin1' | 'ascii' | 'binary' | keyof typeof bases\n\nconst BASES: Record<SupportedEncodings, MultibaseCodec<any>> = {\n  utf8: string,\n  'utf-8': string,\n  hex: bases.base16,\n  latin1: ascii,\n  ascii: ascii,\n  binary: ascii,\n\n  ...bases\n}\n\nexport default BASES\n","import bases, { SupportedEncodings } from './util/bases.js'\n\nexport type { SupportedEncodings }\n\n/**\n * Turns a `Uint8Array` into a string.\n *\n * Supports `utf8`, `utf-8` and any encoding supported by the multibase module.\n *\n * Also `ascii` which is similar to node's 'binary' encoding.\n */\nexport function toString (array: Uint8Array, encoding: SupportedEncodings = 'utf8'): string {\n  const base = bases[encoding]\n\n  if (base == null) {\n    throw new Error(`Unsupported encoding \"${encoding}\"`)\n  }\n\n  if ((encoding === 'utf8' || encoding === 'utf-8') && globalThis.Buffer != null && globalThis.Buffer.from != null) {\n    return globalThis.Buffer.from(array.buffer, array.byteOffset, array.byteLength).toString('utf8')\n  }\n\n  // strip multibase prefix\n  return base.encoder.encode(array).substring(1)\n}\n","import { isIPv4, isIPv6 } from '@chainsafe/is-ip'\nimport { toString as uint8ArrayToString } from 'uint8arrays/to-string'\n\nexport { isIP } from '@chainsafe/is-ip'\nexport const isV4 = isIPv4\nexport const isV6 = isIPv6\n\n// Copied from https://github.com/indutny/node-ip/blob/master/lib/ip.js#L7\n// but with buf/offset args removed because we don't use them\nexport const toBytes = function (ip: string): Uint8Array {\n  let offset = 0\n  ip = ip.toString().trim()\n\n  if (isV4(ip)) {\n    const bytes = new Uint8Array(offset + 4)\n\n    ip.split(/\\./g).forEach((byte) => {\n      bytes[offset++] = parseInt(byte, 10) & 0xff\n    })\n\n    return bytes\n  }\n\n  if (isV6(ip)) {\n    const sections = ip.split(':', 8)\n\n    let i\n    for (i = 0; i < sections.length; i++) {\n      const isv4 = isV4(sections[i])\n      let v4Buffer: Uint8Array | undefined\n\n      if (isv4) {\n        v4Buffer = toBytes(sections[i])\n        sections[i] = uint8ArrayToString(v4Buffer.slice(0, 2), 'base16')\n      }\n\n      if (v4Buffer != null && ++i < 8) {\n        sections.splice(i, 0, uint8ArrayToString(v4Buffer.slice(2, 4), 'base16'))\n      }\n    }\n\n    if (sections[0] === '') {\n      while (sections.length < 8) sections.unshift('0')\n    } else if (sections[sections.length - 1] === '') {\n      while (sections.length < 8) sections.push('0')\n    } else if (sections.length < 8) {\n      for (i = 0; i < sections.length && sections[i] !== ''; i++);\n      const argv: [number, number, ...string[]] = [i, 1]\n      for (i = 9 - sections.length; i > 0; i--) {\n        argv.push('0')\n      }\n      sections.splice.apply(sections, argv)\n    }\n\n    const bytes = new Uint8Array(offset + 16)\n\n    for (i = 0; i < sections.length; i++) {\n      const word = parseInt(sections[i], 16)\n      bytes[offset++] = (word >> 8) & 0xff\n      bytes[offset++] = word & 0xff\n    }\n\n    return bytes\n  }\n\n  throw new Error('invalid ip address')\n}\n\n// Copied from https://github.com/indutny/node-ip/blob/master/lib/ip.js#L63\nexport const toString = function (buf: Uint8Array, offset: number = 0, length?: number): string {\n  offset = ~~offset\n  length = length ?? (buf.length - offset)\n\n  const view = new DataView(buf.buffer)\n\n  if (length === 4) {\n    const result = []\n\n    // IPv4\n    for (let i = 0; i < length; i++) {\n      result.push(buf[offset + i])\n    }\n\n    return result.join('.')\n  }\n\n  if (length === 16) {\n    const result = []\n\n    // IPv6\n    for (let i = 0; i < length; i += 2) {\n      result.push(view.getUint16(offset + i).toString(16))\n    }\n\n    return result.join(':')\n      .replace(/(^|:)0(:0)*:0(:|$)/, '$1::$3')\n      .replace(/:{3,4}/, '::')\n  }\n\n  return ''\n}\n","import type { Protocol } from './index.js'\n\nconst V = -1\nexport const names: Record<string, Protocol> = {}\nexport const codes: Record<number, Protocol> = {}\n\nexport const table: Array<[number, number, string, boolean?, boolean?]> = [\n  [4, 32, 'ip4'],\n  [6, 16, 'tcp'],\n  [33, 16, 'dccp'],\n  [41, 128, 'ip6'],\n  [42, V, 'ip6zone'],\n  [43, 8, 'ipcidr'],\n  [53, V, 'dns', true],\n  [54, V, 'dns4', true],\n  [55, V, 'dns6', true],\n  [56, V, 'dnsaddr', true],\n  [132, 16, 'sctp'],\n  [273, 16, 'udp'],\n  [275, 0, 'p2p-webrtc-star'],\n  [276, 0, 'p2p-webrtc-direct'],\n  [277, 0, 'p2p-stardust'],\n  [280, 0, 'webrtc'],\n  [281, 0, 'webrtc-w3c'],\n  [290, 0, 'p2p-circuit'],\n  [301, 0, 'udt'],\n  [302, 0, 'utp'],\n  [400, V, 'unix', false, true],\n  // `ipfs` is added before `p2p` for legacy support.\n  // All text representations will default to `p2p`, but `ipfs` will\n  // still be supported\n  [421, V, 'ipfs'],\n  // `p2p` is the preferred name for 421, and is now the default\n  [421, V, 'p2p'],\n  [443, 0, 'https'],\n  [444, 96, 'onion'],\n  [445, 296, 'onion3'],\n  [446, V, 'garlic64'],\n  [448, 0, 'tls'],\n  [460, 0, 'quic'],\n  [461, 0, 'quic-v1'],\n  [465, 0, 'webtransport'],\n  [466, V, 'certhash'],\n  [477, 0, 'ws'],\n  [478, 0, 'wss'],\n  [479, 0, 'p2p-websocket-star'],\n  [480, 0, 'http'],\n  [777, V, 'memory']\n]\n\n// populate tables\ntable.forEach(row => {\n  const proto = createProtocol(...row)\n  codes[proto.code] = proto\n  names[proto.name] = proto\n})\n\nexport function createProtocol (code: number, size: number, name: string, resolvable?: any, path?: any): Protocol {\n  return {\n    code,\n    size,\n    name,\n    resolvable: Boolean(resolvable),\n    path: Boolean(path)\n  }\n}\n\n/**\n * For the passed proto string or number, return a {@link Protocol}\n *\n * @example\n *\n * ```js\n * import { protocol } from '@multiformats/multiaddr'\n *\n * console.info(protocol(4))\n * // { code: 4, size: 32, name: 'ip4', resolvable: false, path: false }\n * ```\n */\nexport function getProtocol (proto: number | string): Protocol {\n  if (typeof proto === 'number') {\n    if (codes[proto] != null) {\n      return codes[proto]\n    }\n\n    throw new Error(`no protocol with code: ${proto}`)\n  } else if (typeof proto === 'string') {\n    if (names[proto] != null) {\n      return names[proto]\n    }\n\n    throw new Error(`no protocol with name: ${proto}`)\n  }\n\n  throw new Error(`invalid protocol id type: ${typeof proto}`)\n}\n","import bases, { SupportedEncodings } from './util/bases.js'\nimport { asUint8Array } from './util/as-uint8array.js'\n\nexport type { SupportedEncodings }\n\n/**\n * Create a `Uint8Array` from the passed string\n *\n * Supports `utf8`, `utf-8`, `hex`, and any encoding supported by the multiformats module.\n *\n * Also `ascii` which is similar to node's 'binary' encoding.\n */\nexport function fromString (string: string, encoding: SupportedEncodings = 'utf8'): Uint8Array {\n  const base = bases[encoding]\n\n  if (base == null) {\n    throw new Error(`Unsupported encoding \"${encoding}\"`)\n  }\n\n  if ((encoding === 'utf8' || encoding === 'utf-8') && globalThis.Buffer != null && globalThis.Buffer.from != null) {\n    return asUint8Array(globalThis.Buffer.from(string, 'utf-8'))\n  }\n\n  // add multibase prefix\n  return base.decoder.decode(`${base.prefix}${string}`) // eslint-disable-line @typescript-eslint/restrict-template-expressions\n}\n","import { allocUnsafe } from './alloc.js'\nimport { asUint8Array } from './util/as-uint8array.js'\n\n/**\n * Returns a new Uint8Array created by concatenating the passed ArrayLikes\n */\nexport function concat (arrays: Array<ArrayLike<number>>, length?: number): Uint8Array {\n  if (length == null) {\n    length = arrays.reduce((acc, curr) => acc + curr.length, 0)\n  }\n\n  const output = allocUnsafe(length)\n  let offset = 0\n\n  for (const arr of arrays) {\n    output.set(arr, offset)\n    offset += arr.length\n  }\n\n  return asUint8Array(output)\n}\n","/**\n * @packageDocumentation\n *\n * Provides methods for converting\n */\n\nimport * as ip from './ip.js'\nimport { getProtocol } from './protocols-table.js'\nimport { CID } from 'multiformats/cid'\nimport { base32 } from 'multiformats/bases/base32'\nimport { base58btc } from 'multiformats/bases/base58'\nimport { bases } from 'multiformats/basics'\nimport * as Digest from 'multiformats/hashes/digest'\nimport varint from 'varint'\nimport { toString as uint8ArrayToString } from 'uint8arrays/to-string'\nimport { fromString as uint8ArrayFromString } from 'uint8arrays/from-string'\nimport { concat as uint8ArrayConcat } from 'uint8arrays/concat'\n\n/**\n * converts (serializes) addresses\n */\nexport function convert (proto: string, a: string): Uint8Array\nexport function convert (proto: string, a: Uint8Array): string\nexport function convert (proto: string, a: string | Uint8Array): Uint8Array | string {\n  if (a instanceof Uint8Array) {\n    return convertToString(proto, a)\n  } else {\n    return convertToBytes(proto, a)\n  }\n}\n\n/**\n * Convert [code,Uint8Array] to string\n */\nexport function convertToString (proto: number | string, buf: Uint8Array): string {\n  const protocol = getProtocol(proto)\n  switch (protocol.code) {\n    case 4: // ipv4\n    case 41: // ipv6\n      return bytes2ip(buf)\n    case 42: // ipv6zone\n      return bytes2str(buf)\n\n    case 6: // tcp\n    case 273: // udp\n    case 33: // dccp\n    case 132: // sctp\n      return bytes2port(buf).toString()\n\n    case 53: // dns\n    case 54: // dns4\n    case 55: // dns6\n    case 56: // dnsaddr\n    case 400: // unix\n    case 777: // memory\n      return bytes2str(buf)\n\n    case 421: // ipfs\n      return bytes2mh(buf)\n    case 444: // onion\n      return bytes2onion(buf)\n    case 445: // onion3\n      return bytes2onion(buf)\n    case 466: // certhash\n      return bytes2mb(buf)\n    default:\n      return uint8ArrayToString(buf, 'base16') // no clue. convert to hex\n  }\n}\n\nexport function convertToBytes (proto: string | number, str: string): Uint8Array {\n  const protocol = getProtocol(proto)\n  switch (protocol.code) {\n    case 4: // ipv4\n      return ip2bytes(str)\n    case 41: // ipv6\n      return ip2bytes(str)\n    case 42: // ipv6zone\n      return str2bytes(str)\n\n    case 6: // tcp\n    case 273: // udp\n    case 33: // dccp\n    case 132: // sctp\n      return port2bytes(parseInt(str, 10))\n\n    case 53: // dns\n    case 54: // dns4\n    case 55: // dns6\n    case 56: // dnsaddr\n    case 400: // unix\n    case 777: // memory\n      return str2bytes(str)\n\n    case 421: // ipfs\n      return mh2bytes(str)\n    case 444: // onion\n      return onion2bytes(str)\n    case 445: // onion3\n      return onion32bytes(str)\n    case 466: // certhash\n      return mb2bytes(str)\n    default:\n      return uint8ArrayFromString(str, 'base16') // no clue. convert from hex\n  }\n}\n\nconst decoders = Object.values(bases).map((c) => c.decoder)\nconst anybaseDecoder = (function () {\n  let acc = decoders[0].or(decoders[1])\n  decoders.slice(2).forEach((d) => (acc = acc.or(d)))\n  return acc\n})()\n\nfunction ip2bytes (ipString: string): Uint8Array {\n  if (!ip.isIP(ipString)) {\n    throw new Error('invalid ip address')\n  }\n  return ip.toBytes(ipString)\n}\n\nfunction bytes2ip (ipBuff: Uint8Array): string {\n  const ipString = ip.toString(ipBuff, 0, ipBuff.length)\n  if (ipString == null) {\n    throw new Error('ipBuff is required')\n  }\n  if (!ip.isIP(ipString)) {\n    throw new Error('invalid ip address')\n  }\n  return ipString\n}\n\nfunction port2bytes (port: number): Uint8Array {\n  const buf = new ArrayBuffer(2)\n  const view = new DataView(buf)\n  view.setUint16(0, port)\n\n  return new Uint8Array(buf)\n}\n\nfunction bytes2port (buf: Uint8Array): number {\n  const view = new DataView(buf.buffer)\n  return view.getUint16(buf.byteOffset)\n}\n\nfunction str2bytes (str: string): Uint8Array {\n  const buf = uint8ArrayFromString(str)\n  const size = Uint8Array.from(varint.encode(buf.length))\n  return uint8ArrayConcat([size, buf], size.length + buf.length)\n}\n\nfunction bytes2str (buf: Uint8Array): string {\n  const size = varint.decode(buf)\n  buf = buf.slice(varint.decode.bytes)\n\n  if (buf.length !== size) {\n    throw new Error('inconsistent lengths')\n  }\n\n  return uint8ArrayToString(buf)\n}\n\nfunction mh2bytes (hash: string): Uint8Array {\n  let mh\n\n  if (hash[0] === 'Q' || hash[0] === '1') {\n    mh = Digest.decode(base58btc.decode(`z${hash}`)).bytes\n  } else {\n    mh = CID.parse(hash).multihash.bytes\n  }\n\n  // the address is a varint prefixed multihash string representation\n  const size = Uint8Array.from(varint.encode(mh.length))\n  return uint8ArrayConcat([size, mh], size.length + mh.length)\n}\n\nfunction mb2bytes (mbstr: string): Uint8Array {\n  const mb = anybaseDecoder.decode(mbstr)\n  const size = Uint8Array.from(varint.encode(mb.length))\n  return uint8ArrayConcat([size, mb], size.length + mb.length)\n}\nfunction bytes2mb (buf: Uint8Array): string {\n  const size = varint.decode(buf)\n  const hash = buf.slice(varint.decode.bytes)\n\n  if (hash.length !== size) {\n    throw new Error('inconsistent lengths')\n  }\n\n  return 'u' + uint8ArrayToString(hash, 'base64url')\n}\n\n/**\n * Converts bytes to bas58btc string\n */\nfunction bytes2mh (buf: Uint8Array): string {\n  const size = varint.decode(buf)\n  const address = buf.slice(varint.decode.bytes)\n\n  if (address.length !== size) {\n    throw new Error('inconsistent lengths')\n  }\n\n  return uint8ArrayToString(address, 'base58btc')\n}\n\nfunction onion2bytes (str: string): Uint8Array {\n  const addr = str.split(':')\n  if (addr.length !== 2) {\n    throw new Error(`failed to parse onion addr: [\"'${addr.join('\", \"')}'\"]' does not contain a port number`)\n  }\n  if (addr[0].length !== 16) {\n    throw new Error(`failed to parse onion addr: ${addr[0]} not a Tor onion address.`)\n  }\n\n  // onion addresses do not include the multibase prefix, add it before decoding\n  const buf = base32.decode('b' + addr[0])\n\n  // onion port number\n  const port = parseInt(addr[1], 10)\n  if (port < 1 || port > 65536) {\n    throw new Error('Port number is not in range(1, 65536)')\n  }\n  const portBuf = port2bytes(port)\n  return uint8ArrayConcat([buf, portBuf], buf.length + portBuf.length)\n}\n\nfunction onion32bytes (str: string): Uint8Array {\n  const addr = str.split(':')\n  if (addr.length !== 2) {\n    throw new Error(`failed to parse onion addr: [\"'${addr.join('\", \"')}'\"]' does not contain a port number`)\n  }\n  if (addr[0].length !== 56) {\n    throw new Error(`failed to parse onion addr: ${addr[0]} not a Tor onion3 address.`)\n  }\n  // onion addresses do not include the multibase prefix, add it before decoding\n  const buf = base32.decode(`b${addr[0]}`)\n\n  // onion port number\n  const port = parseInt(addr[1], 10)\n  if (port < 1 || port > 65536) {\n    throw new Error('Port number is not in range(1, 65536)')\n  }\n  const portBuf = port2bytes(port)\n  return uint8ArrayConcat([buf, portBuf], buf.length + portBuf.length)\n}\n\nfunction bytes2onion (buf: Uint8Array): string {\n  const addrBytes = buf.slice(0, buf.length - 2)\n  const portBytes = buf.slice(buf.length - 2)\n  const addr = uint8ArrayToString(addrBytes, 'base32')\n  const port = bytes2port(portBytes)\n  return `${addr}:${port}`\n}\n","import { convertToBytes, convertToString } from './convert.js'\nimport { getProtocol } from './protocols-table.js'\nimport varint from 'varint'\nimport { concat as uint8ArrayConcat } from 'uint8arrays/concat'\nimport { toString as uint8ArrayToString } from 'uint8arrays/to-string'\nimport type { StringTuple, Tuple, Protocol } from './index.js'\n\n/**\n * string -> [[str name, str addr]... ]\n */\nexport function stringToStringTuples (str: string): string[][] {\n  const tuples = []\n  const parts = str.split('/').slice(1) // skip first empty elem\n  if (parts.length === 1 && parts[0] === '') {\n    return []\n  }\n\n  for (let p = 0; p < parts.length; p++) {\n    const part = parts[p]\n    const proto = getProtocol(part)\n\n    if (proto.size === 0) {\n      tuples.push([part])\n      // eslint-disable-next-line no-continue\n      continue\n    }\n\n    p++ // advance addr part\n    if (p >= parts.length) {\n      throw ParseError('invalid address: ' + str)\n    }\n\n    // if it's a path proto, take the rest\n    if (proto.path === true) {\n      tuples.push([\n        part,\n        // should we need to check each path part to see if it's a proto?\n        // This would allow for other protocols to be added after a unix path,\n        // however it would have issues if the path had a protocol name in the path\n        cleanPath(parts.slice(p).join('/'))\n      ])\n      break\n    }\n\n    tuples.push([part, parts[p]])\n  }\n\n  return tuples\n}\n\n/**\n * [[str name, str addr]... ] -> string\n */\nexport function stringTuplesToString (tuples: StringTuple[]): string {\n  const parts: string[] = []\n  tuples.map((tup) => {\n    const proto = protoFromTuple(tup)\n    parts.push(proto.name)\n    if (tup.length > 1 && tup[1] != null) {\n      parts.push(tup[1])\n    }\n    return null\n  })\n\n  return cleanPath(parts.join('/'))\n}\n\n/**\n * [[str name, str addr]... ] -> [[int code, Uint8Array]... ]\n */\nexport function stringTuplesToTuples (tuples: Array<string[] | string>): Tuple[] {\n  return tuples.map((tup) => {\n    if (!Array.isArray(tup)) {\n      tup = [tup]\n    }\n    const proto = protoFromTuple(tup)\n    if (tup.length > 1) {\n      return [proto.code, convertToBytes(proto.code, tup[1])]\n    }\n    return [proto.code]\n  })\n}\n\n/**\n * Convert tuples to string tuples\n *\n * [[int code, Uint8Array]... ] -> [[int code, str addr]... ]\n */\nexport function tuplesToStringTuples (tuples: Tuple[]): StringTuple[] {\n  return tuples.map(tup => {\n    const proto = protoFromTuple(tup)\n    if (tup[1] != null) {\n      return [proto.code, convertToString(proto.code, tup[1])]\n    }\n    return [proto.code]\n  })\n}\n\n/**\n * [[int code, Uint8Array ]... ] -> Uint8Array\n */\nexport function tuplesToBytes (tuples: Tuple[]): Uint8Array {\n  return fromBytes(uint8ArrayConcat(tuples.map((tup) => {\n    const proto = protoFromTuple(tup)\n    let buf = Uint8Array.from(varint.encode(proto.code))\n\n    if (tup.length > 1 && tup[1] != null) {\n      buf = uint8ArrayConcat([buf, tup[1]]) // add address buffer\n    }\n\n    return buf\n  })))\n}\n\n/**\n * For the passed address, return the serialized size\n */\nexport function sizeForAddr (p: Protocol, addr: Uint8Array | number[]): number {\n  if (p.size > 0) {\n    return p.size / 8\n  } else if (p.size === 0) {\n    return 0\n  } else {\n    const size = varint.decode(addr)\n    return size + (varint.decode.bytes ?? 0)\n  }\n}\n\nexport function bytesToTuples (buf: Uint8Array): Tuple[] {\n  const tuples: Array<[number, Uint8Array?]> = []\n  let i = 0\n  while (i < buf.length) {\n    const code = varint.decode(buf, i)\n    const n = varint.decode.bytes ?? 0\n\n    const p = getProtocol(code)\n\n    const size = sizeForAddr(p, buf.slice(i + n))\n\n    if (size === 0) {\n      tuples.push([code])\n      i += n\n      // eslint-disable-next-line no-continue\n      continue\n    }\n\n    const addr = buf.slice(i + n, i + n + size)\n\n    i += (size + n)\n\n    if (i > buf.length) { // did not end _exactly_ at buffer.length\n      throw ParseError('Invalid address Uint8Array: ' + uint8ArrayToString(buf, 'base16'))\n    }\n\n    // ok, tuple seems good.\n    tuples.push([code, addr])\n  }\n\n  return tuples\n}\n\n/**\n * Uint8Array -> String\n */\nexport function bytesToString (buf: Uint8Array): string {\n  const a = bytesToTuples(buf)\n  const b = tuplesToStringTuples(a)\n  return stringTuplesToString(b)\n}\n\n/**\n * String -> Uint8Array\n */\nexport function stringToBytes (str: string): Uint8Array {\n  str = cleanPath(str)\n  const a = stringToStringTuples(str)\n  const b = stringTuplesToTuples(a)\n\n  return tuplesToBytes(b)\n}\n\n/**\n * String -> Uint8Array\n */\nexport function fromString (str: string): Uint8Array {\n  return stringToBytes(str)\n}\n\n/**\n * Uint8Array -> Uint8Array\n */\nexport function fromBytes (buf: Uint8Array): Uint8Array {\n  const err = validateBytes(buf)\n  if (err != null) {\n    throw err\n  }\n  return Uint8Array.from(buf) // copy\n}\n\nexport function validateBytes (buf: Uint8Array): Error | undefined {\n  try {\n    bytesToTuples(buf) // try to parse. will throw if breaks\n  } catch (err: any) {\n    return err\n  }\n}\n\nexport function isValidBytes (buf: Uint8Array): boolean {\n  return validateBytes(buf) === undefined\n}\n\nexport function cleanPath (str: string): string {\n  return '/' + str.trim().split('/').filter((a) => a).join('/')\n}\n\nexport function ParseError (str: string): Error {\n  return new Error('Error parsing address: ' + str)\n}\n\nexport function protoFromTuple (tup: any[]): Protocol {\n  const proto = getProtocol(tup[0])\n  return proto\n}\n","/**\n * @packageDocumentation\n *\n * An implementation of a Multiaddr in JavaScript\n *\n * @example\n *\n * ```js\n * import { multiaddr } from '@multiformats/multiaddr'\n *\n * const ma = multiaddr('/ip4/127.0.0.1/tcp/1234')\n * ```\n */\n\nimport * as codec from './codec.js'\nimport { getProtocol, names } from './protocols-table.js'\nimport varint from 'varint'\nimport { CID } from 'multiformats/cid'\nimport { base58btc } from 'multiformats/bases/base58'\nimport errCode from 'err-code'\nimport { toString as uint8ArrayToString } from 'uint8arrays/to-string'\nimport { equals as uint8ArrayEquals } from 'uint8arrays/equals'\n\nconst inspect = Symbol.for('nodejs.util.inspect.custom')\n\nconst DNS_CODES = [\n  getProtocol('dns').code,\n  getProtocol('dns4').code,\n  getProtocol('dns6').code,\n  getProtocol('dnsaddr').code\n]\n\n/**\n * Protocols are present in the protocol table\n */\nexport interface Protocol {\n  code: number\n  size: number\n  name: string\n  resolvable?: boolean | undefined\n  path?: boolean | undefined\n}\n\n/**\n * A plain JavaScript object representation of a {@link Multiaddr}\n */\nexport interface MultiaddrObject {\n  family: 4 | 6\n  host: string\n  transport: string\n  port: number\n}\n\n/**\n * A NodeAddress is an IPv4/IPv6 address/TCP port combination\n */\nexport interface NodeAddress {\n  family: 4 | 6\n  address: string\n  port: number\n}\n\n/**\n * These types can be parsed into a {@link Multiaddr} object\n */\nexport type MultiaddrInput = string | Multiaddr | Uint8Array | null\n\n/**\n * A Resolver is a function that takes a {@link Multiaddr} and resolves it into one\n * or more string representations of that {@link Multiaddr}.\n */\nexport interface Resolver { (addr: Multiaddr, options?: AbortOptions): Promise<string[]> }\n\n/**\n * A code/value pair\n */\nexport type Tuple = [number, Uint8Array?]\n\n/**\n * A code/value pair with the value as a string\n */\nexport type StringTuple = [number, string?]\n\n/**\n * Allows aborting long-lived operations\n */\nexport interface AbortOptions {\n  signal?: AbortSignal\n}\n\n/**\n * All configured {@link Resolver}s\n */\nexport const resolvers = new Map<string, Resolver>()\nconst symbol = Symbol.for('@multiformats/js-multiaddr/multiaddr')\n\nexport interface Multiaddr {\n  bytes: Uint8Array\n\n  /**\n   * Returns Multiaddr as a String\n   *\n   * @example\n   * ```js\n   * import { multiaddr } from '@multiformats/multiaddr'\n   *\n   * multiaddr('/ip4/127.0.0.1/tcp/4001').toString()\n   * // '/ip4/127.0.0.1/tcp/4001'\n   * ```\n   */\n  toString: () => string\n\n  /**\n   * Returns Multiaddr as a JSON encoded object\n   *\n   * @example\n   * ```js\n   * import { multiaddr } from '@multiformats/multiaddr'\n   *\n   * JSON.stringify(multiaddr('/ip4/127.0.0.1/tcp/4001'))\n   * // '/ip4/127.0.0.1/tcp/4001'\n   * ```\n   */\n  toJSON: () => string\n\n  /**\n   * Returns Multiaddr as a convinient options object to be used with net.createConnection\n   *\n   * @example\n   * ```js\n   * import { multiaddr } from '@multiformats/multiaddr'\n   *\n   * multiaddr('/ip4/127.0.0.1/tcp/4001').toOptions()\n   * // { family: 4, host: '127.0.0.1', transport: 'tcp', port: 4001 }\n   * ```\n   */\n  toOptions: () => MultiaddrObject\n\n  /**\n   * Returns the protocols the Multiaddr is defined with, as an array of objects, in\n   * left-to-right order. Each object contains the protocol code, protocol name,\n   * and the size of its address space in bits.\n   * [See list of protocols](https://github.com/multiformats/multiaddr/blob/master/protocols.csv)\n   *\n   * @example\n   * ```js\n   * import { multiaddr } from '@multiformats/multiaddr'\n   *\n   * multiaddr('/ip4/127.0.0.1/tcp/4001').protos()\n   * // [ { code: 4, size: 32, name: 'ip4' },\n   * //   { code: 6, size: 16, name: 'tcp' } ]\n   * ```\n   */\n  protos: () => Protocol[]\n\n  /**\n   * Returns the codes of the protocols in left-to-right order.\n   * [See list of protocols](https://github.com/multiformats/multiaddr/blob/master/protocols.csv)\n   *\n   * @example\n   * ```js\n   * import { multiaddr } from '@multiformats/multiaddr'\n   *\n   * multiaddr('/ip4/127.0.0.1/tcp/4001').protoCodes()\n   * // [ 4, 6 ]\n   * ```\n   */\n  protoCodes: () => number[]\n\n  /**\n   * Returns the names of the protocols in left-to-right order.\n   * [See list of protocols](https://github.com/multiformats/multiaddr/blob/master/protocols.csv)\n   *\n   * @example\n   * ```js\n   * import { multiaddr } from '@multiformats/multiaddr'\n   *\n   * multiaddr('/ip4/127.0.0.1/tcp/4001').protoNames()\n   * // [ 'ip4', 'tcp' ]\n   * ```\n   */\n  protoNames: () => string[]\n\n  /**\n   * Returns a tuple of parts\n   *\n   * @example\n   * ```js\n   * import { multiaddr } from '@multiformats/multiaddr'\n   *\n   * multiaddr('/ip4/127.0.0.1/tcp/4001').tuples()\n   * // [ [ 4, <Buffer 7f 00 00 01> ], [ 6, <Buffer 0f a1> ] ]\n   * ```\n   */\n  tuples: () => Tuple[]\n\n  /**\n   * Returns a tuple of string/number parts\n   * - tuples[][0] = code of protocol\n   * - tuples[][1] = contents of address\n   *\n   * @example\n   * ```js\n   * import { multiaddr } from '@multiformats/multiaddr'\n   *\n   * multiaddr('/ip4/127.0.0.1/tcp/4001').stringTuples()\n   * // [ [ 4, '127.0.0.1' ], [ 6, '4001' ] ]\n   * ```\n   */\n  stringTuples: () => StringTuple[]\n\n  /**\n   * Encapsulates a Multiaddr in another Multiaddr\n   *\n   * @example\n   * ```js\n   * import { multiaddr } from '@multiformats/multiaddr'\n   *\n   * const mh1 = multiaddr('/ip4/8.8.8.8/tcp/1080')\n   * // Multiaddr(/ip4/8.8.8.8/tcp/1080)\n   *\n   * const mh2 = multiaddr('/ip4/127.0.0.1/tcp/4001')\n   * // Multiaddr(/ip4/127.0.0.1/tcp/4001)\n   *\n   * const mh3 = mh1.encapsulate(mh2)\n   * // Multiaddr(/ip4/8.8.8.8/tcp/1080/ip4/127.0.0.1/tcp/4001)\n   *\n   * mh3.toString()\n   * // '/ip4/8.8.8.8/tcp/1080/ip4/127.0.0.1/tcp/4001'\n   * ```\n   *\n   * @param {MultiaddrInput} addr - Multiaddr to add into this Multiaddr\n   */\n  encapsulate: (addr: MultiaddrInput) => Multiaddr\n\n  /**\n   * Decapsulates a Multiaddr from another Multiaddr\n   *\n   * @example\n   * ```js\n   * import { multiaddr } from '@multiformats/multiaddr'\n   *\n   * const mh1 = multiaddr('/ip4/8.8.8.8/tcp/1080')\n   * // Multiaddr(/ip4/8.8.8.8/tcp/1080)\n   *\n   * const mh2 = multiaddr('/ip4/127.0.0.1/tcp/4001')\n   * // Multiaddr(/ip4/127.0.0.1/tcp/4001)\n   *\n   * const mh3 = mh1.encapsulate(mh2)\n   * // Multiaddr(/ip4/8.8.8.8/tcp/1080/ip4/127.0.0.1/tcp/4001)\n   *\n   * mh3.decapsulate(mh2).toString()\n   * // '/ip4/8.8.8.8/tcp/1080'\n   * ```\n   *\n   * @param {Multiaddr | string} addr - Multiaddr to remove from this Multiaddr\n   */\n  decapsulate: (addr: Multiaddr | string) => Multiaddr\n\n  /**\n   * A more reliable version of `decapsulate` if you are targeting a\n   * specific code, such as 421 (the `p2p` protocol code). The last index of the code\n   * will be removed from the `Multiaddr`, and a new instance will be returned.\n   * If the code is not present, the original `Multiaddr` is returned.\n   *\n   * @example\n   * ```js\n   * import { multiaddr } from '@multiformats/multiaddr'\n   *\n   * const addr = multiaddr('/ip4/0.0.0.0/tcp/8080/p2p/QmcgpsyWgH8Y8ajJz1Cu72KnS5uo2Aa2LpzU7kinSupNKC')\n   * // Multiaddr(/ip4/0.0.0.0/tcp/8080/p2p/QmcgpsyWgH8Y8ajJz1Cu72KnS5uo2Aa2LpzU7kinSupNKC)\n   *\n   * addr.decapsulateCode(421).toString()\n   * // '/ip4/0.0.0.0/tcp/8080'\n   *\n   * multiaddr('/ip4/127.0.0.1/tcp/8080').decapsulateCode(421).toString()\n   * // '/ip4/127.0.0.1/tcp/8080'\n   * ```\n   */\n  decapsulateCode: (code: number) => Multiaddr\n\n  /**\n   * Extract the peerId if the multiaddr contains one\n   *\n   * @example\n   * ```js\n   * import { multiaddr } from '@multiformats/multiaddr'\n   *\n   * const mh1 = multiaddr('/ip4/8.8.8.8/tcp/1080/ipfs/QmValidBase58string')\n   * // Multiaddr(/ip4/8.8.8.8/tcp/1080/ipfs/QmValidBase58string)\n   *\n   * // should return QmValidBase58string or null if the id is missing or invalid\n   * const peerId = mh1.getPeerId()\n   * ```\n   */\n  getPeerId: () => string | null\n\n  /**\n   * Extract the path if the multiaddr contains one\n   *\n   * @example\n   * ```js\n   * import { multiaddr } from '@multiformats/multiaddr'\n   *\n   * const mh1 = multiaddr('/ip4/8.8.8.8/tcp/1080/unix/tmp/p2p.sock')\n   * // Multiaddr(/ip4/8.8.8.8/tcp/1080/unix/tmp/p2p.sock)\n   *\n   * // should return utf8 string or null if the id is missing or invalid\n   * const path = mh1.getPath()\n   * ```\n   */\n  getPath: () => string | null\n\n  /**\n   * Checks if two Multiaddrs are the same\n   *\n   * @example\n   * ```js\n   * import { multiaddr } from '@multiformats/multiaddr'\n   *\n   * const mh1 = multiaddr('/ip4/8.8.8.8/tcp/1080')\n   * // Multiaddr(/ip4/8.8.8.8/tcp/1080)\n   *\n   * const mh2 = multiaddr('/ip4/127.0.0.1/tcp/4001')\n   * // Multiaddr(/ip4/127.0.0.1/tcp/4001)\n   *\n   * mh1.equals(mh1)\n   * // true\n   *\n   * mh1.equals(mh2)\n   * // false\n   * ```\n   */\n  equals: (addr: { bytes: Uint8Array }) => boolean\n\n  /**\n   * Resolve multiaddr if containing resolvable hostname.\n   *\n   * @example\n   * ```js\n   * import { multiaddr, resolvers } from '@multiformats/multiaddr'\n   *\n   * resolvers.set('dnsaddr', resolverFunction)\n   * const mh1 = multiaddr('/dnsaddr/bootstrap.libp2p.io/p2p/QmbLHAnMoJPWSCR5Zhtx6BHJX9KiKNN6tpvbUcqanj75Nb')\n   * const resolvedMultiaddrs = await mh1.resolve()\n   * // [\n   * //   Multiaddr(/ip4/147.75.83.83/tcp/4001/p2p/QmbLHAnMoJPWSCR5Zhtx6BHJX9KiKNN6tpvbUcqanj75Nb),\n   * //   Multiaddr(/ip4/147.75.83.83/tcp/443/wss/p2p/QmbLHAnMoJPWSCR5Zhtx6BHJX9KiKNN6tpvbUcqanj75Nb),\n   * //   Multiaddr(/ip4/147.75.83.83/udp/4001/quic/p2p/QmbLHAnMoJPWSCR5Zhtx6BHJX9KiKNN6tpvbUcqanj75Nb)\n   * // ]\n   * ```\n   */\n  resolve: (options?: AbortOptions) => Promise<Multiaddr[]>\n\n  /**\n   * Gets a Multiaddrs node-friendly address object. Note that protocol information\n   * is left out: in Node (and most network systems) the protocol is unknowable\n   * given only the address.\n   *\n   * Has to be a ThinWaist Address, otherwise throws error\n   *\n   * @example\n   * ```js\n   * import { multiaddr } from '@multiformats/multiaddr'\n   *\n   * multiaddr('/ip4/127.0.0.1/tcp/4001').nodeAddress()\n   * // {family: 4, address: '127.0.0.1', port: 4001}\n   * ```\n   */\n  nodeAddress: () => NodeAddress\n\n  /**\n   * Returns if a Multiaddr is a Thin Waist address or not.\n   *\n   * Thin Waist is if a Multiaddr adheres to the standard combination of:\n   *\n   * `{IPv4, IPv6}/{TCP, UDP}`\n   *\n   * @example\n   * ```js\n   * import { multiaddr } from '@multiformats/multiaddr'\n   *\n   * const mh1 = multiaddr('/ip4/127.0.0.1/tcp/4001')\n   * // Multiaddr(/ip4/127.0.0.1/tcp/4001)\n   * const mh2 = multiaddr('/ip4/192.168.2.1/tcp/5001')\n   * // Multiaddr(/ip4/192.168.2.1/tcp/5001)\n   * const mh3 = mh1.encapsulate(mh2)\n   * // Multiaddr(/ip4/127.0.0.1/tcp/4001/ip4/192.168.2.1/tcp/5001)\n   * const mh4 = multiaddr('/ip4/127.0.0.1/tcp/2000/wss/p2p-webrtc-star/p2p/QmcgpsyWgH8Y8ajJz1Cu72KnS5uo2Aa2LpzU7kinSooo2a')\n   * // Multiaddr(/ip4/127.0.0.1/tcp/2000/wss/p2p-webrtc-star/p2p/QmcgpsyWgH8Y8ajJz1Cu72KnS5uo2Aa2LpzU7kinSooo2a)\n   * mh1.isThinWaistAddress()\n   * // true\n   * mh2.isThinWaistAddress()\n   * // true\n   * mh3.isThinWaistAddress()\n   * // false\n   * mh4.isThinWaistAddress()\n   * // false\n   * ```\n   */\n  isThinWaistAddress: (addr?: Multiaddr) => boolean\n}\n\n/**\n * Creates a Multiaddr from a node-friendly address object\n *\n * @example\n * ```js\n * import { fromNodeAddress } from '@multiformats/multiaddr'\n *\n * fromNodeAddress({address: '127.0.0.1', port: '4001'}, 'tcp')\n * // Multiaddr(/ip4/127.0.0.1/tcp/4001)\n * ```\n */\nexport function fromNodeAddress (addr: NodeAddress, transport: string): Multiaddr {\n  if (addr == null) {\n    throw new Error('requires node address object')\n  }\n  if (transport == null) {\n    throw new Error('requires transport protocol')\n  }\n  let ip: string | undefined\n  let host = addr.address\n  switch (addr.family) {\n    case 4:\n      ip = 'ip4'\n      break\n    case 6:\n      ip = 'ip6'\n\n      if (host.includes('%')) {\n        const parts = host.split('%')\n\n        if (parts.length !== 2) {\n          throw Error('Multiple ip6 zones in multiaddr')\n        }\n\n        host = parts[0]\n        const zone = parts[1]\n        ip = `/ip6zone/${zone}/ip6`\n      }\n      break\n    default:\n      throw Error('Invalid addr family, should be 4 or 6.')\n  }\n  return new DefaultMultiaddr('/' + [ip, host, transport, addr.port].join('/'))\n}\n\n/**\n * Returns if something is a {@link Multiaddr} that is a resolvable name\n *\n * @example\n *\n * ```js\n * import { isName, multiaddr } from '@multiformats/multiaddr'\n *\n * isName(multiaddr('/ip4/127.0.0.1'))\n * // false\n * isName(multiaddr('/dns/ipfs.io'))\n * // true\n * ```\n */\nexport function isName (addr: Multiaddr): boolean {\n  if (!isMultiaddr(addr)) {\n    return false\n  }\n\n  // if a part of the multiaddr is resolvable, then return true\n  return addr.protos().some((proto) => proto.resolvable)\n}\n\n/**\n * Check if object is a {@link Multiaddr} instance\n *\n * @example\n *\n * ```js\n * import { isMultiaddr, multiaddr } from '@multiformats/multiaddr'\n *\n * isMultiaddr(5)\n * // false\n * isMultiaddr(multiaddr('/ip4/127.0.0.1'))\n * // true\n * ```\n */\nexport function isMultiaddr (value: any): value is Multiaddr {\n  return Boolean(value?.[symbol])\n}\n\n/**\n * Creates a {@link Multiaddr} from a {@link MultiaddrInput}\n */\nclass DefaultMultiaddr implements Multiaddr {\n  public bytes: Uint8Array\n  #string?: string\n  #tuples?: Tuple[]\n  #stringTuples?: StringTuple[]\n\n  [symbol]: boolean = true\n\n  constructor (addr?: MultiaddrInput) {\n    // default\n    if (addr == null) {\n      addr = ''\n    }\n\n    if (addr instanceof Uint8Array) {\n      this.bytes = codec.fromBytes(addr)\n    } else if (typeof addr === 'string') {\n      if (addr.length > 0 && addr.charAt(0) !== '/') {\n        throw new Error(`multiaddr \"${addr}\" must start with a \"/\"`)\n      }\n      this.bytes = codec.fromString(addr)\n    } else if (isMultiaddr(addr)) { // Multiaddr\n      this.bytes = codec.fromBytes(addr.bytes) // validate + copy buffer\n    } else {\n      throw new Error('addr must be a string, Buffer, or another Multiaddr')\n    }\n  }\n\n  toString (): string {\n    if (this.#string == null) {\n      this.#string = codec.bytesToString(this.bytes)\n    }\n\n    return this.#string\n  }\n\n  toJSON (): string {\n    return this.toString()\n  }\n\n  toOptions (): MultiaddrObject {\n    let family: 4 | 6 | undefined\n    let transport: string | undefined\n    let host: string | undefined\n    let port: number | undefined\n    let zone = ''\n\n    const tcp = getProtocol('tcp')\n    const udp = getProtocol('udp')\n    const ip4 = getProtocol('ip4')\n    const ip6 = getProtocol('ip6')\n    const dns6 = getProtocol('dns6')\n    const ip6zone = getProtocol('ip6zone')\n\n    for (const [code, value] of this.stringTuples()) {\n      if (code === ip6zone.code) {\n        zone = `%${value ?? ''}`\n      }\n\n      // default to https when protocol & port are omitted from DNS addrs\n      if (DNS_CODES.includes(code)) {\n        transport = tcp.name\n        port = 443\n        host = `${value ?? ''}${zone}`\n        family = code === dns6.code ? 6 : 4\n      }\n\n      if (code === tcp.code || code === udp.code) {\n        transport = getProtocol(code).name\n        port = parseInt(value ?? '')\n      }\n\n      if (code === ip4.code || code === ip6.code) {\n        transport = getProtocol(code).name\n        host = `${value ?? ''}${zone}`\n        family = code === ip6.code ? 6 : 4\n      }\n    }\n\n    if (family == null || transport == null || host == null || port == null) {\n      throw new Error('multiaddr must have a valid format: \"/{ip4, ip6, dns4, dns6, dnsaddr}/{address}/{tcp, udp}/{port}\".')\n    }\n\n    const opts: MultiaddrObject = {\n      family,\n      host,\n      transport,\n      port\n    }\n\n    return opts\n  }\n\n  protos (): Protocol[] {\n    return this.protoCodes().map(code => Object.assign({}, getProtocol(code)))\n  }\n\n  protoCodes (): number[] {\n    const codes: number[] = []\n    const buf = this.bytes\n    let i = 0\n    while (i < buf.length) {\n      const code = varint.decode(buf, i)\n      const n = varint.decode.bytes ?? 0\n\n      const p = getProtocol(code)\n      const size = codec.sizeForAddr(p, buf.slice(i + n))\n\n      i += (size + n)\n      codes.push(code)\n    }\n\n    return codes\n  }\n\n  protoNames (): string[] {\n    return this.protos().map(proto => proto.name)\n  }\n\n  tuples (): Array<[number, Uint8Array?]> {\n    if (this.#tuples == null) {\n      this.#tuples = codec.bytesToTuples(this.bytes)\n    }\n\n    return this.#tuples\n  }\n\n  stringTuples (): Array<[number, string?]> {\n    if (this.#stringTuples == null) {\n      this.#stringTuples = codec.tuplesToStringTuples(this.tuples())\n    }\n\n    return this.#stringTuples\n  }\n\n  encapsulate (addr: MultiaddrInput): Multiaddr {\n    addr = new DefaultMultiaddr(addr)\n    return new DefaultMultiaddr(this.toString() + addr.toString())\n  }\n\n  decapsulate (addr: Multiaddr | string): Multiaddr {\n    const addrString = addr.toString()\n    const s = this.toString()\n    const i = s.lastIndexOf(addrString)\n    if (i < 0) {\n      throw new Error(`Address ${this.toString()} does not contain subaddress: ${addr.toString()}`)\n    }\n    return new DefaultMultiaddr(s.slice(0, i))\n  }\n\n  decapsulateCode (code: number): Multiaddr {\n    const tuples = this.tuples()\n    for (let i = tuples.length - 1; i >= 0; i--) {\n      if (tuples[i][0] === code) {\n        return new DefaultMultiaddr(codec.tuplesToBytes(tuples.slice(0, i)))\n      }\n    }\n    return this\n  }\n\n  getPeerId (): string | null {\n    try {\n      const tuples = this.stringTuples().filter((tuple) => {\n        if (tuple[0] === names.ipfs.code) {\n          return true\n        }\n        return false\n      })\n\n      // Get the last ipfs tuple ['ipfs', 'peerid string']\n      const tuple = tuples.pop()\n      if (tuple?.[1] != null) {\n        const peerIdStr = tuple[1]\n\n        // peer id is base58btc encoded string but not multibase encoded so add the `z`\n        // prefix so we can validate that it is correctly encoded\n        if (peerIdStr[0] === 'Q' || peerIdStr[0] === '1') {\n          return uint8ArrayToString(base58btc.decode(`z${peerIdStr}`), 'base58btc')\n        }\n\n        // try to parse peer id as CID\n        return uint8ArrayToString(CID.parse(peerIdStr).multihash.bytes, 'base58btc')\n      }\n\n      return null\n    } catch (e) {\n      return null\n    }\n  }\n\n  getPath (): string | null {\n    let path = null\n    try {\n      path = this.stringTuples().filter((tuple) => {\n        const proto = getProtocol(tuple[0])\n        if (proto.path === true) {\n          return true\n        }\n        return false\n      })[0][1]\n\n      if (path == null) {\n        path = null\n      }\n    } catch {\n      path = null\n    }\n    return path\n  }\n\n  equals (addr: { bytes: Uint8Array }): boolean {\n    return uint8ArrayEquals(this.bytes, addr.bytes)\n  }\n\n  async resolve (options?: AbortOptions): Promise<Multiaddr[]> {\n    const resolvableProto = this.protos().find((p) => p.resolvable)\n\n    // Multiaddr is not resolvable?\n    if (resolvableProto == null) {\n      return [this]\n    }\n\n    const resolver = resolvers.get(resolvableProto.name)\n    if (resolver == null) {\n      throw errCode(new Error(`no available resolver for ${resolvableProto.name}`), 'ERR_NO_AVAILABLE_RESOLVER')\n    }\n\n    const addresses = await resolver(this, options)\n    return addresses.map((a) => new DefaultMultiaddr(a))\n  }\n\n  nodeAddress (): NodeAddress {\n    const options = this.toOptions()\n\n    if (options.transport !== 'tcp' && options.transport !== 'udp') {\n      throw new Error(`multiaddr must have a valid format - no protocol with name: \"${options.transport}\". Must have a valid transport protocol: \"{tcp, udp}\"`)\n    }\n\n    return {\n      family: options.family,\n      address: options.host,\n      port: options.port\n    }\n  }\n\n  isThinWaistAddress (addr?: Multiaddr): boolean {\n    const protos = (addr ?? this).protos()\n\n    if (protos.length !== 2) {\n      return false\n    }\n\n    if (protos[0].code !== 4 && protos[0].code !== 41) {\n      return false\n    }\n    if (protos[1].code !== 6 && protos[1].code !== 273) {\n      return false\n    }\n    return true\n  }\n\n  /**\n   * Returns Multiaddr as a human-readable string\n   * https://nodejs.org/api/util.html#utilinspectcustom\n   *\n   * @example\n   * ```js\n   * import { multiaddr } from '@multiformats/multiaddr'\n   *\n   * console.info(multiaddr('/ip4/127.0.0.1/tcp/4001'))\n   * // 'Multiaddr(/ip4/127.0.0.1/tcp/4001)'\n   * ```\n   */\n  [inspect] (): string {\n    return `Multiaddr(${codec.bytesToString(this.bytes)})`\n  }\n}\n\n/**\n * A function that takes a {@link MultiaddrInput} and returns a {@link Multiaddr}\n *\n * @example\n * ```js\n * import { multiaddr } from '@libp2p/multiaddr'\n *\n * multiaddr('/ip4/127.0.0.1/tcp/4001')\n * // Multiaddr(/ip4/127.0.0.1/tcp/4001)\n * ```\n *\n * @param {MultiaddrInput} [addr] - If String or Uint8Array, needs to adhere to the address format of a [multiaddr](https://github.com/multiformats/multiaddr#string-format)\n */\nexport function multiaddr (addr?: MultiaddrInput): Multiaddr {\n  return new DefaultMultiaddr(addr)\n}\n\nexport { getProtocol as protocols }\n","/**\n * Returns true if the two passed Uint8Arrays have the same content\n */\nexport function equals (a: Uint8Array, b: Uint8Array): boolean {\n  if (a === b) {\n    return true\n  }\n\n  if (a.byteLength !== b.byteLength) {\n    return false\n  }\n\n  for (let i = 0; i < a.byteLength; i++) {\n    if (a[i] !== b[i]) {\n      return false\n    }\n  }\n\n  return true\n}\n","import type { Multiaddr } from '@multiformats/multiaddr'\nimport { multiaddr } from '@multiformats/multiaddr'\n\nexport interface MultiaddrToUriOpts {\n  assumeHttp?: boolean\n}\n\ninterface Reducer { (str: string, content: string, i: number, parts: Part[], opts?: MultiaddrToUriOpts): string }\n\nconst reduceValue: Reducer = (_, v) => v\nconst tcpUri = (str: string, port: string, parts: Part[], opts?: MultiaddrToUriOpts) => {\n  // return tcp when explicitly requested\n  if ((opts != null) && opts.assumeHttp === false) return `tcp://${str}:${port}`\n  // check if tcp is the last protocol in multiaddr\n  let protocol = 'tcp'\n  let explicitPort = `:${port}`\n  const last = parts[parts.length - 1]\n  if (last.protocol === 'tcp') {\n    // assume http and produce clean urls\n    protocol = port === '443' ? 'https' : 'http'\n    explicitPort = port === '443' || port === '80' ? '' : explicitPort\n  }\n  return `${protocol}://${str}${explicitPort}`\n}\n\nconst Reducers: Record<string, Reducer> = {\n  ip4: reduceValue,\n  ip6: (str, content, i, parts) => (\n    parts.length === 1 && parts[0].protocol === 'ip6'\n      ? content\n      : `[${content}]`\n  ),\n  tcp: (str, content, i, parts, opts) => (\n    parts.some(p => ['http', 'https', 'ws', 'wss'].includes(p.protocol))\n      ? `${str}:${content}`\n      : tcpUri(str, content, parts, opts)\n  ),\n  udp: (str, content) => `udp://${str}:${content}`,\n  dnsaddr: reduceValue,\n  dns4: reduceValue,\n  dns6: reduceValue,\n  ipfs: (str, content) => `${str}/ipfs/${content}`,\n  p2p: (str, content) => `${str}/p2p/${content}`,\n  http: str => `http://${str}`,\n  https: str => `https://${str}`,\n  ws: str => `ws://${str}`,\n  wss: str => `wss://${str}`,\n  'p2p-websocket-star': str => `${str}/p2p-websocket-star`,\n  'p2p-webrtc-star': str => `${str}/p2p-webrtc-star`,\n  'p2p-webrtc-direct': str => `${str}/p2p-webrtc-direct`\n}\n\ninterface Part {\n  protocol: string\n  content: string\n}\n\nexport function multiaddrToUri (input: Multiaddr | string | Uint8Array, opts?: MultiaddrToUriOpts) {\n  const ma = multiaddr(input)\n  const parts = ma.toString().split('/').slice(1)\n  return ma\n    .tuples()\n    .map(tuple => ({\n      protocol: parts.shift() ?? '',\n      content: (tuple[1] != null) ? parts.shift() ?? '' : ''\n    }))\n    .reduce((str: string, part: Part, i: number, parts: Part[]) => {\n      const reduce = Reducers[part.protocol]\n      if (reduce == null) {\n        throw new Error(`Unsupported protocol ${part.protocol}`)\n      }\n      return reduce(str, part.content, i, parts, opts)\n    }, '')\n}\n","import { Multiaddr } from '@multiformats/multiaddr'\nimport { multiaddrToUri } from '@multiformats/multiaddr-to-uri'\n\n/**\n * @param {string|Multiaddr|URL} url - A string, multiaddr or URL to convert to a url string\n * @returns {string}\n */\nexport function toUrlString (url) {\n  try {\n    // @ts-expect-error\n    url = multiaddrToUri(new Multiaddr(url))\n  } catch (/** @type {any} */ err) { }\n\n  url = url.toString()\n\n  return url\n}\n","\nexport default () => {}\n","\n/* eslint-env browser */\n\nimport { Multiaddr } from '@multiformats/multiaddr'\nimport { isBrowser, isWebWorker, isNode } from 'ipfs-utils/src/env.js'\nimport parseDuration from 'parse-duration'\nimport { logger } from '@libp2p/logger'\nimport HTTP from 'ipfs-utils/src/http.js'\nimport mergeOpts from 'merge-options'\nimport { toUrlString } from 'ipfs-core-utils/to-url-string'\nimport getAgent from 'ipfs-core-utils/agent'\n\nconst log = logger('ipfs-http-client:lib:error-handler')\nconst merge = mergeOpts.bind({ ignoreUndefined: true })\n\nconst DEFAULT_PROTOCOL = isBrowser || isWebWorker ? location.protocol : 'http'\nconst DEFAULT_HOST = isBrowser || isWebWorker ? location.hostname : 'localhost'\nconst DEFAULT_PORT = isBrowser || isWebWorker ? location.port : '5001'\n\n/**\n * @typedef {import('ipfs-utils/src/types').HTTPOptions} HTTPOptions\n * @typedef {import('../types').Options} Options\n */\n\n/**\n * @param {Options|URL|Multiaddr|string} [options]\n * @returns {Options}\n */\nconst normalizeOptions = (options = {}) => {\n  let url\n  /** @type {Options} */\n  let opts = {}\n  let agent\n\n  if (typeof options === 'string' || Multiaddr.isMultiaddr(options)) {\n    url = new URL(toUrlString(options))\n  } else if (options instanceof URL) {\n    url = options\n  } else if (typeof options.url === 'string' || Multiaddr.isMultiaddr(options.url)) {\n    url = new URL(toUrlString(options.url))\n    opts = options\n  } else if (options.url instanceof URL) {\n    url = options.url\n    opts = options\n  } else {\n    opts = options || {}\n\n    const protocol = (opts.protocol || DEFAULT_PROTOCOL).replace(':', '')\n    const host = (opts.host || DEFAULT_HOST).split(':')[0]\n    const port = (opts.port || DEFAULT_PORT)\n\n    url = new URL(`${protocol}://${host}:${port}`)\n  }\n\n  if (opts.apiPath) {\n    url.pathname = opts.apiPath\n  } else if (url.pathname === '/' || url.pathname === undefined) {\n    url.pathname = 'api/v0'\n  }\n\n  if (isNode) {\n    const Agent = getAgent(url)\n\n    agent = opts.agent || new Agent({\n      keepAlive: true,\n      // Similar to browsers which limit connections to six per host\n      maxSockets: 6\n    })\n  }\n\n  return {\n    ...opts,\n    host: url.host,\n    protocol: url.protocol.replace(':', ''),\n    port: Number(url.port),\n    apiPath: url.pathname,\n    url,\n    agent\n  }\n}\n\n/**\n * @param {Response} response\n */\nexport const errorHandler = async (response) => {\n  let msg\n\n  try {\n    if ((response.headers.get('Content-Type') || '').startsWith('application/json')) {\n      const data = await response.json()\n      log(data)\n      msg = data.Message || data.message\n    } else {\n      msg = await response.text()\n    }\n  } catch (/** @type {any} */ err) {\n    log('Failed to parse error response', err)\n    // Failed to extract/parse error message from response\n    msg = err.message\n  }\n\n  /** @type {Error} */\n  let error = new HTTP.HTTPError(response)\n\n  if (msg) {\n    // This is what rs-ipfs returns where there's a timeout\n    if (msg.includes('deadline has elapsed')) {\n      error = new HTTP.TimeoutError()\n    }\n\n    // This is what go-ipfs returns where there's a timeout\n    if (msg && msg.includes('context deadline exceeded')) {\n      error = new HTTP.TimeoutError()\n    }\n  }\n\n  // This also gets returned\n  if (msg && msg.includes('request timed out')) {\n    error = new HTTP.TimeoutError()\n  }\n\n  // If we managed to extract a message from the response, use it\n  if (msg) {\n    error.message = msg\n  }\n\n  throw error\n}\n\nconst KEBAB_REGEX = /[A-Z\\u00C0-\\u00D6\\u00D8-\\u00DE]/g\n\n/**\n * @param {string} str\n */\nconst kebabCase = (str) => {\n  return str.replace(KEBAB_REGEX, function (match) {\n    return '-' + match.toLowerCase()\n  })\n}\n\n/**\n * @param {string | number} value\n */\nconst parseTimeout = (value) => {\n  return typeof value === 'string' ? parseDuration(value) : value\n}\n\nexport class Client extends HTTP {\n  /**\n   * @param {Options|URL|Multiaddr|string} [options]\n   */\n  constructor (options = {}) {\n    const opts = normalizeOptions(options)\n\n    super({\n      timeout: parseTimeout(opts.timeout || 0) || undefined,\n      headers: opts.headers,\n      base: `${opts.url}`,\n      handleError: errorHandler,\n      transformSearchParams: (search) => {\n        const out = new URLSearchParams()\n\n        for (const [key, value] of search) {\n          if (\n            value !== 'undefined' &&\n            value !== 'null' &&\n            key !== 'signal'\n          ) {\n            out.append(kebabCase(key), value)\n          }\n\n          // @ts-expect-error server timeouts are strings\n          if (key === 'timeout' && !isNaN(value)) {\n            out.append(kebabCase(key), value)\n          }\n        }\n\n        return out\n      },\n      // @ts-expect-error this can be a https agent or a http agent\n      agent: opts.agent\n    })\n\n    // @ts-expect-error - cannot delete no-optional fields\n    delete this.get\n    // @ts-expect-error - cannot delete no-optional fields\n    delete this.put\n    // @ts-expect-error - cannot delete no-optional fields\n    delete this.delete\n    // @ts-expect-error - cannot delete no-optional fields\n    delete this.options\n\n    const fetch = this.fetch\n\n    /**\n     * @param {string | Request} resource\n     * @param {HTTPOptions} options\n     */\n    this.fetch = (resource, options = {}) => {\n      if (typeof resource === 'string' && !resource.startsWith('/')) {\n        resource = `${opts.url}/${resource}`\n      }\n\n      return fetch.call(this, resource, merge(options, {\n        method: 'POST'\n      }))\n    }\n  }\n}\n\nexport const HTTPError = HTTP.HTTPError\n","\n/* eslint-env browser */\n\nimport { Client } from './core.js'\n\n// Set default configuration and call create function with them\n/**\n * @typedef { import(\"../types\").Options } Options\n */\n\n/**\n * @template T\n * @typedef {(client: Client, clientOptions: Options) => T} Fn\n */\n\n/**\n * @template T\n * @typedef {(clientOptions: Options) => T} Factory\n */\n\n/**\n * @template T\n * @param {Fn<T>} fn\n * @returns {Factory<T>}\n */\nexport const configure = (fn) => {\n  return (options) => {\n    return fn(new Client(options), options)\n  }\n}\n","\n/**\n * @param {number | string | undefined} mode\n */\nexport function modeToString (mode) {\n  if (mode == null) {\n    return undefined\n  }\n\n  if (typeof mode === 'string') {\n    return mode\n  }\n\n  return mode.toString(8).padStart(4, '0')\n}\n","import errCode from 'err-code'\n\n/**\n * @param {any} input\n */\nexport function parseMtime (input) {\n  if (input == null) {\n    return undefined\n  }\n\n  /** @type {{ secs: number, nsecs?: number } | undefined} */\n  let mtime\n\n  // { secs, nsecs }\n  if (input.secs != null) {\n    mtime = {\n      secs: input.secs,\n      nsecs: input.nsecs\n    }\n  }\n\n  // UnixFS TimeSpec\n  if (input.Seconds != null) {\n    mtime = {\n      secs: input.Seconds,\n      nsecs: input.FractionalNanoseconds\n    }\n  }\n\n  // process.hrtime()\n  if (Array.isArray(input)) {\n    mtime = {\n      secs: input[0],\n      nsecs: input[1]\n    }\n  }\n\n  // Javascript Date\n  if (input instanceof Date) {\n    const ms = input.getTime()\n    const secs = Math.floor(ms / 1000)\n\n    mtime = {\n      secs: secs,\n      nsecs: (ms - (secs * 1000)) * 1000\n    }\n  }\n\n  /*\n  TODO: https://github.com/ipfs/aegir/issues/487\n\n  // process.hrtime.bigint()\n  if (input instanceof BigInt) {\n    const secs = input / BigInt(1e9)\n    const nsecs = input - (secs * BigInt(1e9))\n\n    mtime = {\n      secs: parseInt(secs.toString()),\n      nsecs: parseInt(nsecs.toString())\n    }\n  }\n  */\n\n  if (!Object.prototype.hasOwnProperty.call(mtime, 'secs')) {\n    return undefined\n  }\n\n  if (mtime != null && mtime.nsecs != null && (mtime.nsecs < 0 || mtime.nsecs > 999999999)) {\n    throw errCode(new Error('mtime-nsecs must be within the range [0,999999999]'), 'ERR_INVALID_MTIME_NSECS')\n  }\n\n  return mtime\n}\n","import { modeToString } from './mode-to-string.js'\nimport { parseMtime } from '../lib/parse-mtime.js'\n\n/**\n * @param {*} params\n * @returns {URLSearchParams}\n */\nexport function toUrlSearchParams ({ arg, searchParams, hashAlg, mtime, mode, ...options } = {}) {\n  if (searchParams) {\n    options = {\n      ...options,\n      ...searchParams\n    }\n  }\n\n  if (hashAlg) {\n    options.hash = hashAlg\n  }\n\n  if (mtime != null) {\n    mtime = parseMtime(mtime)\n\n    options.mtime = mtime.secs\n    options.mtimeNsecs = mtime.nsecs\n  }\n\n  if (mode != null) {\n    options.mode = modeToString(mode)\n  }\n\n  if (options.timeout && !isNaN(options.timeout)) {\n    // server API expects timeouts as strings\n    options.timeout = `${options.timeout}ms`\n  }\n\n  if (arg === undefined || arg === null) {\n    arg = []\n  } else if (!Array.isArray(arg)) {\n    arg = [arg]\n  }\n\n  const urlSearchParams = new URLSearchParams(options)\n\n  arg.forEach((/** @type {any} */ arg) => urlSearchParams.append('arg', arg))\n\n  return urlSearchParams\n}\n","import { CID } from 'multiformats/cid'\nimport { configure } from '../lib/configure.js'\nimport { toUrlSearchParams } from '../lib/to-url-search-params.js'\n\n/**\n * @typedef {import('../types').HTTPClientExtraOptions} HTTPClientExtraOptions\n * @typedef {import('ipfs-core-types/src/bitswap').API<HTTPClientExtraOptions>} BitswapAPI\n */\n\nexport const createWantlist = configure(api => {\n  /**\n   * @type {BitswapAPI[\"wantlist\"]}\n   */\n  async function wantlist (options = {}) {\n    const res = await (await api.post('bitswap/wantlist', {\n      signal: options.signal,\n      searchParams: toUrlSearchParams(options),\n      headers: options.headers\n    })).json()\n\n    return (res.Keys || []).map((/** @type {{ '/': string }} */ k) => CID.parse(k['/']))\n  }\n  return wantlist\n})\n","import { CID } from 'multiformats/cid'\nimport { configure } from '../lib/configure.js'\nimport { toUrlSearchParams } from '../lib/to-url-search-params.js'\n\n/**\n * @typedef {import('../types').HTTPClientExtraOptions} HTTPClientExtraOptions\n * @typedef {import('ipfs-core-types/src/bitswap').API<HTTPClientExtraOptions>} BitswapAPI\n */\n\nexport const createWantlistForPeer = configure(api => {\n  /**\n   * @type {BitswapAPI[\"wantlistForPeer\"]}\n   */\n  async function wantlistForPeer (peerId, options = {}) {\n    const res = await (await api.post('bitswap/wantlist', {\n      signal: options.signal,\n      searchParams: toUrlSearchParams({\n        ...options,\n        peer: peerId.toString()\n      }),\n      headers: options.headers\n    })).json()\n\n    return (res.Keys || []).map((/** @type {{ '/': string }} */ k) => CID.parse(k['/']))\n  }\n  return wantlistForPeer\n})\n","var encode_1 = encode;\n\nvar MSB = 0x80\n  , REST = 0x7F\n  , MSBALL = ~REST\n  , INT = Math.pow(2, 31);\n\nfunction encode(num, out, offset) {\n  out = out || [];\n  offset = offset || 0;\n  var oldOffset = offset;\n\n  while(num >= INT) {\n    out[offset++] = (num & 0xFF) | MSB;\n    num /= 128;\n  }\n  while(num & MSBALL) {\n    out[offset++] = (num & 0xFF) | MSB;\n    num >>>= 7;\n  }\n  out[offset] = num | 0;\n  \n  encode.bytes = offset - oldOffset + 1;\n  \n  return out\n}\n\nvar decode = read;\n\nvar MSB$1 = 0x80\n  , REST$1 = 0x7F;\n\nfunction read(buf, offset) {\n  var res    = 0\n    , offset = offset || 0\n    , shift  = 0\n    , counter = offset\n    , b\n    , l = buf.length;\n\n  do {\n    if (counter >= l) {\n      read.bytes = 0;\n      throw new RangeError('Could not decode varint')\n    }\n    b = buf[counter++];\n    res += shift < 28\n      ? (b & REST$1) << shift\n      : (b & REST$1) * Math.pow(2, shift);\n    shift += 7;\n  } while (b >= MSB$1)\n\n  read.bytes = counter - offset;\n\n  return res\n}\n\nvar N1 = Math.pow(2,  7);\nvar N2 = Math.pow(2, 14);\nvar N3 = Math.pow(2, 21);\nvar N4 = Math.pow(2, 28);\nvar N5 = Math.pow(2, 35);\nvar N6 = Math.pow(2, 42);\nvar N7 = Math.pow(2, 49);\nvar N8 = Math.pow(2, 56);\nvar N9 = Math.pow(2, 63);\n\nvar length = function (value) {\n  return (\n    value < N1 ? 1\n  : value < N2 ? 2\n  : value < N3 ? 3\n  : value < N4 ? 4\n  : value < N5 ? 5\n  : value < N6 ? 6\n  : value < N7 ? 7\n  : value < N8 ? 8\n  : value < N9 ? 9\n  :              10\n  )\n};\n\nvar varint = {\n    encode: encode_1\n  , decode: decode\n  , encodingLength: length\n};\n\nvar _brrp_varint = varint;\n\nexport default _brrp_varint;\n","import varint from '../vendor/varint.js'\n\n/**\n * @param {Uint8Array} data\n * @param {number} [offset=0]\n * @returns {[number, number]}\n */\nexport const decode = (data, offset = 0) => {\n  const code = varint.decode(data, offset)\n  return [code, varint.decode.bytes]\n}\n\n/**\n * @param {number} int\n * @param {Uint8Array} target\n * @param {number} [offset=0]\n */\nexport const encodeTo = (int, target, offset = 0) => {\n  varint.encode(int, target, offset)\n  return target\n}\n\n/**\n * @param {number} int\n * @returns {number}\n */\nexport const encodingLength = (int) => {\n  return varint.encodingLength(int)\n}\n","const empty = new Uint8Array(0)\n\n/**\n * @param {Uint8Array} d\n */\nconst toHex = d => d.reduce((hex, byte) => hex + byte.toString(16).padStart(2, '0'), '')\n\n/**\n * @param {string} hex\n */\nconst fromHex = hex => {\n  const hexes = hex.match(/../g)\n  return hexes ? new Uint8Array(hexes.map(b => parseInt(b, 16))) : empty\n}\n\n/**\n * @param {Uint8Array} aa\n * @param {Uint8Array} bb\n */\nconst equals = (aa, bb) => {\n  if (aa === bb) return true\n  if (aa.byteLength !== bb.byteLength) {\n    return false\n  }\n\n  for (let ii = 0; ii < aa.byteLength; ii++) {\n    if (aa[ii] !== bb[ii]) {\n      return false\n    }\n  }\n\n  return true\n}\n\n/**\n * @param {ArrayBufferView|ArrayBuffer|Uint8Array} o\n * @returns {Uint8Array}\n */\nconst coerce = o => {\n  if (o instanceof Uint8Array && o.constructor.name === 'Uint8Array') return o\n  if (o instanceof ArrayBuffer) return new Uint8Array(o)\n  if (ArrayBuffer.isView(o)) {\n    return new Uint8Array(o.buffer, o.byteOffset, o.byteLength)\n  }\n  throw new Error('Unknown type, must be binary type')\n}\n\n/**\n * @param {any} o\n * @returns {o is ArrayBuffer|ArrayBufferView}\n */\nconst isBinary = o =>\n  o instanceof ArrayBuffer || ArrayBuffer.isView(o)\n\n/**\n * @param {string} str\n * @returns {Uint8Array}\n */\nconst fromString = str => (new TextEncoder()).encode(str)\n\n/**\n * @param {Uint8Array} b\n * @returns {string}\n */\nconst toString = b => (new TextDecoder()).decode(b)\n\nexport { equals, coerce, isBinary, fromHex, toHex, fromString, toString, empty }\n","import { coerce, equals as equalBytes } from '../bytes.js'\nimport * as varint from '../varint.js'\n\n/**\n * Creates a multihash digest.\n *\n * @template {number} Code\n * @param {Code} code\n * @param {Uint8Array} digest\n */\nexport const create = (code, digest) => {\n  const size = digest.byteLength\n  const sizeOffset = varint.encodingLength(code)\n  const digestOffset = sizeOffset + varint.encodingLength(size)\n\n  const bytes = new Uint8Array(digestOffset + size)\n  varint.encodeTo(code, bytes, 0)\n  varint.encodeTo(size, bytes, sizeOffset)\n  bytes.set(digest, digestOffset)\n\n  return new Digest(code, size, digest, bytes)\n}\n\n/**\n * Turns bytes representation of multihash digest into an instance.\n *\n * @param {Uint8Array} multihash\n * @returns {MultihashDigest}\n */\nexport const decode = (multihash) => {\n  const bytes = coerce(multihash)\n  const [code, sizeOffset] = varint.decode(bytes)\n  const [size, digestOffset] = varint.decode(bytes.subarray(sizeOffset))\n  const digest = bytes.subarray(sizeOffset + digestOffset)\n\n  if (digest.byteLength !== size) {\n    throw new Error('Incorrect length')\n  }\n\n  return new Digest(code, size, digest, bytes)\n}\n\n/**\n * @param {MultihashDigest} a\n * @param {unknown} b\n * @returns {b is MultihashDigest}\n */\nexport const equals = (a, b) => {\n  if (a === b) {\n    return true\n  } else {\n    const data = /** @type {{code?:unknown, size?:unknown, bytes?:unknown}} */(b)\n\n    return (\n      a.code === data.code &&\n      a.size === data.size &&\n      data.bytes instanceof Uint8Array &&\n      equalBytes(a.bytes, data.bytes)\n    )\n  }\n}\n\n/**\n * @typedef {import('./interface.js').MultihashDigest} MultihashDigest\n */\n\n/**\n * Represents a multihash digest which carries information about the\n * hashing alogrithm and an actual hash digest.\n *\n * @template {number} Code\n * @template {number} Size\n * @class\n * @implements {MultihashDigest}\n */\nexport class Digest {\n  /**\n   * Creates a multihash digest.\n   *\n   * @param {Code} code\n   * @param {Size} size\n   * @param {Uint8Array} digest\n   * @param {Uint8Array} bytes\n   */\n  constructor (code, size, digest, bytes) {\n    this.code = code\n    this.size = size\n    this.digest = digest\n    this.bytes = bytes\n  }\n}\n","// base-x encoding / decoding\n// Copyright (c) 2018 base-x contributors\n// Copyright (c) 2014-2018 The Bitcoin Core developers (base58.cpp)\n// Distributed under the MIT software license, see the accompanying\n// file LICENSE or http://www.opensource.org/licenses/mit-license.php.\nfunction base (ALPHABET, name) {\n  if (ALPHABET.length >= 255) { throw new TypeError('Alphabet too long') }\n  var BASE_MAP = new Uint8Array(256);\n  for (var j = 0; j < BASE_MAP.length; j++) {\n    BASE_MAP[j] = 255;\n  }\n  for (var i = 0; i < ALPHABET.length; i++) {\n    var x = ALPHABET.charAt(i);\n    var xc = x.charCodeAt(0);\n    if (BASE_MAP[xc] !== 255) { throw new TypeError(x + ' is ambiguous') }\n    BASE_MAP[xc] = i;\n  }\n  var BASE = ALPHABET.length;\n  var LEADER = ALPHABET.charAt(0);\n  var FACTOR = Math.log(BASE) / Math.log(256); // log(BASE) / log(256), rounded up\n  var iFACTOR = Math.log(256) / Math.log(BASE); // log(256) / log(BASE), rounded up\n  function encode (source) {\n    if (source instanceof Uint8Array) ; else if (ArrayBuffer.isView(source)) {\n      source = new Uint8Array(source.buffer, source.byteOffset, source.byteLength);\n    } else if (Array.isArray(source)) {\n      source = Uint8Array.from(source);\n    }\n    if (!(source instanceof Uint8Array)) { throw new TypeError('Expected Uint8Array') }\n    if (source.length === 0) { return '' }\n        // Skip & count leading zeroes.\n    var zeroes = 0;\n    var length = 0;\n    var pbegin = 0;\n    var pend = source.length;\n    while (pbegin !== pend && source[pbegin] === 0) {\n      pbegin++;\n      zeroes++;\n    }\n        // Allocate enough space in big-endian base58 representation.\n    var size = ((pend - pbegin) * iFACTOR + 1) >>> 0;\n    var b58 = new Uint8Array(size);\n        // Process the bytes.\n    while (pbegin !== pend) {\n      var carry = source[pbegin];\n            // Apply \"b58 = b58 * 256 + ch\".\n      var i = 0;\n      for (var it1 = size - 1; (carry !== 0 || i < length) && (it1 !== -1); it1--, i++) {\n        carry += (256 * b58[it1]) >>> 0;\n        b58[it1] = (carry % BASE) >>> 0;\n        carry = (carry / BASE) >>> 0;\n      }\n      if (carry !== 0) { throw new Error('Non-zero carry') }\n      length = i;\n      pbegin++;\n    }\n        // Skip leading zeroes in base58 result.\n    var it2 = size - length;\n    while (it2 !== size && b58[it2] === 0) {\n      it2++;\n    }\n        // Translate the result into a string.\n    var str = LEADER.repeat(zeroes);\n    for (; it2 < size; ++it2) { str += ALPHABET.charAt(b58[it2]); }\n    return str\n  }\n  function decodeUnsafe (source) {\n    if (typeof source !== 'string') { throw new TypeError('Expected String') }\n    if (source.length === 0) { return new Uint8Array() }\n    var psz = 0;\n        // Skip leading spaces.\n    if (source[psz] === ' ') { return }\n        // Skip and count leading '1's.\n    var zeroes = 0;\n    var length = 0;\n    while (source[psz] === LEADER) {\n      zeroes++;\n      psz++;\n    }\n        // Allocate enough space in big-endian base256 representation.\n    var size = (((source.length - psz) * FACTOR) + 1) >>> 0; // log(58) / log(256), rounded up.\n    var b256 = new Uint8Array(size);\n        // Process the characters.\n    while (source[psz]) {\n            // Decode character\n      var carry = BASE_MAP[source.charCodeAt(psz)];\n            // Invalid character\n      if (carry === 255) { return }\n      var i = 0;\n      for (var it3 = size - 1; (carry !== 0 || i < length) && (it3 !== -1); it3--, i++) {\n        carry += (BASE * b256[it3]) >>> 0;\n        b256[it3] = (carry % 256) >>> 0;\n        carry = (carry / 256) >>> 0;\n      }\n      if (carry !== 0) { throw new Error('Non-zero carry') }\n      length = i;\n      psz++;\n    }\n        // Skip trailing spaces.\n    if (source[psz] === ' ') { return }\n        // Skip leading zeroes in b256.\n    var it4 = size - length;\n    while (it4 !== size && b256[it4] === 0) {\n      it4++;\n    }\n    var vch = new Uint8Array(zeroes + (size - it4));\n    var j = zeroes;\n    while (it4 !== size) {\n      vch[j++] = b256[it4++];\n    }\n    return vch\n  }\n  function decode (string) {\n    var buffer = decodeUnsafe(string);\n    if (buffer) { return buffer }\n    throw new Error(`Non-${name} character`)\n  }\n  return {\n    encode: encode,\n    decodeUnsafe: decodeUnsafe,\n    decode: decode\n  }\n}\nvar src = base;\n\nvar _brrp__multiformats_scope_baseX = src;\n\nexport default _brrp__multiformats_scope_baseX;\n","import basex from '../../vendor/base-x.js'\nimport { coerce } from '../bytes.js'\n// Linter can't see that API is used in types.\n// eslint-disable-next-line\nimport * as API from './interface.js'\n\n/**\n * Class represents both BaseEncoder and MultibaseEncoder meaning it\n * can be used to encode to multibase or base encode without multibase\n * prefix.\n *\n * @class\n * @template {string} Base\n * @template {string} Prefix\n * @implements {API.MultibaseEncoder<Prefix>}\n * @implements {API.BaseEncoder}\n */\nclass Encoder {\n  /**\n   * @param {Base} name\n   * @param {Prefix} prefix\n   * @param {(bytes:Uint8Array) => string} baseEncode\n   */\n  constructor (name, prefix, baseEncode) {\n    this.name = name\n    this.prefix = prefix\n    this.baseEncode = baseEncode\n  }\n\n  /**\n   * @param {Uint8Array} bytes\n   * @returns {API.Multibase<Prefix>}\n   */\n  encode (bytes) {\n    if (bytes instanceof Uint8Array) {\n      return `${this.prefix}${this.baseEncode(bytes)}`\n    } else {\n      throw Error('Unknown type, must be binary type')\n    }\n  }\n}\n\n/**\n * @template {string} Prefix\n */\n/**\n * Class represents both BaseDecoder and MultibaseDecoder so it could be used\n * to decode multibases (with matching prefix) or just base decode strings\n * with corresponding base encoding.\n *\n * @class\n * @template {string} Base\n * @template {string} Prefix\n * @implements {API.MultibaseDecoder<Prefix>}\n * @implements {API.UnibaseDecoder<Prefix>}\n * @implements {API.BaseDecoder}\n */\nclass Decoder {\n  /**\n   * @param {Base} name\n   * @param {Prefix} prefix\n   * @param {(text:string) => Uint8Array} baseDecode\n   */\n  constructor (name, prefix, baseDecode) {\n    this.name = name\n    this.prefix = prefix\n    /* c8 ignore next 3 */\n    if (prefix.codePointAt(0) === undefined) {\n      throw new Error('Invalid prefix character')\n    }\n    /** @private */\n    this.prefixCodePoint = /** @type {number} */ (prefix.codePointAt(0))\n    this.baseDecode = baseDecode\n  }\n\n  /**\n   * @param {string} text\n   */\n  decode (text) {\n    if (typeof text === 'string') {\n      if (text.codePointAt(0) !== this.prefixCodePoint) {\n        throw Error(`Unable to decode multibase string ${JSON.stringify(text)}, ${this.name} decoder only supports inputs prefixed with ${this.prefix}`)\n      }\n      return this.baseDecode(text.slice(this.prefix.length))\n    } else {\n      throw Error('Can only multibase decode strings')\n    }\n  }\n\n  /**\n   * @template {string} OtherPrefix\n   * @param {API.UnibaseDecoder<OtherPrefix>|ComposedDecoder<OtherPrefix>} decoder\n   * @returns {ComposedDecoder<Prefix|OtherPrefix>}\n   */\n  or (decoder) {\n    return or(this, decoder)\n  }\n}\n\n/**\n * @template {string} Prefix\n * @typedef {Record<Prefix, API.UnibaseDecoder<Prefix>>} Decoders\n */\n\n/**\n * @template {string} Prefix\n * @implements {API.MultibaseDecoder<Prefix>}\n * @implements {API.CombobaseDecoder<Prefix>}\n */\nclass ComposedDecoder {\n  /**\n   * @param {Decoders<Prefix>} decoders\n   */\n  constructor (decoders) {\n    this.decoders = decoders\n  }\n\n  /**\n   * @template {string} OtherPrefix\n   * @param {API.UnibaseDecoder<OtherPrefix>|ComposedDecoder<OtherPrefix>} decoder\n   * @returns {ComposedDecoder<Prefix|OtherPrefix>}\n   */\n  or (decoder) {\n    return or(this, decoder)\n  }\n\n  /**\n   * @param {string} input\n   * @returns {Uint8Array}\n   */\n  decode (input) {\n    const prefix = /** @type {Prefix} */ (input[0])\n    const decoder = this.decoders[prefix]\n    if (decoder) {\n      return decoder.decode(input)\n    } else {\n      throw RangeError(`Unable to decode multibase string ${JSON.stringify(input)}, only inputs prefixed with ${Object.keys(this.decoders)} are supported`)\n    }\n  }\n}\n\n/**\n * @template {string} L\n * @template {string} R\n * @param {API.UnibaseDecoder<L>|API.CombobaseDecoder<L>} left\n * @param {API.UnibaseDecoder<R>|API.CombobaseDecoder<R>} right\n * @returns {ComposedDecoder<L|R>}\n */\nexport const or = (left, right) => new ComposedDecoder(/** @type {Decoders<L|R>} */({\n  ...(left.decoders || { [/** @type API.UnibaseDecoder<L> */(left).prefix]: left }),\n  ...(right.decoders || { [/** @type API.UnibaseDecoder<R> */(right).prefix]: right })\n}))\n\n/**\n * @class\n * @template {string} Base\n * @template {string} Prefix\n * @implements {API.MultibaseCodec<Prefix>}\n * @implements {API.MultibaseEncoder<Prefix>}\n * @implements {API.MultibaseDecoder<Prefix>}\n * @implements {API.BaseCodec}\n * @implements {API.BaseEncoder}\n * @implements {API.BaseDecoder}\n */\nexport class Codec {\n  /**\n   * @param {Base} name\n   * @param {Prefix} prefix\n   * @param {(bytes:Uint8Array) => string} baseEncode\n   * @param {(text:string) => Uint8Array} baseDecode\n   */\n  constructor (name, prefix, baseEncode, baseDecode) {\n    this.name = name\n    this.prefix = prefix\n    this.baseEncode = baseEncode\n    this.baseDecode = baseDecode\n    this.encoder = new Encoder(name, prefix, baseEncode)\n    this.decoder = new Decoder(name, prefix, baseDecode)\n  }\n\n  /**\n   * @param {Uint8Array} input\n   */\n  encode (input) {\n    return this.encoder.encode(input)\n  }\n\n  /**\n   * @param {string} input\n   */\n  decode (input) {\n    return this.decoder.decode(input)\n  }\n}\n\n/**\n * @template {string} Base\n * @template {string} Prefix\n * @param {object} options\n * @param {Base} options.name\n * @param {Prefix} options.prefix\n * @param {(bytes:Uint8Array) => string} options.encode\n * @param {(input:string) => Uint8Array} options.decode\n * @returns {Codec<Base, Prefix>}\n */\nexport const from = ({ name, prefix, encode, decode }) =>\n  new Codec(name, prefix, encode, decode)\n\n/**\n * @template {string} Base\n * @template {string} Prefix\n * @param {object} options\n * @param {Base} options.name\n * @param {Prefix} options.prefix\n * @param {string} options.alphabet\n * @returns {Codec<Base, Prefix>}\n */\nexport const baseX = ({ prefix, name, alphabet }) => {\n  const { encode, decode } = basex(alphabet, name)\n  return from({\n    prefix,\n    name,\n    encode,\n    /**\n     * @param {string} text\n     */\n    decode: text => coerce(decode(text))\n  })\n}\n\n/**\n * @param {string} string\n * @param {string} alphabet\n * @param {number} bitsPerChar\n * @param {string} name\n * @returns {Uint8Array}\n */\nconst decode = (string, alphabet, bitsPerChar, name) => {\n  // Build the character lookup table:\n  /** @type {Record<string, number>} */\n  const codes = {}\n  for (let i = 0; i < alphabet.length; ++i) {\n    codes[alphabet[i]] = i\n  }\n\n  // Count the padding bytes:\n  let end = string.length\n  while (string[end - 1] === '=') {\n    --end\n  }\n\n  // Allocate the output:\n  const out = new Uint8Array((end * bitsPerChar / 8) | 0)\n\n  // Parse the data:\n  let bits = 0 // Number of bits currently in the buffer\n  let buffer = 0 // Bits waiting to be written out, MSB first\n  let written = 0 // Next byte to write\n  for (let i = 0; i < end; ++i) {\n    // Read one character from the string:\n    const value = codes[string[i]]\n    if (value === undefined) {\n      throw new SyntaxError(`Non-${name} character`)\n    }\n\n    // Append the bits to the buffer:\n    buffer = (buffer << bitsPerChar) | value\n    bits += bitsPerChar\n\n    // Write out some bits if the buffer has a byte's worth:\n    if (bits >= 8) {\n      bits -= 8\n      out[written++] = 0xff & (buffer >> bits)\n    }\n  }\n\n  // Verify that we have received just enough bits:\n  if (bits >= bitsPerChar || 0xff & (buffer << (8 - bits))) {\n    throw new SyntaxError('Unexpected end of data')\n  }\n\n  return out\n}\n\n/**\n * @param {Uint8Array} data\n * @param {string} alphabet\n * @param {number} bitsPerChar\n * @returns {string}\n */\nconst encode = (data, alphabet, bitsPerChar) => {\n  const pad = alphabet[alphabet.length - 1] === '='\n  const mask = (1 << bitsPerChar) - 1\n  let out = ''\n\n  let bits = 0 // Number of bits currently in the buffer\n  let buffer = 0 // Bits waiting to be written out, MSB first\n  for (let i = 0; i < data.length; ++i) {\n    // Slurp data into the buffer:\n    buffer = (buffer << 8) | data[i]\n    bits += 8\n\n    // Write out as much as we can:\n    while (bits > bitsPerChar) {\n      bits -= bitsPerChar\n      out += alphabet[mask & (buffer >> bits)]\n    }\n  }\n\n  // Partial character:\n  if (bits) {\n    out += alphabet[mask & (buffer << (bitsPerChar - bits))]\n  }\n\n  // Add padding characters until we hit a byte boundary:\n  if (pad) {\n    while ((out.length * bitsPerChar) & 7) {\n      out += '='\n    }\n  }\n\n  return out\n}\n\n/**\n * RFC4648 Factory\n *\n * @template {string} Base\n * @template {string} Prefix\n * @param {object} options\n * @param {Base} options.name\n * @param {Prefix} options.prefix\n * @param {string} options.alphabet\n * @param {number} options.bitsPerChar\n */\nexport const rfc4648 = ({ name, prefix, bitsPerChar, alphabet }) => {\n  return from({\n    prefix,\n    name,\n    encode (input) {\n      return encode(input, alphabet, bitsPerChar)\n    },\n    decode (input) {\n      return decode(input, alphabet, bitsPerChar, name)\n    }\n  })\n}\n","import { baseX } from './base.js'\n\nexport const base58btc = baseX({\n  name: 'base58btc',\n  prefix: 'z',\n  alphabet: '123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz'\n})\n\nexport const base58flickr = baseX({\n  name: 'base58flickr',\n  prefix: 'Z',\n  alphabet: '123456789abcdefghijkmnopqrstuvwxyzABCDEFGHJKLMNPQRSTUVWXYZ'\n})\n","import { rfc4648 } from './base.js'\n\nexport const base32 = rfc4648({\n  prefix: 'b',\n  name: 'base32',\n  alphabet: 'abcdefghijklmnopqrstuvwxyz234567',\n  bitsPerChar: 5\n})\n\nexport const base32upper = rfc4648({\n  prefix: 'B',\n  name: 'base32upper',\n  alphabet: 'ABCDEFGHIJKLMNOPQRSTUVWXYZ234567',\n  bitsPerChar: 5\n})\n\nexport const base32pad = rfc4648({\n  prefix: 'c',\n  name: 'base32pad',\n  alphabet: 'abcdefghijklmnopqrstuvwxyz234567=',\n  bitsPerChar: 5\n})\n\nexport const base32padupper = rfc4648({\n  prefix: 'C',\n  name: 'base32padupper',\n  alphabet: 'ABCDEFGHIJKLMNOPQRSTUVWXYZ234567=',\n  bitsPerChar: 5\n})\n\nexport const base32hex = rfc4648({\n  prefix: 'v',\n  name: 'base32hex',\n  alphabet: '0123456789abcdefghijklmnopqrstuv',\n  bitsPerChar: 5\n})\n\nexport const base32hexupper = rfc4648({\n  prefix: 'V',\n  name: 'base32hexupper',\n  alphabet: '0123456789ABCDEFGHIJKLMNOPQRSTUV',\n  bitsPerChar: 5\n})\n\nexport const base32hexpad = rfc4648({\n  prefix: 't',\n  name: 'base32hexpad',\n  alphabet: '0123456789abcdefghijklmnopqrstuv=',\n  bitsPerChar: 5\n})\n\nexport const base32hexpadupper = rfc4648({\n  prefix: 'T',\n  name: 'base32hexpadupper',\n  alphabet: '0123456789ABCDEFGHIJKLMNOPQRSTUV=',\n  bitsPerChar: 5\n})\n\nexport const base32z = rfc4648({\n  prefix: 'h',\n  name: 'base32z',\n  alphabet: 'ybndrfg8ejkmcpqxot1uwisza345h769',\n  bitsPerChar: 5\n})\n","import * as varint from './varint.js'\nimport * as Digest from './hashes/digest.js'\nimport { base58btc } from './bases/base58.js'\nimport { base32 } from './bases/base32.js'\nimport { coerce } from './bytes.js'\n// Linter can see that API is used in types.\n// eslint-disable-next-line\nimport * as API from \"./link/interface.js\"\n\n// This way TS will also expose all the types from module\nexport * from './link/interface.js'\n\n/**\n * @template {API.Link<unknown, number, number, API.Version>} T\n * @template {string} Prefix\n * @param {T} link\n * @param {API.MultibaseEncoder<Prefix>} [base]\n * @returns {API.ToString<T, Prefix>}\n */\nexport const format = (link, base) => {\n  const { bytes, version } = link\n  switch (version) {\n    case 0:\n      return toStringV0(\n        bytes,\n        baseCache(link),\n        /** @type {API.MultibaseEncoder<\"z\">} */ (base) || base58btc.encoder\n      )\n    default:\n      return toStringV1(\n        bytes,\n        baseCache(link),\n        /** @type {API.MultibaseEncoder<Prefix>} */ (base || base32.encoder)\n      )\n  }\n}\n\n/** @type {WeakMap<API.UnknownLink, Map<string, string>>} */\nconst cache = new WeakMap()\n\n/**\n * @param {API.UnknownLink} cid\n * @returns {Map<string, string>}\n */\nconst baseCache = cid => {\n  const baseCache = cache.get(cid)\n  if (baseCache == null) {\n    const baseCache = new Map()\n    cache.set(cid, baseCache)\n    return baseCache\n  }\n  return baseCache\n}\n\n/**\n * @template {unknown} [Data=unknown]\n * @template {number} [Format=number]\n * @template {number} [Alg=number]\n * @template {API.Version} [Version=API.Version]\n * @implements {API.Link<Data, Format, Alg, Version>}\n */\n\nexport class CID {\n  /**\n   * @param {Version} version - Version of the CID\n   * @param {Format} code - Code of the codec content is encoded in, see https://github.com/multiformats/multicodec/blob/master/table.csv\n   * @param {API.MultihashDigest<Alg>} multihash - (Multi)hash of the of the content.\n   * @param {Uint8Array} bytes\n   *\n   */\n  constructor (version, code, multihash, bytes) {\n    /** @readonly */\n    this.code = code\n    /** @readonly */\n    this.version = version\n    /** @readonly */\n    this.multihash = multihash\n    /** @readonly */\n    this.bytes = bytes\n\n    // flag to serializers that this is a CID and\n    // should be treated specially\n    /** @readonly */\n    this['/'] = bytes\n  }\n\n  /**\n   * Signalling `cid.asCID === cid` has been replaced with `cid['/'] === cid.bytes`\n   * please either use `CID.asCID(cid)` or switch to new signalling mechanism\n   *\n   * @deprecated\n   */\n  get asCID () {\n    return this\n  }\n\n  // ArrayBufferView\n  get byteOffset () {\n    return this.bytes.byteOffset\n  }\n\n  // ArrayBufferView\n  get byteLength () {\n    return this.bytes.byteLength\n  }\n\n  /**\n   * @returns {CID<Data, API.DAG_PB, API.SHA_256, 0>}\n   */\n  toV0 () {\n    switch (this.version) {\n      case 0: {\n        return /** @type {CID<Data, API.DAG_PB, API.SHA_256, 0>} */ (this)\n      }\n      case 1: {\n        const { code, multihash } = this\n\n        if (code !== DAG_PB_CODE) {\n          throw new Error('Cannot convert a non dag-pb CID to CIDv0')\n        }\n\n        // sha2-256\n        if (multihash.code !== SHA_256_CODE) {\n          throw new Error('Cannot convert non sha2-256 multihash CID to CIDv0')\n        }\n\n        return /** @type {CID<Data, API.DAG_PB, API.SHA_256, 0>} */ (\n          CID.createV0(\n            /** @type {API.MultihashDigest<API.SHA_256>} */ (multihash)\n          )\n        )\n      }\n      default: {\n        throw Error(\n          `Can not convert CID version ${this.version} to version 0. This is a bug please report`\n        )\n      }\n    }\n  }\n\n  /**\n   * @returns {CID<Data, Format, Alg, 1>}\n   */\n  toV1 () {\n    switch (this.version) {\n      case 0: {\n        const { code, digest } = this.multihash\n        const multihash = Digest.create(code, digest)\n        return /** @type {CID<Data, Format, Alg, 1>} */ (\n          CID.createV1(this.code, multihash)\n        )\n      }\n      case 1: {\n        return /** @type {CID<Data, Format, Alg, 1>} */ (this)\n      }\n      default: {\n        throw Error(\n          `Can not convert CID version ${this.version} to version 1. This is a bug please report`\n        )\n      }\n    }\n  }\n\n  /**\n   * @param {unknown} other\n   * @returns {other is CID<Data, Format, Alg, Version>}\n   */\n  equals (other) {\n    return CID.equals(this, other)\n  }\n\n  /**\n   * @template {unknown} Data\n   * @template {number} Format\n   * @template {number} Alg\n   * @template {API.Version} Version\n   * @param {API.Link<Data, Format, Alg, Version>} self\n   * @param {unknown} other\n   * @returns {other is CID}\n   */\n  static equals (self, other) {\n    const unknown =\n      /** @type {{code?:unknown, version?:unknown, multihash?:unknown}} */ (\n        other\n      )\n    return (\n      unknown &&\n      self.code === unknown.code &&\n      self.version === unknown.version &&\n      Digest.equals(self.multihash, unknown.multihash)\n    )\n  }\n\n  /**\n   * @param {API.MultibaseEncoder<string>} [base]\n   * @returns {string}\n   */\n  toString (base) {\n    return format(this, base)\n  }\n\n  toJSON () {\n    return {\n      code: this.code,\n      version: this.version,\n      hash: this.multihash.bytes\n    }\n  }\n\n  link () {\n    return this\n  }\n\n  get [Symbol.toStringTag] () {\n    return 'CID'\n  }\n\n  // Legacy\n\n  [Symbol.for('nodejs.util.inspect.custom')] () {\n    return `CID(${this.toString()})`\n  }\n\n  /**\n   * Takes any input `value` and returns a `CID` instance if it was\n   * a `CID` otherwise returns `null`. If `value` is instanceof `CID`\n   * it will return value back. If `value` is not instance of this CID\n   * class, but is compatible CID it will return new instance of this\n   * `CID` class. Otherwise returs null.\n   *\n   * This allows two different incompatible versions of CID library to\n   * co-exist and interop as long as binary interface is compatible.\n   *\n   * @template {unknown} Data\n   * @template {number} Format\n   * @template {number} Alg\n   * @template {API.Version} Version\n   * @template {unknown} U\n   * @param {API.Link<Data, Format, Alg, Version>|U} input\n   * @returns {CID<Data, Format, Alg, Version>|null}\n   */\n  static asCID (input) {\n    if (input == null) {\n      return null\n    }\n\n    const value = /** @type {any} */ (input)\n    if (value instanceof CID) {\n      // If value is instance of CID then we're all set.\n      return value\n    } else if ((value['/'] != null && value['/'] === value.bytes) || value.asCID === value) {\n      // If value isn't instance of this CID class but `this.asCID === this` or\n      // `value['/'] === value.bytes` is true it is CID instance coming from a\n      // different implementation (diff version or duplicate). In that case we\n      // rebase it to this `CID` implementation so caller is guaranteed to get\n      // instance with expected API.\n      const { version, code, multihash, bytes } = value\n      return new CID(\n        version,\n        code,\n        /** @type {API.MultihashDigest<Alg>} */ (multihash),\n        bytes || encodeCID(version, code, multihash.bytes)\n      )\n    } else if (value[cidSymbol] === true) {\n      // If value is a CID from older implementation that used to be tagged via\n      // symbol we still rebase it to the this `CID` implementation by\n      // delegating that to a constructor.\n      const { version, multihash, code } = value\n      const digest =\n        /** @type {API.MultihashDigest<Alg>} */\n        (Digest.decode(multihash))\n      return CID.create(version, code, digest)\n    } else {\n      // Otherwise value is not a CID (or an incompatible version of it) in\n      // which case we return `null`.\n      return null\n    }\n  }\n\n  /**\n   *\n   * @template {unknown} Data\n   * @template {number} Format\n   * @template {number} Alg\n   * @template {API.Version} Version\n   * @param {Version} version - Version of the CID\n   * @param {Format} code - Code of the codec content is encoded in, see https://github.com/multiformats/multicodec/blob/master/table.csv\n   * @param {API.MultihashDigest<Alg>} digest - (Multi)hash of the of the content.\n   * @returns {CID<Data, Format, Alg, Version>}\n   */\n  static create (version, code, digest) {\n    if (typeof code !== 'number') {\n      throw new Error('String codecs are no longer supported')\n    }\n\n    if (!(digest.bytes instanceof Uint8Array)) {\n      throw new Error('Invalid digest')\n    }\n\n    switch (version) {\n      case 0: {\n        if (code !== DAG_PB_CODE) {\n          throw new Error(\n            `Version 0 CID must use dag-pb (code: ${DAG_PB_CODE}) block encoding`\n          )\n        } else {\n          return new CID(version, code, digest, digest.bytes)\n        }\n      }\n      case 1: {\n        const bytes = encodeCID(version, code, digest.bytes)\n        return new CID(version, code, digest, bytes)\n      }\n      default: {\n        throw new Error('Invalid version')\n      }\n    }\n  }\n\n  /**\n   * Simplified version of `create` for CIDv0.\n   *\n   * @template {unknown} [T=unknown]\n   * @param {API.MultihashDigest<typeof SHA_256_CODE>} digest - Multihash.\n   * @returns {CID<T, typeof DAG_PB_CODE, typeof SHA_256_CODE, 0>}\n   */\n  static createV0 (digest) {\n    return CID.create(0, DAG_PB_CODE, digest)\n  }\n\n  /**\n   * Simplified version of `create` for CIDv1.\n   *\n   * @template {unknown} Data\n   * @template {number} Code\n   * @template {number} Alg\n   * @param {Code} code - Content encoding format code.\n   * @param {API.MultihashDigest<Alg>} digest - Miltihash of the content.\n   * @returns {CID<Data, Code, Alg, 1>}\n   */\n  static createV1 (code, digest) {\n    return CID.create(1, code, digest)\n  }\n\n  /**\n   * Decoded a CID from its binary representation. The byte array must contain\n   * only the CID with no additional bytes.\n   *\n   * An error will be thrown if the bytes provided do not contain a valid\n   * binary representation of a CID.\n   *\n   * @template {unknown} Data\n   * @template {number} Code\n   * @template {number} Alg\n   * @template {API.Version} Ver\n   * @param {API.ByteView<API.Link<Data, Code, Alg, Ver>>} bytes\n   * @returns {CID<Data, Code, Alg, Ver>}\n   */\n  static decode (bytes) {\n    const [cid, remainder] = CID.decodeFirst(bytes)\n    if (remainder.length) {\n      throw new Error('Incorrect length')\n    }\n    return cid\n  }\n\n  /**\n   * Decoded a CID from its binary representation at the beginning of a byte\n   * array.\n   *\n   * Returns an array with the first element containing the CID and the second\n   * element containing the remainder of the original byte array. The remainder\n   * will be a zero-length byte array if the provided bytes only contained a\n   * binary CID representation.\n   *\n   * @template {unknown} T\n   * @template {number} C\n   * @template {number} A\n   * @template {API.Version} V\n   * @param {API.ByteView<API.Link<T, C, A, V>>} bytes\n   * @returns {[CID<T, C, A, V>, Uint8Array]}\n   */\n  static decodeFirst (bytes) {\n    const specs = CID.inspectBytes(bytes)\n    const prefixSize = specs.size - specs.multihashSize\n    const multihashBytes = coerce(\n      bytes.subarray(prefixSize, prefixSize + specs.multihashSize)\n    )\n    if (multihashBytes.byteLength !== specs.multihashSize) {\n      throw new Error('Incorrect length')\n    }\n    const digestBytes = multihashBytes.subarray(\n      specs.multihashSize - specs.digestSize\n    )\n    const digest = new Digest.Digest(\n      specs.multihashCode,\n      specs.digestSize,\n      digestBytes,\n      multihashBytes\n    )\n    const cid =\n      specs.version === 0\n        ? CID.createV0(/** @type {API.MultihashDigest<API.SHA_256>} */ (digest))\n        : CID.createV1(specs.codec, digest)\n    return [/** @type {CID<T, C, A, V>} */(cid), bytes.subarray(specs.size)]\n  }\n\n  /**\n   * Inspect the initial bytes of a CID to determine its properties.\n   *\n   * Involves decoding up to 4 varints. Typically this will require only 4 to 6\n   * bytes but for larger multicodec code values and larger multihash digest\n   * lengths these varints can be quite large. It is recommended that at least\n   * 10 bytes be made available in the `initialBytes` argument for a complete\n   * inspection.\n   *\n   * @template {unknown} T\n   * @template {number} C\n   * @template {number} A\n   * @template {API.Version} V\n   * @param {API.ByteView<API.Link<T, C, A, V>>} initialBytes\n   * @returns {{ version:V, codec:C, multihashCode:A, digestSize:number, multihashSize:number, size:number }}\n   */\n  static inspectBytes (initialBytes) {\n    let offset = 0\n    const next = () => {\n      const [i, length] = varint.decode(initialBytes.subarray(offset))\n      offset += length\n      return i\n    }\n\n    let version = /** @type {V} */ (next())\n    let codec = /** @type {C} */ (DAG_PB_CODE)\n    if (/** @type {number} */(version) === 18) {\n      // CIDv0\n      version = /** @type {V} */ (0)\n      offset = 0\n    } else {\n      codec = /** @type {C} */ (next())\n    }\n\n    if (version !== 0 && version !== 1) {\n      throw new RangeError(`Invalid CID version ${version}`)\n    }\n\n    const prefixSize = offset\n    const multihashCode = /** @type {A} */ (next()) // multihash code\n    const digestSize = next() // multihash length\n    const size = offset + digestSize\n    const multihashSize = size - prefixSize\n\n    return { version, codec, multihashCode, digestSize, multihashSize, size }\n  }\n\n  /**\n   * Takes cid in a string representation and creates an instance. If `base`\n   * decoder is not provided will use a default from the configuration. It will\n   * throw an error if encoding of the CID is not compatible with supplied (or\n   * a default decoder).\n   *\n   * @template {string} Prefix\n   * @template {unknown} Data\n   * @template {number} Code\n   * @template {number} Alg\n   * @template {API.Version} Ver\n   * @param {API.ToString<API.Link<Data, Code, Alg, Ver>, Prefix>} source\n   * @param {API.MultibaseDecoder<Prefix>} [base]\n   * @returns {CID<Data, Code, Alg, Ver>}\n   */\n  static parse (source, base) {\n    const [prefix, bytes] = parseCIDtoBytes(source, base)\n\n    const cid = CID.decode(bytes)\n\n    // Cache string representation to avoid computing it on `this.toString()`\n    baseCache(cid).set(prefix, source)\n\n    return cid\n  }\n}\n\n/**\n * @template {string} Prefix\n * @template {unknown} Data\n * @template {number} Code\n * @template {number} Alg\n * @template {API.Version} Ver\n * @param {API.ToString<API.Link<Data, Code, Alg, Ver>, Prefix>} source\n * @param {API.MultibaseDecoder<Prefix>} [base]\n * @returns {[Prefix, API.ByteView<API.Link<Data, Code, Alg, Ver>>]}\n */\nconst parseCIDtoBytes = (source, base) => {\n  switch (source[0]) {\n    // CIDv0 is parsed differently\n    case 'Q': {\n      const decoder = base || base58btc\n      return [\n        /** @type {Prefix} */ (base58btc.prefix),\n        decoder.decode(`${base58btc.prefix}${source}`)\n      ]\n    }\n    case base58btc.prefix: {\n      const decoder = base || base58btc\n      return [/** @type {Prefix} */(base58btc.prefix), decoder.decode(source)]\n    }\n    case base32.prefix: {\n      const decoder = base || base32\n      return [/** @type {Prefix} */(base32.prefix), decoder.decode(source)]\n    }\n    default: {\n      if (base == null) {\n        throw Error(\n          'To parse non base32 or base58btc encoded CID multibase decoder must be provided'\n        )\n      }\n      return [/** @type {Prefix} */(source[0]), base.decode(source)]\n    }\n  }\n}\n\n/**\n *\n * @param {Uint8Array} bytes\n * @param {Map<string, string>} cache\n * @param {API.MultibaseEncoder<'z'>} base\n */\nconst toStringV0 = (bytes, cache, base) => {\n  const { prefix } = base\n  if (prefix !== base58btc.prefix) {\n    throw Error(`Cannot string encode V0 in ${base.name} encoding`)\n  }\n\n  const cid = cache.get(prefix)\n  if (cid == null) {\n    const cid = base.encode(bytes).slice(1)\n    cache.set(prefix, cid)\n    return cid\n  } else {\n    return cid\n  }\n}\n\n/**\n * @template {string} Prefix\n * @param {Uint8Array} bytes\n * @param {Map<string, string>} cache\n * @param {API.MultibaseEncoder<Prefix>} base\n */\nconst toStringV1 = (bytes, cache, base) => {\n  const { prefix } = base\n  const cid = cache.get(prefix)\n  if (cid == null) {\n    const cid = base.encode(bytes)\n    cache.set(prefix, cid)\n    return cid\n  } else {\n    return cid\n  }\n}\n\nconst DAG_PB_CODE = 0x70\nconst SHA_256_CODE = 0x12\n\n/**\n * @param {API.Version} version\n * @param {number} code\n * @param {Uint8Array} multihash\n * @returns {Uint8Array}\n */\nconst encodeCID = (version, code, multihash) => {\n  const codeOffset = varint.encodingLength(version)\n  const hashOffset = codeOffset + varint.encodingLength(code)\n  const bytes = new Uint8Array(hashOffset + multihash.byteLength)\n  varint.encodeTo(version, bytes, 0)\n  varint.encodeTo(code, bytes, codeOffset)\n  bytes.set(multihash, hashOffset)\n  return bytes\n}\n\nconst cidSymbol = Symbol.for('@ipld/js-cid/CID')\n","// @ts-check\n\nimport { from } from './base.js'\nimport { fromString, toString } from '../bytes.js'\n\nexport const identity = from({\n  prefix: '\\x00',\n  name: 'identity',\n  encode: (buf) => toString(buf),\n  decode: (str) => fromString(str)\n})\n","// @ts-check\n\nimport { rfc4648 } from './base.js'\n\nexport const base2 = rfc4648({\n  prefix: '0',\n  name: 'base2',\n  alphabet: '01',\n  bitsPerChar: 1\n})\n","// @ts-check\n\nimport { rfc4648 } from './base.js'\n\nexport const base8 = rfc4648({\n  prefix: '7',\n  name: 'base8',\n  alphabet: '01234567',\n  bitsPerChar: 3\n})\n","import { baseX } from './base.js'\n\nexport const base10 = baseX({\n  prefix: '9',\n  name: 'base10',\n  alphabet: '0123456789'\n})\n","// @ts-check\n\nimport { rfc4648 } from './base.js'\n\nexport const base16 = rfc4648({\n  prefix: 'f',\n  name: 'base16',\n  alphabet: '0123456789abcdef',\n  bitsPerChar: 4\n})\n\nexport const base16upper = rfc4648({\n  prefix: 'F',\n  name: 'base16upper',\n  alphabet: '0123456789ABCDEF',\n  bitsPerChar: 4\n})\n","import { baseX } from './base.js'\n\nexport const base36 = baseX({\n  prefix: 'k',\n  name: 'base36',\n  alphabet: '0123456789abcdefghijklmnopqrstuvwxyz'\n})\n\nexport const base36upper = baseX({\n  prefix: 'K',\n  name: 'base36upper',\n  alphabet: '0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ'\n})\n","// @ts-check\n\nimport { rfc4648 } from './base.js'\n\nexport const base64 = rfc4648({\n  prefix: 'm',\n  name: 'base64',\n  alphabet: 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/',\n  bitsPerChar: 6\n})\n\nexport const base64pad = rfc4648({\n  prefix: 'M',\n  name: 'base64pad',\n  alphabet: 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=',\n  bitsPerChar: 6\n})\n\nexport const base64url = rfc4648({\n  prefix: 'u',\n  name: 'base64url',\n  alphabet: 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789-_',\n  bitsPerChar: 6\n})\n\nexport const base64urlpad = rfc4648({\n  prefix: 'U',\n  name: 'base64urlpad',\n  alphabet: 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789-_=',\n  bitsPerChar: 6\n})\n","import { from } from './base.js'\n\nconst alphabet = Array.from('🚀🪐☄🛰🌌🌑🌒🌓🌔🌕🌖🌗🌘🌍🌏🌎🐉☀💻🖥💾💿😂❤😍🤣😊🙏💕😭😘👍😅👏😁🔥🥰💔💖💙😢🤔😆🙄💪😉☺👌🤗💜😔😎😇🌹🤦🎉💞✌✨🤷😱😌🌸🙌😋💗💚😏💛🙂💓🤩😄😀🖤😃💯🙈👇🎶😒🤭❣😜💋👀😪😑💥🙋😞😩😡🤪👊🥳😥🤤👉💃😳✋😚😝😴🌟😬🙃🍀🌷😻😓⭐✅🥺🌈😈🤘💦✔😣🏃💐☹🎊💘😠☝😕🌺🎂🌻😐🖕💝🙊😹🗣💫💀👑🎵🤞😛🔴😤🌼😫⚽🤙☕🏆🤫👈😮🙆🍻🍃🐶💁😲🌿🧡🎁⚡🌞🎈❌✊👋😰🤨😶🤝🚶💰🍓💢🤟🙁🚨💨🤬✈🎀🍺🤓😙💟🌱😖👶🥴▶➡❓💎💸⬇😨🌚🦋😷🕺⚠🙅😟😵👎🤲🤠🤧📌🔵💅🧐🐾🍒😗🤑🌊🤯🐷☎💧😯💆👆🎤🙇🍑❄🌴💣🐸💌📍🥀🤢👅💡💩👐📸👻🤐🤮🎼🥵🚩🍎🍊👼💍📣🥂')\nconst alphabetBytesToChars = /** @type {string[]} */ (alphabet.reduce((p, c, i) => { p[i] = c; return p }, /** @type {string[]} */([])))\nconst alphabetCharsToBytes = /** @type {number[]} */ (alphabet.reduce((p, c, i) => { p[/** @type {number} */ (c.codePointAt(0))] = i; return p }, /** @type {number[]} */([])))\n\n/**\n * @param {Uint8Array} data\n * @returns {string}\n */\nfunction encode (data) {\n  return data.reduce((p, c) => {\n    p += alphabetBytesToChars[c]\n    return p\n  }, '')\n}\n\n/**\n * @param {string} str\n * @returns {Uint8Array}\n */\nfunction decode (str) {\n  const byts = []\n  for (const char of str) {\n    const byt = alphabetCharsToBytes[/** @type {number} */ (char.codePointAt(0))]\n    if (byt === undefined) {\n      throw new Error(`Non-base256emoji character: ${char}`)\n    }\n    byts.push(byt)\n  }\n  return new Uint8Array(byts)\n}\n\nexport const base256emoji = from({\n  prefix: '🚀',\n  name: 'base256emoji',\n  encode,\n  decode\n})\n","import * as Digest from './digest.js'\n\n/**\n * @template {string} Name\n * @template {number} Code\n * @param {object} options\n * @param {Name} options.name\n * @param {Code} options.code\n * @param {(input: Uint8Array) => Await<Uint8Array>} options.encode\n */\nexport const from = ({ name, code, encode }) => new Hasher(name, code, encode)\n\n/**\n * Hasher represents a hashing algorithm implementation that produces as\n * `MultihashDigest`.\n *\n * @template {string} Name\n * @template {number} Code\n * @class\n * @implements {MultihashHasher<Code>}\n */\nexport class Hasher {\n  /**\n   *\n   * @param {Name} name\n   * @param {Code} code\n   * @param {(input: Uint8Array) => Await<Uint8Array>} encode\n   */\n  constructor (name, code, encode) {\n    this.name = name\n    this.code = code\n    this.encode = encode\n  }\n\n  /**\n   * @param {Uint8Array} input\n   * @returns {Await<Digest.Digest<Code, number>>}\n   */\n  digest (input) {\n    if (input instanceof Uint8Array) {\n      const result = this.encode(input)\n      return result instanceof Uint8Array\n        ? Digest.create(this.code, result)\n        /* c8 ignore next 1 */\n        : result.then(digest => Digest.create(this.code, digest))\n    } else {\n      throw Error('Unknown type, must be binary type')\n      /* c8 ignore next 1 */\n    }\n  }\n}\n\n/**\n * @template {number} Alg\n * @typedef {import('./interface.js').MultihashHasher} MultihashHasher\n */\n\n/**\n * @template T\n * @typedef {Promise<T>|T} Await\n */\n","/* global crypto */\n\nimport { from } from './hasher.js'\n\n/**\n * @param {AlgorithmIdentifier} name\n */\nconst sha = name =>\n  /**\n   * @param {Uint8Array} data\n   */\n  async data => new Uint8Array(await crypto.subtle.digest(name, data))\n\nexport const sha256 = from({\n  name: 'sha2-256',\n  code: 0x12,\n  encode: sha('SHA-256')\n})\n\nexport const sha512 = from({\n  name: 'sha2-512',\n  code: 0x13,\n  encode: sha('SHA-512')\n})\n","import { coerce } from '../bytes.js'\nimport * as Digest from './digest.js'\n\nconst code = 0x0\nconst name = 'identity'\n\n/** @type {(input:Uint8Array) => Uint8Array} */\nconst encode = coerce\n\n/**\n * @param {Uint8Array} input\n * @returns {Digest.Digest<typeof code, number>}\n */\nconst digest = (input) => Digest.create(code, encode(input))\n\nexport const identity = { code, name, encode, digest }\n","// @ts-check\n\nimport { coerce } from '../bytes.js'\n\n/**\n * @template T\n * @typedef {import('./interface.js').ByteView<T>} ByteView\n */\n\nexport const name = 'raw'\nexport const code = 0x55\n\n/**\n * @param {Uint8Array} node\n * @returns {ByteView<Uint8Array>}\n */\nexport const encode = (node) => coerce(node)\n\n/**\n * @param {ByteView<Uint8Array>} data\n * @returns {Uint8Array}\n */\nexport const decode = (data) => coerce(data)\n","// @ts-check\n\n/**\n * @template T\n * @typedef {import('./interface.js').ByteView<T>} ByteView\n */\n\nconst textEncoder = new TextEncoder()\nconst textDecoder = new TextDecoder()\n\nexport const name = 'json'\nexport const code = 0x0200\n\n/**\n * @template T\n * @param {T} node\n * @returns {ByteView<T>}\n */\nexport const encode = (node) => textEncoder.encode(JSON.stringify(node))\n\n/**\n * @template T\n * @param {ByteView<T>} data\n * @returns {T}\n */\nexport const decode = (data) => JSON.parse(textDecoder.decode(data))\n","// @ts-check\n\nimport * as identityBase from './bases/identity.js'\nimport * as base2 from './bases/base2.js'\nimport * as base8 from './bases/base8.js'\nimport * as base10 from './bases/base10.js'\nimport * as base16 from './bases/base16.js'\nimport * as base32 from './bases/base32.js'\nimport * as base36 from './bases/base36.js'\nimport * as base58 from './bases/base58.js'\nimport * as base64 from './bases/base64.js'\nimport * as base256emoji from './bases/base256emoji.js'\nimport * as sha2 from './hashes/sha2.js'\nimport * as identity from './hashes/identity.js'\n\nimport * as raw from './codecs/raw.js'\nimport * as json from './codecs/json.js'\n\nimport { CID, hasher, digest, varint, bytes } from './index.js'\n\nconst bases = { ...identityBase, ...base2, ...base8, ...base10, ...base16, ...base32, ...base36, ...base58, ...base64, ...base256emoji }\nconst hashes = { ...sha2, ...identity }\nconst codecs = { raw, json }\n\nexport { CID, hasher, digest, varint, bytes, hashes, bases, codecs }\n","/**\n * Returns true if the two passed Uint8Arrays have the same content\n */\nexport function equals (a: Uint8Array, b: Uint8Array): boolean {\n  if (a === b) {\n    return true\n  }\n\n  if (a.byteLength !== b.byteLength) {\n    return false\n  }\n\n  for (let i = 0; i < a.byteLength; i++) {\n    if (a[i] !== b[i]) {\n      return false\n    }\n  }\n\n  return true\n}\n","import type { CID } from 'multiformats/cid'\nimport type { MultihashDigest } from 'multiformats/hashes/interface'\n\nexport type PeerIdType = 'RSA' | 'Ed25519' | 'secp256k1'\n\ninterface BasePeerId {\n  readonly type: PeerIdType\n  readonly multihash: MultihashDigest\n  readonly privateKey?: Uint8Array\n  readonly publicKey?: Uint8Array\n\n  toString: () => string\n  toCID: () => CID\n  toBytes: () => Uint8Array\n  equals: (other: PeerId | Uint8Array | string) => boolean\n}\n\nexport interface RSAPeerId extends BasePeerId {\n  readonly type: 'RSA'\n  readonly publicKey?: Uint8Array\n}\n\nexport interface Ed25519PeerId extends BasePeerId {\n  readonly type: 'Ed25519'\n  readonly publicKey: Uint8Array\n}\n\nexport interface Secp256k1PeerId extends BasePeerId {\n  readonly type: 'secp256k1'\n  readonly publicKey: Uint8Array\n}\n\nexport type PeerId = RSAPeerId | Ed25519PeerId | Secp256k1PeerId\n\nexport const symbol = Symbol.for('@libp2p/peer-id')\n\nexport function isPeerId (other: any): other is PeerId {\n  return other != null && Boolean(other[symbol])\n}\n","import { CID } from 'multiformats/cid'\nimport { bases } from 'multiformats/basics'\nimport { base58btc } from 'multiformats/bases/base58'\nimport * as Digest from 'multiformats/hashes/digest'\nimport { identity } from 'multiformats/hashes/identity'\nimport { equals as uint8ArrayEquals } from 'uint8arrays/equals'\nimport { sha256 } from 'multiformats/hashes/sha2'\nimport errcode from 'err-code'\nimport { Ed25519PeerId, PeerIdType, RSAPeerId, Secp256k1PeerId, symbol } from '@libp2p/interface-peer-id'\nimport type { MultibaseDecoder } from 'multiformats/bases/interface'\nimport type { MultihashDigest } from 'multiformats/hashes/interface'\nimport type { PeerId } from '@libp2p/interface-peer-id'\n\nconst inspect = Symbol.for('nodejs.util.inspect.custom')\n\nconst baseDecoder = Object\n  .values(bases)\n  .map(codec => codec.decoder)\n  // @ts-expect-error https://github.com/multiformats/js-multiformats/issues/141\n  .reduce((acc, curr) => acc.or(curr), bases.identity.decoder)\n\n// these values are from https://github.com/multiformats/multicodec/blob/master/table.csv\nconst LIBP2P_KEY_CODE = 0x72\n\nconst MARSHALLED_ED225519_PUBLIC_KEY_LENGTH = 36\nconst MARSHALLED_SECP256K1_PUBLIC_KEY_LENGTH = 37\n\ninterface PeerIdInit {\n  type: PeerIdType\n  multihash: MultihashDigest\n  privateKey?: Uint8Array\n}\n\ninterface RSAPeerIdInit {\n  multihash: MultihashDigest\n  privateKey?: Uint8Array\n  publicKey?: Uint8Array\n}\n\ninterface Ed25519PeerIdInit {\n  multihash: MultihashDigest\n  privateKey?: Uint8Array\n}\n\ninterface Secp256k1PeerIdInit {\n  multihash: MultihashDigest\n  privateKey?: Uint8Array\n}\n\nclass PeerIdImpl {\n  public type: PeerIdType\n  public readonly multihash: MultihashDigest\n  public readonly privateKey?: Uint8Array\n  public readonly publicKey?: Uint8Array\n  private string?: string\n\n  constructor (init: PeerIdInit) {\n    this.type = init.type\n    this.multihash = init.multihash\n    this.privateKey = init.privateKey\n\n    // mark string cache as non-enumerable\n    Object.defineProperty(this, 'string', {\n      enumerable: false,\n      writable: true\n    })\n  }\n\n  get [Symbol.toStringTag] () {\n    return `PeerId(${this.toString()})`\n  }\n\n  get [symbol] () {\n    return true\n  }\n\n  toString () {\n    if (this.string == null) {\n      this.string = base58btc.encode(this.multihash.bytes).slice(1)\n    }\n\n    return this.string\n  }\n\n  // return self-describing String representation\n  // in default format from RFC 0001: https://github.com/libp2p/specs/pull/209\n  toCID () {\n    return CID.createV1(LIBP2P_KEY_CODE, this.multihash)\n  }\n\n  toBytes () {\n    return this.multihash.bytes\n  }\n\n  /**\n   * Returns Multiaddr as a JSON encoded object\n   */\n  toJSON () {\n    return this.toString()\n  }\n\n  /**\n   * Checks the equality of `this` peer against a given PeerId\n   */\n  equals (id: PeerId | Uint8Array | string): boolean {\n    if (id instanceof Uint8Array) {\n      return uint8ArrayEquals(this.multihash.bytes, id)\n    } else if (typeof id === 'string') {\n      return peerIdFromString(id).equals(this as PeerId)\n    } else if (id?.multihash?.bytes != null) {\n      return uint8ArrayEquals(this.multihash.bytes, id.multihash.bytes)\n    } else {\n      throw new Error('not valid Id')\n    }\n  }\n\n  /**\n   * Returns PeerId as a human-readable string\n   * https://nodejs.org/api/util.html#utilinspectcustom\n   *\n   * @example\n   * ```js\n   * import { peerIdFromString } from '@libp2p/peer-id'\n   *\n   * console.info(peerIdFromString('QmFoo'))\n   * // 'PeerId(QmFoo)'\n   * ```\n   */\n  [inspect] (): string {\n    return `PeerId(${this.toString()})`\n  }\n}\n\nclass RSAPeerIdImpl extends PeerIdImpl implements RSAPeerId {\n  public readonly type = 'RSA'\n  public readonly publicKey?: Uint8Array\n\n  constructor (init: RSAPeerIdInit) {\n    super({ ...init, type: 'RSA' })\n\n    this.publicKey = init.publicKey\n  }\n}\n\nclass Ed25519PeerIdImpl extends PeerIdImpl implements Ed25519PeerId {\n  public readonly type = 'Ed25519'\n  public readonly publicKey: Uint8Array\n\n  constructor (init: Ed25519PeerIdInit) {\n    super({ ...init, type: 'Ed25519' })\n\n    this.publicKey = init.multihash.digest\n  }\n}\n\nclass Secp256k1PeerIdImpl extends PeerIdImpl implements Secp256k1PeerId {\n  public readonly type = 'secp256k1'\n  public readonly publicKey: Uint8Array\n\n  constructor (init: Secp256k1PeerIdInit) {\n    super({ ...init, type: 'secp256k1' })\n\n    this.publicKey = init.multihash.digest\n  }\n}\n\nexport function createPeerId (init: PeerIdInit): PeerId {\n  if (init.type === 'RSA') {\n    return new RSAPeerIdImpl(init)\n  }\n\n  if (init.type === 'Ed25519') {\n    return new Ed25519PeerIdImpl(init)\n  }\n\n  if (init.type === 'secp256k1') {\n    return new Secp256k1PeerIdImpl(init)\n  }\n\n  throw errcode(new Error('Type must be \"RSA\", \"Ed25519\" or \"secp256k1\"'), 'ERR_INVALID_PARAMETERS')\n}\n\nexport function peerIdFromPeerId (other: any): PeerId {\n  if (other.type === 'RSA') {\n    return new RSAPeerIdImpl(other)\n  }\n\n  if (other.type === 'Ed25519') {\n    return new Ed25519PeerIdImpl(other)\n  }\n\n  if (other.type === 'secp256k1') {\n    return new Secp256k1PeerIdImpl(other)\n  }\n\n  throw errcode(new Error('Not a PeerId'), 'ERR_INVALID_PARAMETERS')\n}\n\nexport function peerIdFromString (str: string, decoder?: MultibaseDecoder<any>): PeerId {\n  decoder = decoder ?? baseDecoder\n\n  if (str.charAt(0) === '1' || str.charAt(0) === 'Q') {\n    // identity hash ed25519/secp256k1 key or sha2-256 hash of\n    // rsa public key - base58btc encoded either way\n    const multihash = Digest.decode(base58btc.decode(`z${str}`))\n\n    if (str.startsWith('12D')) {\n      return new Ed25519PeerIdImpl({ multihash })\n    } else if (str.startsWith('16U')) {\n      return new Secp256k1PeerIdImpl({ multihash })\n    } else {\n      return new RSAPeerIdImpl({ multihash })\n    }\n  }\n\n  return peerIdFromBytes(baseDecoder.decode(str))\n}\n\nexport function peerIdFromBytes (buf: Uint8Array) {\n  try {\n    const multihash = Digest.decode(buf)\n\n    if (multihash.code === identity.code) {\n      if (multihash.digest.length === MARSHALLED_ED225519_PUBLIC_KEY_LENGTH) {\n        return new Ed25519PeerIdImpl({ multihash })\n      } else if (multihash.digest.length === MARSHALLED_SECP256K1_PUBLIC_KEY_LENGTH) {\n        return new Secp256k1PeerIdImpl({ multihash })\n      }\n    }\n\n    if (multihash.code === sha256.code) {\n      return new RSAPeerIdImpl({ multihash })\n    }\n  } catch {\n    return peerIdFromCID(CID.decode(buf))\n  }\n\n  throw new Error('Supplied PeerID CID is invalid')\n}\n\nexport function peerIdFromCID (cid: CID): PeerId {\n  if (cid == null || cid.multihash == null || cid.version == null || (cid.version === 1 && cid.code !== LIBP2P_KEY_CODE)) {\n    throw new Error('Supplied PeerID CID is invalid')\n  }\n\n  const multihash = cid.multihash\n\n  if (multihash.code === sha256.code) {\n    return new RSAPeerIdImpl({ multihash: cid.multihash })\n  } else if (multihash.code === identity.code) {\n    if (multihash.digest.length === MARSHALLED_ED225519_PUBLIC_KEY_LENGTH) {\n      return new Ed25519PeerIdImpl({ multihash: cid.multihash })\n    } else if (multihash.digest.length === MARSHALLED_SECP256K1_PUBLIC_KEY_LENGTH) {\n      return new Secp256k1PeerIdImpl({ multihash: cid.multihash })\n    }\n  }\n\n  throw new Error('Supplied PeerID CID is invalid')\n}\n\n/**\n * @param publicKey - A marshalled public key\n * @param privateKey - A marshalled private key\n */\nexport async function peerIdFromKeys (publicKey: Uint8Array, privateKey?: Uint8Array): Promise<PeerId> {\n  if (publicKey.length === MARSHALLED_ED225519_PUBLIC_KEY_LENGTH) {\n    return new Ed25519PeerIdImpl({ multihash: Digest.create(identity.code, publicKey), privateKey })\n  }\n\n  if (publicKey.length === MARSHALLED_SECP256K1_PUBLIC_KEY_LENGTH) {\n    return new Secp256k1PeerIdImpl({ multihash: Digest.create(identity.code, publicKey), privateKey })\n  }\n\n  return new RSAPeerIdImpl({ multihash: await sha256.digest(publicKey), publicKey, privateKey })\n}\n","import { CID } from 'multiformats/cid'\nimport { configure } from '../lib/configure.js'\nimport { toUrlSearchParams } from '../lib/to-url-search-params.js'\nimport { peerIdFromString } from '@libp2p/peer-id'\n\n/**\n * @typedef {import('../types').HTTPClientExtraOptions} HTTPClientExtraOptions\n * @typedef {import('ipfs-core-types/src/bitswap').API<HTTPClientExtraOptions>} BitswapAPI\n */\n\nexport const createStat = configure(api => {\n  /**\n   * @type {BitswapAPI[\"stat\"]}\n   */\n  async function stat (options = {}) {\n    const res = await api.post('bitswap/stat', {\n      searchParams: toUrlSearchParams(options),\n      signal: options.signal,\n      headers: options.headers\n    })\n\n    return toCoreInterface(await res.json())\n  }\n  return stat\n})\n\n/**\n * @param {any} res\n */\nfunction toCoreInterface (res) {\n  return {\n    provideBufLen: res.ProvideBufLen,\n    wantlist: (res.Wantlist || []).map((/** @type {{ '/': string }} */ k) => CID.parse(k['/'])),\n    peers: (res.Peers || []).map((/** @type {string} */ str) => peerIdFromString(str)),\n    blocksReceived: BigInt(res.BlocksReceived),\n    dataReceived: BigInt(res.DataReceived),\n    blocksSent: BigInt(res.BlocksSent),\n    dataSent: BigInt(res.DataSent),\n    dupBlksReceived: BigInt(res.DupBlksReceived),\n    dupDataReceived: BigInt(res.DupDataReceived)\n  }\n}\n","import { configure } from '../lib/configure.js'\nimport { toUrlSearchParams } from '../lib/to-url-search-params.js'\n\n/**\n * @typedef {import('../types').HTTPClientExtraOptions} HTTPClientExtraOptions\n * @typedef {import('ipfs-core-types/src/bitswap').API<HTTPClientExtraOptions>} BitswapAPI\n */\n\nexport const createUnwant = configure(api => {\n  /**\n   * @type {BitswapAPI[\"unwant\"]}\n   */\n  async function unwant (cid, options = {}) {\n    const res = await api.post('bitswap/unwant', {\n      signal: options.signal,\n      searchParams: toUrlSearchParams({\n        arg: cid.toString(),\n        ...options\n      }),\n      headers: options.headers\n    })\n\n    return res.json()\n  }\n  return unwant\n})\n","import { configure } from '../lib/configure.js'\nimport { toUrlSearchParams } from '../lib/to-url-search-params.js'\n\n/**\n * @typedef {import('../types').HTTPClientExtraOptions} HTTPClientExtraOptions\n * @typedef {import('ipfs-core-types/src/block').API<HTTPClientExtraOptions>} BlockAPI\n */\n\nexport const createGet = configure(api => {\n  /**\n   * @type {BlockAPI[\"get\"]}\n   */\n  async function get (cid, options = {}) {\n    const res = await api.post('block/get', {\n      signal: options.signal,\n      searchParams: toUrlSearchParams({\n        arg: cid.toString(),\n        ...options\n      }),\n      headers: options.headers\n    })\n\n    return new Uint8Array(await res.arrayBuffer())\n  }\n  return get\n})\n","export default function _asyncIterator(iterable) {\n  var method,\n    async,\n    sync,\n    retry = 2;\n  for (\"undefined\" != typeof Symbol && (async = Symbol.asyncIterator, sync = Symbol.iterator); retry--;) {\n    if (async && null != (method = iterable[async])) return method.call(iterable);\n    if (sync && null != (method = iterable[sync])) return new AsyncFromSyncIterator(method.call(iterable));\n    async = \"@@asyncIterator\", sync = \"@@iterator\";\n  }\n  throw new TypeError(\"Object is not async iterable\");\n}\nfunction AsyncFromSyncIterator(s) {\n  function AsyncFromSyncIteratorContinuation(r) {\n    if (Object(r) !== r) return Promise.reject(new TypeError(r + \" is not an object.\"));\n    var done = r.done;\n    return Promise.resolve(r.value).then(function (value) {\n      return {\n        value: value,\n        done: done\n      };\n    });\n  }\n  return AsyncFromSyncIterator = function AsyncFromSyncIterator(s) {\n    this.s = s, this.n = s.next;\n  }, AsyncFromSyncIterator.prototype = {\n    s: null,\n    n: null,\n    next: function next() {\n      return AsyncFromSyncIteratorContinuation(this.n.apply(this.s, arguments));\n    },\n    \"return\": function _return(value) {\n      var ret = this.s[\"return\"];\n      return void 0 === ret ? Promise.resolve({\n        value: value,\n        done: !0\n      }) : AsyncFromSyncIteratorContinuation(ret.apply(this.s, arguments));\n    },\n    \"throw\": function _throw(value) {\n      var thr = this.s[\"return\"];\n      return void 0 === thr ? Promise.reject(value) : AsyncFromSyncIteratorContinuation(thr.apply(this.s, arguments));\n    }\n  }, new AsyncFromSyncIterator(s);\n}","/**\n * @param {any} obj\n * @returns {obj is ArrayBufferView|ArrayBuffer}\n */\nexport function isBytes (obj) {\n  return ArrayBuffer.isView(obj) || obj instanceof ArrayBuffer\n}\n\n/**\n * @param {any} obj\n * @returns {obj is globalThis.Blob}\n */\nexport function isBlob (obj) {\n  return obj.constructor &&\n    (obj.constructor.name === 'Blob' || obj.constructor.name === 'File') &&\n    typeof obj.stream === 'function'\n}\n\n/**\n * An object with a path or content property\n *\n * @param {any} obj\n * @returns {obj is import('ipfs-core-types/src/utils').ImportCandidate}\n */\nexport function isFileObject (obj) {\n  return typeof obj === 'object' && (obj.path || obj.content)\n}\n\n/**\n * @param {any} value\n * @returns {value is ReadableStream}\n */\nexport const isReadableStream = (value) =>\n  value && typeof value.getReader === 'function'\n","import errCode from 'err-code'\nimport itPeekable from 'it-peekable'\nimport browserStreamToIt from 'browser-readablestream-to-it'\nimport all from 'it-all'\nimport {\n  isBytes,\n  isBlob,\n  isReadableStream\n} from './utils.js'\n\n/**\n * @param {import('ipfs-core-types/src/utils').ToContent} input\n */\nexport async function normaliseContent (input) {\n  // Bytes\n  if (isBytes(input)) {\n    return new Blob([input])\n  }\n\n  // String\n  if (typeof input === 'string' || input instanceof String) {\n    return new Blob([input.toString()])\n  }\n\n  // Blob | File\n  if (isBlob(input)) {\n    return input\n  }\n\n  // Browser stream\n  if (isReadableStream(input)) {\n    input = browserStreamToIt(input)\n  }\n\n  // (Async)Iterator<?>\n  if (Symbol.iterator in input || Symbol.asyncIterator in input) {\n    /** @type {any} peekable */\n    const peekable = itPeekable(input)\n\n    /** @type {any} value **/\n    const { value, done } = await peekable.peek()\n\n    if (done) {\n      // make sure empty iterators result in empty files\n      return itToBlob(peekable)\n    }\n\n    peekable.push(value)\n\n    // (Async)Iterable<Number>\n    if (Number.isInteger(value)) {\n      return new Blob([Uint8Array.from(await all(peekable))])\n    }\n\n    // (Async)Iterable<Bytes|String>\n    if (isBytes(value) || typeof value === 'string' || value instanceof String) {\n      return itToBlob(peekable)\n    }\n  }\n\n  throw errCode(new Error(`Unexpected input: ${input}`), 'ERR_UNEXPECTED_INPUT')\n}\n\n/**\n * @param {AsyncIterable<BlobPart>|Iterable<BlobPart>} stream\n */\nasync function itToBlob (stream) {\n  const parts = []\n\n  for await (const chunk of stream) {\n    parts.push(chunk)\n  }\n\n  return new Blob(parts)\n}\n","export default function _OverloadYield(value, kind) {\n  this.v = value, this.k = kind;\n}","import OverloadYield from \"./OverloadYield.js\";\nexport default function AsyncGenerator(gen) {\n  var front, back;\n  function resume(key, arg) {\n    try {\n      var result = gen[key](arg),\n        value = result.value,\n        overloaded = value instanceof OverloadYield;\n      Promise.resolve(overloaded ? value.v : value).then(function (arg) {\n        if (overloaded) {\n          var nextKey = \"return\" === key ? \"return\" : \"next\";\n          if (!value.k || arg.done) return resume(nextKey, arg);\n          arg = gen[nextKey](arg).value;\n        }\n        settle(result.done ? \"return\" : \"normal\", arg);\n      }, function (err) {\n        resume(\"throw\", err);\n      });\n    } catch (err) {\n      settle(\"throw\", err);\n    }\n  }\n  function settle(type, value) {\n    switch (type) {\n      case \"return\":\n        front.resolve({\n          value: value,\n          done: !0\n        });\n        break;\n      case \"throw\":\n        front.reject(value);\n        break;\n      default:\n        front.resolve({\n          value: value,\n          done: !1\n        });\n    }\n    (front = front.next) ? resume(front.key, front.arg) : back = null;\n  }\n  this._invoke = function (key, arg) {\n    return new Promise(function (resolve, reject) {\n      var request = {\n        key: key,\n        arg: arg,\n        resolve: resolve,\n        reject: reject,\n        next: null\n      };\n      back ? back = back.next = request : (front = back = request, resume(key, arg));\n    });\n  }, \"function\" != typeof gen[\"return\"] && (this[\"return\"] = void 0);\n}\nAsyncGenerator.prototype[\"function\" == typeof Symbol && Symbol.asyncIterator || \"@@asyncIterator\"] = function () {\n  return this;\n}, AsyncGenerator.prototype.next = function (arg) {\n  return this._invoke(\"next\", arg);\n}, AsyncGenerator.prototype[\"throw\"] = function (arg) {\n  return this._invoke(\"throw\", arg);\n}, AsyncGenerator.prototype[\"return\"] = function (arg) {\n  return this._invoke(\"return\", arg);\n};","import AsyncGenerator from \"./AsyncGenerator.js\";\nexport default function _wrapAsyncGenerator(fn) {\n  return function () {\n    return new AsyncGenerator(fn.apply(this, arguments));\n  };\n}","import OverloadYield from \"./OverloadYield.js\";\nexport default function _awaitAsyncGenerator(value) {\n  return new OverloadYield(value, 0);\n}","import OverloadYield from \"./OverloadYield.js\";\nexport default function _asyncGeneratorDelegate(inner) {\n  var iter = {},\n    waiting = !1;\n  function pump(key, value) {\n    return waiting = !0, value = new Promise(function (resolve) {\n      resolve(inner[key](value));\n    }), {\n      done: !1,\n      value: new OverloadYield(value, 1)\n    };\n  }\n  return iter[\"undefined\" != typeof Symbol && Symbol.iterator || \"@@iterator\"] = function () {\n    return this;\n  }, iter.next = function (value) {\n    return waiting ? (waiting = !1, value) : pump(\"next\", value);\n  }, \"function\" == typeof inner[\"throw\"] && (iter[\"throw\"] = function (value) {\n    if (waiting) throw waiting = !1, value;\n    return pump(\"throw\", value);\n  }), \"function\" == typeof inner[\"return\"] && (iter[\"return\"] = function (value) {\n    return waiting ? (waiting = !1, value) : pump(\"return\", value);\n  }), iter;\n}","import errCode from 'err-code'\nimport browserStreamToIt from 'browser-readablestream-to-it'\nimport itPeekable from 'it-peekable'\nimport map from 'it-map'\nimport {\n  isBytes,\n  isBlob,\n  isReadableStream,\n  isFileObject\n} from './utils.js'\nimport {\n  parseMtime,\n  parseMode\n} from 'ipfs-unixfs'\n\n/**\n * @typedef {import('ipfs-core-types/src/utils').ImportCandidate} ImportCandidate\n * @typedef {import('ipfs-core-types/src/utils').ToContent} ToContent\n * @typedef {import('ipfs-unixfs-importer').ImportCandidate} ImporterImportCandidate\n * @typedef {import('ipfs-core-types/src/utils').ImportCandidateStream} ImportCandidateStream\n */\n\n/**\n * @param {ImportCandidateStream} input\n * @param {(content:ToContent) => Promise<AsyncIterable<Uint8Array>>} normaliseContent\n */\n// eslint-disable-next-line complexity\nexport async function * normaliseCandidateMultiple (input, normaliseContent) {\n  // String\n  // Uint8Array|ArrayBuffer|TypedArray\n  // Blob|File\n  // fs.ReadStream\n  // @ts-expect-error _readableState is a property of a node fs.ReadStream\n  if (typeof input === 'string' || input instanceof String || isBytes(input) || isBlob(input) || input._readableState) {\n    throw errCode(new Error('Unexpected input: single item passed - if you are using ipfs.addAll, please use ipfs.add instead'), 'ERR_UNEXPECTED_INPUT')\n  }\n\n  // Browser ReadableStream\n  if (isReadableStream(input)) {\n    input = browserStreamToIt(input)\n  }\n\n  // Iterable<?>\n  if (Symbol.iterator in input || Symbol.asyncIterator in input) {\n    const peekable = itPeekable(input)\n    const { value, done } = await peekable.peek()\n\n    if (done) {\n      // make sure empty iterators result in empty files\n      yield * []\n      return\n    }\n\n    peekable.push(value)\n\n    // (Async)Iterable<Number>\n    // (Async)Iterable<Bytes>\n    if (Number.isInteger(value)) {\n      throw errCode(new Error('Unexpected input: single item passed - if you are using ipfs.addAll, please use ipfs.add instead'), 'ERR_UNEXPECTED_INPUT')\n    }\n\n    // (Async)Iterable<fs.ReadStream>\n    // @ts-expect-error private field\n    if (value._readableState) {\n      // @ts-expect-error Node fs.ReadStreams have a `.path` property so we need to pass it as the content\n      yield * map(peekable, (/** @type {ImportCandidate} */ value) => toFileObject({ content: value }, normaliseContent))\n      return\n    }\n\n    if (isBytes(value)) {\n      // @ts-expect-error peekable is still an iterable of ImportCandidates\n      yield toFileObject({ content: peekable }, normaliseContent)\n      return\n    }\n\n    // (Async)Iterable<(Async)Iterable<?>>\n    // (Async)Iterable<ReadableStream<?>>\n    // ReadableStream<(Async)Iterable<?>>\n    // ReadableStream<ReadableStream<?>>\n    if (isFileObject(value) || value[Symbol.iterator] || value[Symbol.asyncIterator] || isReadableStream(value) || isBlob(value)) {\n      yield * map(peekable, (/** @type {ImportCandidate} */ value) => toFileObject(value, normaliseContent))\n      return\n    }\n  }\n\n  // { path, content: ? }\n  // Note: Detected _after_ (Async)Iterable<?> because Node.js fs.ReadStreams have a\n  // `path` property that passes this check.\n  if (isFileObject(input)) {\n    throw errCode(new Error('Unexpected input: single item passed - if you are using ipfs.addAll, please use ipfs.add instead'), 'ERR_UNEXPECTED_INPUT')\n  }\n\n  throw errCode(new Error('Unexpected input: ' + typeof input), 'ERR_UNEXPECTED_INPUT')\n}\n\n/**\n * @param {ImportCandidate} input\n * @param {(content:ToContent) => Promise<AsyncIterable<Uint8Array>>} normaliseContent\n */\nasync function toFileObject (input, normaliseContent) {\n  // @ts-expect-error - Those properties don't exist on most input types\n  const { path, mode, mtime, content } = input\n\n  /** @type {ImporterImportCandidate} */\n  const file = {\n    path: path || '',\n    mode: parseMode(mode),\n    mtime: parseMtime(mtime)\n  }\n\n  if (content) {\n    file.content = await normaliseContent(content)\n  } else if (!path) { // Not already a file object with path or content prop\n    // @ts-expect-error - input still can be different ToContent\n    file.content = await normaliseContent(input)\n  }\n\n  return file\n}\n","import { normaliseContent } from './normalise-content.browser.js'\nimport { normaliseCandidateMultiple } from './normalise-candidate-multiple.js'\n\n/**\n * @typedef {import('ipfs-core-types/src/utils').ImportCandidateStream} ImportCandidateStream\n * @typedef {import('ipfs-core-types/src/utils').BrowserImportCandidate} BrowserImportCandidate\n */\n\n/**\n * Transforms any of the `ipfs.addAll` input types into\n *\n * ```\n * AsyncIterable<{ path, mode, mtime, content: Blob }>\n * ```\n *\n * See https://github.com/ipfs/js-ipfs/blob/master/docs/core-api/FILES.md#ipfsadddata-options\n *\n * @param {ImportCandidateStream} input\n * @returns {AsyncGenerator<BrowserImportCandidate, void, undefined>}\n */\nexport function normaliseInput (input) {\n  // @ts-expect-error browser normaliseContent returns a Blob not an AsyncIterable<Uint8Array>\n  return normaliseCandidateMultiple(input, normaliseContent, true)\n}\n","\n/**\n * @param {number | string | undefined} mode\n */\nexport function modeToString (mode) {\n  if (mode == null) {\n    return undefined\n  }\n\n  if (typeof mode === 'string') {\n    return mode\n  }\n\n  return mode.toString(8).padStart(4, '0')\n}\n","\n// Import browser version otherwise electron-renderer will end up with node\n// version and fail.\nimport { normaliseInput } from './files/normalise-input-multiple.browser.js'\nimport { modeToString } from './mode-to-string.js'\n\n/**\n * @typedef {import('ipfs-core-types/src/utils').ImportCandidateStream} ImportCandidateStream\n */\n\n/**\n * @param {ImportCandidateStream} source\n * @param {AbortController} abortController\n * @param {Headers|Record<string, string>} [headers]\n */\nexport async function multipartRequest (source, abortController, headers = {}) {\n  const parts = []\n  const formData = new FormData()\n  let index = 0\n  let total = 0\n\n  for await (const { content, path, mode, mtime } of normaliseInput(source)) {\n    let fileSuffix = ''\n    const type = content ? 'file' : 'dir'\n\n    if (index > 0) {\n      fileSuffix = `-${index}`\n    }\n\n    let fieldName = type + fileSuffix\n    const qs = []\n\n    if (mode !== null && mode !== undefined) {\n      qs.push(`mode=${modeToString(mode)}`)\n    }\n\n    if ((mtime) != null) {\n      const { secs, nsecs } = (mtime)\n\n      qs.push(`mtime=${secs}`)\n\n      if (nsecs != null) {\n        qs.push(`mtime-nsecs=${nsecs}`)\n      }\n    }\n\n    if (qs.length) {\n      fieldName = `${fieldName}?${qs.join('&')}`\n    }\n\n    if (content) {\n      formData.set(fieldName, content, path != null ? encodeURIComponent(path) : undefined)\n      const end = total + content.size\n      parts.push({ name: path, start: total, end })\n      total = end\n    } else if (path != null) {\n      formData.set(fieldName, new File([''], encodeURIComponent(path), { type: 'application/x-directory' }))\n    } else {\n      throw new Error('path or content or both must be set')\n    }\n\n    index++\n  }\n\n  return {\n    total,\n    parts,\n    headers,\n    body: formData\n  }\n}\n","import { anySignal } from 'any-signal'\n\n/**\n * @param {any[]} signals\n * @returns {AbortSignal[]}\n */\nfunction filter (signals) {\n  return signals.filter(Boolean)\n}\n\n/**\n * @param  {...AbortSignal|undefined} signals\n */\nexport function abortSignal (...signals) {\n  return anySignal(filter(signals))\n}\n","import { CID } from 'multiformats/cid'\nimport { multipartRequest } from 'ipfs-core-utils/multipart-request'\nimport { configure } from '../lib/configure.js'\nimport { toUrlSearchParams } from '../lib/to-url-search-params.js'\nimport { abortSignal } from '../lib/abort-signal.js'\n\n/**\n * @typedef {import('../types').HTTPClientExtraOptions} HTTPClientExtraOptions\n * @typedef {import('ipfs-core-types/src/block').API<HTTPClientExtraOptions>} BlockAPI\n */\n\nexport const createPut = configure(api => {\n  /**\n   * @type {BlockAPI[\"put\"]}\n   */\n  async function put (data, options = {}) {\n    // allow aborting requests on body errors\n    const controller = new AbortController()\n    const signal = abortSignal(controller.signal, options.signal)\n\n    let res\n    try {\n      const response = await api.post('block/put', {\n        signal: signal,\n        searchParams: toUrlSearchParams(options),\n        ...(\n          await multipartRequest([data], controller, options.headers)\n        )\n      })\n      res = await response.json()\n    } catch (/** @type {any} */ err) {\n      // Retry with \"protobuf\"/\"cbor\" format for go-ipfs\n      // TODO: remove when https://github.com/ipfs/go-cid/issues/75 resolved\n      if (options.format === 'dag-pb') {\n        return put(data, { ...options, format: 'protobuf' })\n      } else if (options.format === 'dag-cbor') {\n        return put(data, { ...options, format: 'cbor' })\n      }\n\n      throw err\n    }\n\n    return CID.parse(res.Key)\n  }\n\n  return put\n})\n","import { CID } from 'multiformats/cid'\nimport { configure } from '../lib/configure.js'\nimport { toUrlSearchParams } from '../lib/to-url-search-params.js'\n\n/**\n * @typedef {import('../types').HTTPClientExtraOptions} HTTPClientExtraOptions\n * @typedef {import('ipfs-core-types/src/block').API<HTTPClientExtraOptions>} BlockAPI\n * @typedef {import('ipfs-core-types/src/block').RmResult} RmResult\n */\n\nexport const createRm = configure(api => {\n  /**\n   * @type {BlockAPI[\"rm\"]}\n   */\n  async function * rm (cid, options = {}) {\n    if (!Array.isArray(cid)) {\n      cid = [cid]\n    }\n\n    const res = await api.post('block/rm', {\n      signal: options.signal,\n      searchParams: toUrlSearchParams({\n        arg: cid.map(cid => cid.toString()),\n        'stream-channels': true,\n        ...options\n      }),\n      headers: options.headers\n    })\n\n    for await (const removed of res.ndjson()) {\n      yield toCoreInterface(removed)\n    }\n  }\n\n  return rm\n})\n\n/**\n * @param {*} removed\n */\nfunction toCoreInterface (removed) {\n  /** @type {RmResult} */\n  const out = {\n    cid: CID.parse(removed.Hash)\n  }\n\n  if (removed.Error) {\n    out.error = new Error(removed.Error)\n  }\n\n  return out\n}\n","import { CID } from 'multiformats/cid'\nimport { configure } from '../lib/configure.js'\nimport { toUrlSearchParams } from '../lib/to-url-search-params.js'\n\n/**\n * @typedef {import('../types').HTTPClientExtraOptions} HTTPClientExtraOptions\n * @typedef {import('ipfs-core-types/src/block').API<HTTPClientExtraOptions>} BlockAPI\n */\n\nexport const createStat = configure(api => {\n  /**\n   * @type {BlockAPI[\"stat\"]}\n   */\n  async function stat (cid, options = {}) {\n    const res = await api.post('block/stat', {\n      signal: options.signal,\n      searchParams: toUrlSearchParams({\n        arg: cid.toString(),\n        ...options\n      }),\n      headers: options.headers\n    })\n    const data = await res.json()\n\n    return { cid: CID.parse(data.Key), size: data.Size }\n  }\n\n  return stat\n})\n","import { createGet } from './get.js'\nimport { createPut } from './put.js'\nimport { createRm } from './rm.js'\nimport { createStat } from './stat.js'\n\n/**\n * @param {import('../types').Options} config\n */\nexport function createBlock (config) {\n  return {\n    get: createGet(config),\n    put: createPut(config),\n    rm: createRm(config),\n    stat: createStat(config)\n  }\n}\n","import { configure } from '../lib/configure.js'\nimport { toUrlSearchParams } from '../lib/to-url-search-params.js'\nimport { Multiaddr } from '@multiformats/multiaddr'\n\n/**\n * @typedef {import('../types').HTTPClientExtraOptions} HTTPClientExtraOptions\n * @typedef {import('ipfs-core-types/src/bootstrap').API<HTTPClientExtraOptions>} BootstrapAPI\n */\n\nexport const createAdd = configure(api => {\n  /**\n   * @type {BootstrapAPI[\"add\"]}\n   */\n  async function add (addr, options = {}) {\n    const res = await api.post('bootstrap/add', {\n      signal: options.signal,\n      searchParams: toUrlSearchParams({\n        arg: addr,\n        ...options\n      }),\n      headers: options.headers\n    })\n\n    const { Peers } = await res.json()\n\n    return { Peers: Peers.map((/** @type {string} */ ma) => new Multiaddr(ma)) }\n  }\n\n  return add\n})\n","import { configure } from '../lib/configure.js'\nimport { toUrlSearchParams } from '../lib/to-url-search-params.js'\nimport { Multiaddr } from '@multiformats/multiaddr'\n\n/**\n * @typedef {import('../types').HTTPClientExtraOptions} HTTPClientExtraOptions\n * @typedef {import('ipfs-core-types/src/bootstrap').API<HTTPClientExtraOptions>} BootstrapAPI\n */\n\nexport const createClear = configure(api => {\n  /**\n   * @type {BootstrapAPI[\"clear\"]}\n   */\n  async function clear (options = {}) {\n    const res = await api.post('bootstrap/rm', {\n      signal: options.signal,\n      searchParams: toUrlSearchParams({\n        ...options,\n        all: true\n      }),\n      headers: options.headers\n    })\n\n    const { Peers } = await res.json()\n\n    return { Peers: Peers.map((/** @type {string} */ ma) => new Multiaddr(ma)) }\n  }\n\n  return clear\n})\n","import { configure } from '../lib/configure.js'\nimport { toUrlSearchParams } from '../lib/to-url-search-params.js'\nimport { Multiaddr } from '@multiformats/multiaddr'\n\n/**\n * @typedef {import('../types').HTTPClientExtraOptions} HTTPClientExtraOptions\n * @typedef {import('ipfs-core-types/src/bootstrap').API<HTTPClientExtraOptions>} BootstrapAPI\n */\n\nexport const createList = configure(api => {\n  /**\n   * @type {BootstrapAPI[\"list\"]}\n   */\n  async function list (options = {}) {\n    const res = await api.post('bootstrap/list', {\n      signal: options.signal,\n      searchParams: toUrlSearchParams(options),\n      headers: options.headers\n    })\n\n    const { Peers } = await res.json()\n\n    return { Peers: Peers.map((/** @type {string} */ ma) => new Multiaddr(ma)) }\n  }\n\n  return list\n})\n","import { configure } from '../lib/configure.js'\nimport { toUrlSearchParams } from '../lib/to-url-search-params.js'\nimport { Multiaddr } from '@multiformats/multiaddr'\n\n/**\n * @typedef {import('../types').HTTPClientExtraOptions} HTTPClientExtraOptions\n * @typedef {import('ipfs-core-types/src/bootstrap').API<HTTPClientExtraOptions>} BootstrapAPI\n */\n\nexport const createReset = configure(api => {\n  /**\n   * @type {BootstrapAPI[\"reset\"]}\n   */\n  async function reset (options = {}) {\n    const res = await api.post('bootstrap/add', {\n      signal: options.signal,\n      searchParams: toUrlSearchParams({\n        ...options,\n        default: true\n      }),\n      headers: options.headers\n    })\n\n    const { Peers } = await res.json()\n\n    return { Peers: Peers.map((/** @type {string} */ ma) => new Multiaddr(ma)) }\n  }\n\n  return reset\n})\n","import { configure } from '../lib/configure.js'\nimport { toUrlSearchParams } from '../lib/to-url-search-params.js'\nimport { Multiaddr } from '@multiformats/multiaddr'\n\n/**\n * @typedef {import('../types').HTTPClientExtraOptions} HTTPClientExtraOptions\n * @typedef {import('ipfs-core-types/src/bootstrap').API<HTTPClientExtraOptions>} BootstrapAPI\n */\n\nexport const createRm = configure(api => {\n  /**\n   * @type {BootstrapAPI[\"rm\"]}\n   */\n  async function rm (addr, options = {}) {\n    const res = await api.post('bootstrap/rm', {\n      signal: options.signal,\n      searchParams: toUrlSearchParams({\n        arg: addr,\n        ...options\n      }),\n      headers: options.headers\n    })\n\n    const { Peers } = await res.json()\n\n    return { Peers: Peers.map((/** @type {string} */ ma) => new Multiaddr(ma)) }\n  }\n\n  return rm\n})\n","import { createAdd } from './add.js'\nimport { createClear } from './clear.js'\nimport { createList } from './list.js'\nimport { createReset } from './reset.js'\nimport { createRm } from './rm.js'\n\n/**\n * @param {import('../types').Options} config\n */\nexport function createBootstrap (config) {\n  return {\n    add: createAdd(config),\n    clear: createClear(config),\n    list: createList(config),\n    reset: createReset(config),\n    rm: createRm(config)\n  }\n}\n","import { configure } from '../../lib/configure.js'\nimport { toUrlSearchParams } from '../../lib/to-url-search-params.js'\n\n/**\n * @typedef {import('../../types').HTTPClientExtraOptions} HTTPClientExtraOptions\n * @typedef {import('ipfs-core-types/src/config/profiles').API<HTTPClientExtraOptions>} ConfigProfilesAPI\n */\n\nexport const createApply = configure(api => {\n  /**\n   * @type {ConfigProfilesAPI[\"apply\"]}\n   */\n  async function apply (profile, options = {}) {\n    const res = await api.post('config/profile/apply', {\n      signal: options.signal,\n      searchParams: toUrlSearchParams({\n        arg: profile,\n        ...options\n      }),\n      headers: options.headers\n    })\n    const data = await res.json()\n\n    return {\n      original: data.OldCfg, updated: data.NewCfg\n    }\n  }\n\n  return apply\n})\n","\n/**\n * Convert object properties to camel case.\n * NOT recursive!\n * e.g.\n * AgentVersion => agentVersion\n * ID => id\n *\n * @param {Record<string, any>} obj\n */\nexport function objectToCamel (obj) {\n  if (obj == null) {\n    return obj\n  }\n\n  const caps = /^[A-Z]+$/\n\n  /** @type {Record<string, any>} */\n  const output = {}\n\n  return Object.keys(obj).reduce((camelObj, k) => {\n    if (caps.test(k)) { // all caps\n      camelObj[k.toLowerCase()] = obj[k]\n    } else if (caps.test(k[0])) { // pascal\n      camelObj[k[0].toLowerCase() + k.slice(1)] = obj[k]\n    } else {\n      camelObj[k] = obj[k]\n    }\n    return camelObj\n  }, output)\n}\n","import { objectToCamel } from '../../lib/object-to-camel.js'\nimport { configure } from '../../lib/configure.js'\nimport { toUrlSearchParams } from '../../lib/to-url-search-params.js'\n\n/**\n * @typedef {import('../../types').HTTPClientExtraOptions} HTTPClientExtraOptions\n * @typedef {import('ipfs-core-types/src/config/profiles').API<HTTPClientExtraOptions>} ConfigProfilesAPI\n */\n\nexport const createList = configure(api => {\n  /**\n   * @type {ConfigProfilesAPI[\"list\"]}\n   */\n  async function list (options = {}) {\n    const res = await api.post('config/profile/list', {\n      signal: options.signal,\n      searchParams: toUrlSearchParams(options),\n      headers: options.headers\n    })\n\n    const data = await res.json()\n\n    return data.map((/** @type {Record<string, any>} */ profile) => objectToCamel(profile))\n  }\n  return list\n})\n","import { createApply } from './apply.js'\nimport { createList } from './list.js'\n\n/**\n * @param {import('../../types').Options} config\n */\nexport function createProfiles (config) {\n  return {\n    apply: createApply(config),\n    list: createList(config)\n  }\n}\n","import { configure } from '../lib/configure.js'\nimport { toUrlSearchParams } from '../lib/to-url-search-params.js'\n\n/**\n * @typedef {import('../types').HTTPClientExtraOptions} HTTPClientExtraOptions\n * @typedef {import('ipfs-core-types/src/config').API<HTTPClientExtraOptions>} ConfigAPI\n */\n\nexport const createGet = configure(api => {\n  /**\n   * @type {ConfigAPI[\"get\"]}\n   */\n  const get = async (key, options = {}) => {\n    if (!key) {\n      throw new Error('key argument is required')\n    }\n\n    const res = await api.post('config', {\n      signal: options.signal,\n      searchParams: toUrlSearchParams({\n        arg: key,\n        ...options\n      }),\n      headers: options.headers\n    })\n    const data = await res.json()\n\n    return data.Value\n  }\n\n  return get\n})\n","import { configure } from '../lib/configure.js'\nimport { toUrlSearchParams } from '../lib/to-url-search-params.js'\n\n/**\n * @typedef {import('../types').HTTPClientExtraOptions} HTTPClientExtraOptions\n * @typedef {import('ipfs-core-types/src/config').API<HTTPClientExtraOptions>} ConfigAPI\n */\n\nexport const createGetAll = configure(api => {\n  /**\n   * @type {ConfigAPI[\"getAll\"]}\n   */\n  const getAll = async (options = {}) => {\n    const res = await api.post('config/show', {\n      signal: options.signal,\n      searchParams: toUrlSearchParams({\n        ...options\n      }),\n      headers: options.headers\n    })\n    const data = await res.json()\n\n    return data\n  }\n\n  return getAll\n})\n","import { fromString as uint8ArrayFromString } from 'uint8arrays/from-string'\nimport { multipartRequest } from 'ipfs-core-utils/multipart-request'\nimport { configure } from '../lib/configure.js'\nimport { toUrlSearchParams } from '../lib/to-url-search-params.js'\nimport { abortSignal } from '../lib/abort-signal.js'\n\n/**\n * @typedef {import('../types').HTTPClientExtraOptions} HTTPClientExtraOptions\n * @typedef {import('ipfs-core-types/src/config').API<HTTPClientExtraOptions>} ConfigAPI\n */\n\nexport const createReplace = configure(api => {\n  /**\n   * @type {ConfigAPI[\"replace\"]}\n   */\n  const replace = async (config, options = {}) => {\n    // allow aborting requests on body errors\n    const controller = new AbortController()\n    const signal = abortSignal(controller.signal, options.signal)\n\n    const res = await api.post('config/replace', {\n      signal,\n      searchParams: toUrlSearchParams(options),\n      ...(\n        await multipartRequest([uint8ArrayFromString(JSON.stringify(config))], controller, options.headers)\n      )\n    })\n\n    await res.text()\n  }\n\n  return replace\n})\n","import { configure } from '../lib/configure.js'\nimport { toUrlSearchParams } from '../lib/to-url-search-params.js'\n\n/**\n * @typedef {import('../types').HTTPClientExtraOptions} HTTPClientExtraOptions\n * @typedef {import('ipfs-core-types/src/config').API<HTTPClientExtraOptions>} ConfigAPI\n */\n\nexport const createSet = configure(api => {\n  /**\n   * @type {ConfigAPI[\"set\"]}\n   */\n  const set = async (key, value, options = {}) => {\n    if (typeof key !== 'string') {\n      throw new Error('Invalid key type')\n    }\n\n    const params = {\n      ...options,\n      ...encodeParam(key, value)\n    }\n\n    const res = await api.post('config', {\n      signal: options.signal,\n      searchParams: toUrlSearchParams(params),\n      headers: options.headers\n    })\n\n    await res.text()\n  }\n\n  return set\n})\n\n/**\n * @param {*} key\n * @param {*} value\n */\nconst encodeParam = (key, value) => {\n  switch (typeof value) {\n    case 'boolean':\n      return { arg: [key, value.toString()], bool: true }\n    case 'string':\n      return { arg: [key, value] }\n    default:\n      return { arg: [key, JSON.stringify(value)], json: true }\n  }\n}\n","import { createProfiles } from './profiles/index.js'\nimport { createGet } from './get.js'\nimport { createGetAll } from './get-all.js'\nimport { createReplace } from './replace.js'\nimport { createSet } from './set.js'\n\n/**\n * @param {import('../types').Options} config\n */\nexport function createConfig (config) {\n  return {\n    getAll: createGetAll(config),\n    get: createGet(config),\n    set: createSet(config),\n    replace: createReplace(config),\n    profiles: createProfiles(config)\n  }\n}\n","import { configure } from '../lib/configure.js'\nimport { toUrlSearchParams } from '../lib/to-url-search-params.js'\n\n/**\n * @typedef {import('../types').HTTPClientExtraOptions} HTTPClientExtraOptions\n * @typedef {import('ipfs-core-types/src/dag').API<HTTPClientExtraOptions>} DAGAPI\n */\n\nexport const createExport = configure(api => {\n  /**\n   * @type {DAGAPI[\"export\"]}\n   */\n  async function * dagExport (root, options = {}) {\n    const res = await api.post('dag/export', {\n      signal: options.signal,\n      searchParams: toUrlSearchParams({\n        arg: root.toString()\n      }),\n      headers: options.headers\n    })\n\n    yield * res.iterator()\n  }\n\n  return dagExport\n})\n","import { CID } from 'multiformats/cid'\nimport errCode from 'err-code'\n\n/**\n * @typedef {import('ipfs-core-types/src/utils').AbortOptions} AbortOptions\n */\n\n/**\n * Retrieves IPLD Nodes along the `path` that is rooted at `cid`.\n *\n * @param {CID} cid - the CID where the resolving starts\n * @param {string} path - the path that should be resolved\n * @param {import('ipfs-core-utils/multicodecs').Multicodecs} codecs\n * @param {(cid: CID, options?: AbortOptions) => Promise<Uint8Array>} getBlock\n * @param {AbortOptions} [options]\n */\nexport async function * resolve (cid, path, codecs, getBlock, options) {\n  /**\n   * @param {CID} cid\n   */\n  const load = async (cid) => {\n    const codec = await codecs.getCodec(cid.code)\n    const block = await getBlock(cid, options)\n\n    return codec.decode(block)\n  }\n\n  const parts = path.split('/').filter(Boolean)\n  let value = await load(cid)\n  let lastCid = cid\n\n  // End iteration if there isn't a CID to follow any more\n  while (parts.length) {\n    const key = parts.shift()\n\n    if (!key) {\n      throw errCode(new Error(`Could not resolve path \"${path}\"`), 'ERR_INVALID_PATH')\n    }\n\n    if (Object.prototype.hasOwnProperty.call(value, key)) {\n      value = value[key]\n\n      yield {\n        value,\n        remainderPath: parts.join('/')\n      }\n    } else {\n      throw errCode(new Error(`no link named \"${key}\" under ${lastCid}`), 'ERR_NO_LINK')\n    }\n\n    const cid = CID.asCID(value)\n\n    if (cid) {\n      lastCid = cid\n      value = await load(value)\n    }\n  }\n\n  yield {\n    value,\n    remainderPath: ''\n  }\n}\n","import { configure } from '../lib/configure.js'\nimport { resolve } from '../lib/resolve.js'\nimport first from 'it-first'\nimport last from 'it-last'\nimport errCode from 'err-code'\nimport { createGet as createBlockGet } from '../block/get.js'\n\n/**\n * @typedef {import('../types').HTTPClientExtraOptions} HTTPClientExtraOptions\n * @typedef {import('ipfs-core-types/src/dag').API<HTTPClientExtraOptions>} DAGAPI\n */\n\n/**\n * @param {import('ipfs-core-utils/multicodecs').Multicodecs} codecs\n * @param {import('../types').Options} options\n */\nexport const createGet = (codecs, options) => {\n  const fn = configure((api, opts) => {\n    const getBlock = createBlockGet(opts)\n\n    /**\n     * @type {DAGAPI[\"get\"]}\n     */\n    const get = async (cid, options = {}) => {\n      if (options.path) {\n        const entry = options.localResolve\n          ? await first(resolve(cid, options.path, codecs, getBlock, options))\n          : await last(resolve(cid, options.path, codecs, getBlock, options))\n        /** @type {import('ipfs-core-types/src/dag').GetResult | undefined} - first and last will return undefined when empty */\n        const result = (entry)\n\n        if (!result) {\n          throw errCode(new Error('Not found'), 'ERR_NOT_FOUND')\n        }\n\n        return result\n      }\n\n      const codec = await codecs.getCodec(cid.code)\n      const block = await getBlock(cid, options)\n      const node = codec.decode(block)\n\n      return {\n        value: node,\n        remainderPath: ''\n      }\n    }\n\n    return get\n  })\n\n  return fn(options)\n}\n","import { configure } from '../lib/configure.js'\nimport { toUrlSearchParams } from '../lib/to-url-search-params.js'\nimport { abortSignal } from '../lib/abort-signal.js'\nimport { multipartRequest } from 'ipfs-core-utils/multipart-request'\nimport { CID } from 'multiformats/cid'\n\n/**\n * @typedef {import('../types').HTTPClientExtraOptions} HTTPClientExtraOptions\n * @typedef {import('ipfs-core-types/src/dag').API<HTTPClientExtraOptions>} DAGAPI\n */\n\nexport const createImport = configure(api => {\n  /**\n   * @type {DAGAPI[\"import\"]}\n   */\n  async function * dagImport (source, options = {}) {\n    const controller = new AbortController()\n    const signal = abortSignal(controller.signal, options.signal)\n    const { headers, body } = await multipartRequest(source, controller, options.headers)\n\n    const res = await api.post('dag/import', {\n      signal,\n      headers,\n      body,\n      searchParams: toUrlSearchParams({ 'pin-roots': options.pinRoots })\n    })\n\n    for await (const { Root } of res.ndjson()) {\n      if (Root !== undefined) {\n        const { Cid: { '/': Cid }, PinErrorMsg } = Root\n\n        yield {\n          root: {\n            cid: CID.parse(Cid),\n            pinErrorMsg: PinErrorMsg\n          }\n        }\n      }\n    }\n  }\n\n  return dagImport\n})\n","import { CID } from 'multiformats/cid'\nimport { configure } from '../lib/configure.js'\nimport { multipartRequest } from 'ipfs-core-utils/multipart-request'\nimport { toUrlSearchParams } from '../lib/to-url-search-params.js'\nimport { abortSignal } from '../lib/abort-signal.js'\n\n/**\n * @typedef {import('../types').HTTPClientExtraOptions} HTTPClientExtraOptions\n * @typedef {import('ipfs-core-types/src/dag').API<HTTPClientExtraOptions>} DAGAPI\n */\n\n/**\n * @param {import('ipfs-core-utils/multicodecs').Multicodecs} codecs\n * @param {import('../types').Options} options\n */\nexport const createPut = (codecs, options) => {\n  const fn = configure((api) => {\n    /**\n     * @type {DAGAPI[\"put\"]}\n     */\n    const put = async (dagNode, options = {}) => {\n      const settings = {\n        storeCodec: 'dag-cbor',\n        hashAlg: 'sha2-256',\n        ...options\n      }\n\n      let serialized\n\n      if (settings.inputCodec) {\n        // if you supply an inputCodec, we assume you're passing in a raw, encoded\n        // block using that codec, so we'll just pass that on to the server and let\n        // it deal with the decode/encode/store cycle\n        if (!(dagNode instanceof Uint8Array)) {\n          throw new Error('Can only inputCodec on raw bytes that can be decoded')\n        }\n        serialized = dagNode\n      } else {\n        // if you don't supply an inputCodec, we assume you've passed in a JavaScript\n        // object you want to have encoded using storeCodec, so we'll prepare it for\n        // you if we have the codec\n        const storeCodec = await codecs.getCodec(settings.storeCodec)\n        serialized = storeCodec.encode(dagNode)\n        // now we have a serialized form, the server should be told to receive it\n        // in that format\n        settings.inputCodec = settings.storeCodec\n      }\n\n      // allow aborting requests on body errors\n      const controller = new AbortController()\n      const signal = abortSignal(controller.signal, settings.signal)\n\n      const res = await api.post('dag/put', {\n        timeout: settings.timeout,\n        signal,\n        searchParams: toUrlSearchParams(settings),\n        ...(\n          await multipartRequest([serialized], controller, settings.headers)\n        )\n      })\n      const data = await res.json()\n\n      return CID.parse(data.Cid['/'])\n    }\n\n    return put\n  })\n\n  return fn(options)\n}\n","import { CID } from 'multiformats/cid'\nimport { configure } from '../lib/configure.js'\nimport { toUrlSearchParams } from '../lib/to-url-search-params.js'\n\n/**\n * @typedef {import('../types').HTTPClientExtraOptions} HTTPClientExtraOptions\n * @typedef {import('ipfs-core-types/src/dag').API<HTTPClientExtraOptions>} DAGAPI\n */\n\nexport const createResolve = configure(api => {\n  /**\n   * @type {DAGAPI[\"resolve\"]}\n   */\n  const resolve = async (ipfsPath, options = {}) => {\n    const res = await api.post('dag/resolve', {\n      signal: options.signal,\n      searchParams: toUrlSearchParams({\n        arg: `${ipfsPath}${options.path ? `/${options.path}`.replace(/\\/[/]+/g, '/') : ''}`,\n        ...options\n      }),\n      headers: options.headers\n    })\n\n    const data = await res.json()\n\n    return { cid: CID.parse(data.Cid['/']), remainderPath: data.RemPath }\n  }\n\n  return resolve\n})\n","import { createExport } from './export.js'\nimport { createGet } from './get.js'\nimport { createImport } from './import.js'\nimport { createPut } from './put.js'\nimport { createResolve } from './resolve.js'\n\n/**\n * @param {import('ipfs-core-utils/multicodecs').Multicodecs} codecs\n * @param {import('../types').Options} config\n */\nexport function createDag (codecs, config) {\n  return {\n    export: createExport(config),\n    get: createGet(codecs, config),\n    import: createImport(config),\n    put: createPut(codecs, config),\n    resolve: createResolve(config)\n  }\n}\n","\n// Response types are defined here =\n// https://github.com/libp2p/go-libp2p-core/blob/6e566d10f4a5447317a66d64c7459954b969bdab/routing/query.go#L15-L24\nexport const SendingQuery = 0\nexport const PeerResponse = 1\nexport const FinalPeer = 2\nexport const QueryError = 3\nexport const Provider = 4\nexport const Value = 5\nexport const AddingPeer = 6\nexport const DialingPeer = 7\n","import { fromString as uint8ArrayFromString } from 'uint8arrays/from-string'\nimport {\n  SendingQuery,\n  PeerResponse,\n  FinalPeer,\n  QueryError,\n  Provider,\n  Value,\n  AddingPeer,\n  DialingPeer\n} from './response-types.js'\nimport { Multiaddr } from '@multiformats/multiaddr'\nimport { peerIdFromString } from '@libp2p/peer-id'\n\n/**\n * @typedef {import('@libp2p/interfaces/peer-id').PeerId} PeerId\n */\n\n/**\n * @param {{Type: number, ID: string, Extra: string, Responses: {ID: string, Addrs: string[]}[]}} event\n * @returns {import('ipfs-core-types/src/dht').QueryEvent}\n */\nexport const mapEvent = (event) => {\n  if (event.Type === SendingQuery) {\n    return {\n      name: 'SENDING_QUERY',\n      type: event.Type\n    }\n  }\n\n  if (event.Type === PeerResponse) {\n    return {\n      from: peerIdFromString(event.ID),\n      name: 'PEER_RESPONSE',\n      type: event.Type,\n      // TODO: how to infer this from the go-ipfs response\n      messageType: 0,\n      // TODO: how to infer this from the go-ipfs response\n      messageName: 'PUT_VALUE',\n      closer: (event.Responses || []).map(({ ID, Addrs }) => ({ id: peerIdFromString(ID), multiaddrs: Addrs.map(addr => new Multiaddr(addr)), protocols: [] })),\n      providers: (event.Responses || []).map(({ ID, Addrs }) => ({ id: peerIdFromString(ID), multiaddrs: Addrs.map(addr => new Multiaddr(addr)), protocols: [] }))\n      // TODO: how to infer this from the go-ipfs response\n      // record: ???\n    }\n  }\n\n  if (event.Type === FinalPeer) {\n    // dht.query ends with a FinalPeer event with no Responses\n    /** @type {import('@libp2p/interfaces/peer-info').PeerInfo} */\n    let peer = {\n      // @ts-expect-error go-ipfs does not return this\n      id: event.ID ?? peerIdFromString(event.ID),\n      /** @type {Multiaddr[]} */\n      multiaddrs: [],\n      protocols: []\n    }\n\n    if (event.Responses && event.Responses.length) {\n      // dht.findPeer has the result in the Responses field\n      peer = {\n        id: peerIdFromString(event.Responses[0].ID),\n        multiaddrs: event.Responses[0].Addrs.map(addr => new Multiaddr(addr)),\n        protocols: []\n      }\n    }\n\n    return {\n      name: 'FINAL_PEER',\n      type: event.Type,\n      peer\n    }\n  }\n\n  if (event.Type === QueryError) {\n    return {\n      name: 'QUERY_ERROR',\n      type: event.Type,\n      error: new Error(event.Extra)\n    }\n  }\n\n  if (event.Type === Provider) {\n    return {\n      name: 'PROVIDER',\n      type: event.Type,\n      providers: event.Responses.map(({ ID, Addrs }) => ({ id: peerIdFromString(ID), multiaddrs: Addrs.map(addr => new Multiaddr(addr)), protocols: [] }))\n    }\n  }\n\n  if (event.Type === Value) {\n    return {\n      name: 'VALUE',\n      type: event.Type,\n      value: uint8ArrayFromString(event.Extra, 'base64pad')\n    }\n  }\n\n  if (event.Type === AddingPeer) {\n    const peers = event.Responses.map(({ ID }) => peerIdFromString(ID))\n\n    if (!peers.length) {\n      throw new Error('No peer found')\n    }\n\n    return {\n      name: 'ADDING_PEER',\n      type: event.Type,\n      peer: peers[0]\n    }\n  }\n\n  if (event.Type === DialingPeer) {\n    return {\n      name: 'DIALING_PEER',\n      type: event.Type,\n      peer: peerIdFromString(event.ID)\n    }\n  }\n\n  throw new Error('Unknown DHT event type')\n}\n","import { configure } from '../lib/configure.js'\nimport { toUrlSearchParams } from '../lib/to-url-search-params.js'\nimport { mapEvent } from './map-event.js'\n\n/**\n * @typedef {import('../types').HTTPClientExtraOptions} HTTPClientExtraOptions\n * @typedef {import('ipfs-core-types/src/dht').API<HTTPClientExtraOptions>} DHTAPI\n */\n\nexport const createFindPeer = configure(api => {\n  /**\n   * @type {DHTAPI[\"findPeer\"]}\n   */\n  async function * findPeer (peerId, options = {}) {\n    const res = await api.post('dht/findpeer', {\n      signal: options.signal,\n      searchParams: toUrlSearchParams({\n        arg: peerId,\n        ...options\n      }),\n      headers: options.headers\n    })\n\n    for await (const event of res.ndjson()) {\n      yield mapEvent(event)\n    }\n  }\n\n  return findPeer\n})\n","import { configure } from '../lib/configure.js'\nimport { toUrlSearchParams } from '../lib/to-url-search-params.js'\nimport { mapEvent } from './map-event.js'\n\n/**\n * @typedef {import('../types').HTTPClientExtraOptions} HTTPClientExtraOptions\n * @typedef {import('ipfs-core-types/src/dht').API<HTTPClientExtraOptions>} DHTAPI\n */\n\nexport const createFindProvs = configure(api => {\n  /**\n   * @type {DHTAPI[\"findProvs\"]}\n   */\n  async function * findProvs (cid, options = {}) {\n    const res = await api.post('dht/findprovs', {\n      signal: options.signal,\n      searchParams: toUrlSearchParams({\n        arg: cid.toString(),\n        ...options\n      }),\n      headers: options.headers\n    })\n\n    for await (const event of res.ndjson()) {\n      yield mapEvent(event)\n    }\n  }\n\n  return findProvs\n})\n","import { configure } from '../lib/configure.js'\nimport { toUrlSearchParams } from '../lib/to-url-search-params.js'\nimport { mapEvent } from './map-event.js'\nimport { toString as uint8ArrayToString } from 'uint8arrays/to-string'\n\n/**\n * @typedef {import('../types').HTTPClientExtraOptions} HTTPClientExtraOptions\n * @typedef {import('ipfs-core-types/src/dht').API<HTTPClientExtraOptions>} DHTAPI\n */\n\nexport const createGet = configure(api => {\n  /**\n   * @type {DHTAPI[\"get\"]}\n   */\n  async function * get (key, options = {}) {\n    const res = await api.post('dht/get', {\n      signal: options.signal,\n      searchParams: toUrlSearchParams({\n        // arg: base36.encode(key),\n        arg: key instanceof Uint8Array ? uint8ArrayToString(key) : key.toString(),\n        ...options\n      }),\n      headers: options.headers\n    })\n\n    for await (const event of res.ndjson()) {\n      yield mapEvent(event)\n    }\n  }\n\n  return get\n})\n","import { configure } from '../lib/configure.js'\nimport { toUrlSearchParams } from '../lib/to-url-search-params.js'\nimport { mapEvent } from './map-event.js'\n\n/**\n * @typedef {import('../types').HTTPClientExtraOptions} HTTPClientExtraOptions\n * @typedef {import('ipfs-core-types/src/dht').API<HTTPClientExtraOptions>} DHTAPI\n * @typedef {import('multiformats/cid').CID} CID\n */\n\nexport const createProvide = configure(api => {\n  /**\n   * @type {DHTAPI[\"provide\"]}\n   */\n  async function * provide (cids, options = { recursive: false }) {\n    /** @type {CID[]} */\n    const cidArr = Array.isArray(cids) ? cids : [cids]\n\n    const res = await api.post('dht/provide', {\n      signal: options.signal,\n      searchParams: toUrlSearchParams({\n        arg: cidArr.map(cid => cid.toString()),\n        ...options\n      }),\n      headers: options.headers\n    })\n\n    for await (const event of res.ndjson()) {\n      yield mapEvent(event)\n    }\n  }\n\n  return provide\n})\n","import { configure } from '../lib/configure.js'\nimport { toUrlSearchParams } from '../lib/to-url-search-params.js'\nimport { multipartRequest } from 'ipfs-core-utils/multipart-request'\nimport { abortSignal } from '../lib/abort-signal.js'\nimport { toString as uint8ArrayToString } from 'uint8arrays/to-string'\nimport { mapEvent } from './map-event.js'\n\n/**\n * @typedef {import('../types').HTTPClientExtraOptions} HTTPClientExtraOptions\n * @typedef {import('ipfs-core-types/src/dht').API<HTTPClientExtraOptions>} DHTAPI\n */\n\nexport const createPut = configure(api => {\n  /**\n   * @type {DHTAPI[\"put\"]}\n   */\n  async function * put (key, value, options = {}) {\n    // allow aborting requests on body errors\n    const controller = new AbortController()\n    const signal = abortSignal(controller.signal, options.signal)\n\n    const res = await api.post('dht/put', {\n      signal,\n      searchParams: toUrlSearchParams({\n        arg: key instanceof Uint8Array ? uint8ArrayToString(key) : key.toString(),\n        ...options\n      }),\n      ...(\n        await multipartRequest([value], controller, options.headers)\n      )\n    })\n\n    for await (const event of res.ndjson()) {\n      yield mapEvent(event)\n    }\n  }\n\n  return put\n})\n","import { configure } from '../lib/configure.js'\nimport { toUrlSearchParams } from '../lib/to-url-search-params.js'\nimport { mapEvent } from './map-event.js'\n\n/**\n * @typedef {import('../types').HTTPClientExtraOptions} HTTPClientExtraOptions\n * @typedef {import('ipfs-core-types/src/dht').API<HTTPClientExtraOptions>} DHTAPI\n */\n\nexport const createQuery = configure(api => {\n  /**\n   * @type {DHTAPI[\"query\"]}\n   */\n  async function * query (peerId, options = {}) {\n    const res = await api.post('dht/query', {\n      signal: options.signal,\n      searchParams: toUrlSearchParams({\n        arg: peerId.toString(),\n        ...options\n      }),\n      headers: options.headers\n    })\n\n    for await (const event of res.ndjson()) {\n      yield mapEvent(event)\n    }\n  }\n\n  return query\n})\n","import { createFindPeer } from './find-peer.js'\nimport { createFindProvs } from './find-provs.js'\nimport { createGet } from './get.js'\nimport { createProvide } from './provide.js'\nimport { createPut } from './put.js'\nimport { createQuery } from './query.js'\n\n/**\n * @param {import('../types').Options} config\n */\nexport function createDht (config) {\n  return {\n    findPeer: createFindPeer(config),\n    findProvs: createFindProvs(config),\n    get: createGet(config),\n    provide: createProvide(config),\n    put: createPut(config),\n    query: createQuery(config)\n  }\n}\n","import { configure } from '../lib/configure.js'\nimport { toUrlSearchParams } from '../lib/to-url-search-params.js'\n\n/**\n * @typedef {import('../types').HTTPClientExtraOptions} HTTPClientExtraOptions\n * @typedef {import('ipfs-core-types/src/diag').API<HTTPClientExtraOptions>} DiagAPI\n */\n\nexport const createCmds = configure(api => {\n  /**\n   * @type {DiagAPI[\"cmds\"]}\n   */\n  async function cmds (options = {}) {\n    const res = await api.post('diag/cmds', {\n      signal: options.signal,\n      searchParams: toUrlSearchParams(options),\n      headers: options.headers\n    })\n\n    return res.json()\n  }\n  return cmds\n})\n","import { configure } from '../lib/configure.js'\nimport { toUrlSearchParams } from '../lib/to-url-search-params.js'\n\n/**\n * @typedef {import('../types').HTTPClientExtraOptions} HTTPClientExtraOptions\n * @typedef {import('ipfs-core-types/src/diag').API<HTTPClientExtraOptions>} DiagAPI\n */\n\nexport const createNet = configure(api => {\n  /**\n   * @type {DiagAPI[\"net\"]}\n   */\n  async function net (options = {}) {\n    const res = await api.post('diag/net', {\n      signal: options.signal,\n      searchParams: toUrlSearchParams(options),\n      headers: options.headers\n    })\n    return res.json()\n  }\n  return net\n})\n","import { configure } from '../lib/configure.js'\nimport { toUrlSearchParams } from '../lib/to-url-search-params.js'\n\n/**\n * @typedef {import('../types').HTTPClientExtraOptions} HTTPClientExtraOptions\n * @typedef {import('ipfs-core-types/src/diag').API<HTTPClientExtraOptions>} DiagAPI\n */\n\nexport const createSys = configure(api => {\n  /**\n   * @type {DiagAPI[\"sys\"]}\n   */\n  async function sys (options = {}) {\n    const res = await api.post('diag/sys', {\n      signal: options.signal,\n      searchParams: toUrlSearchParams(options),\n      headers: options.headers\n    })\n\n    return res.json()\n  }\n  return sys\n})\n","import { createCmds } from './cmds.js'\nimport { createNet } from './net.js'\nimport { createSys } from './sys.js'\n\n/**\n * @param {import('../types').Options} config\n */\nexport function createDiag (config) {\n  return {\n    cmds: createCmds(config),\n    net: createNet(config),\n    sys: createSys(config)\n  }\n}\n","import { configure } from '../lib/configure.js'\nimport { toUrlSearchParams } from '../lib/to-url-search-params.js'\n\n/**\n * @typedef {import('../types').HTTPClientExtraOptions} HTTPClientExtraOptions\n * @typedef {import('ipfs-core-types/src/files').API<HTTPClientExtraOptions>} FilesAPI\n */\n\nexport const createChmod = configure(api => {\n  /**\n   * @type {FilesAPI[\"chmod\"]}\n   */\n  async function chmod (path, mode, options = {}) {\n    const res = await api.post('files/chmod', {\n      signal: options.signal,\n      searchParams: toUrlSearchParams({\n        arg: path,\n        mode,\n        ...options\n      }),\n      headers: options.headers\n    })\n\n    await res.text()\n  }\n  return chmod\n})\n","import { CID } from 'multiformats/cid'\nimport { configure } from '../lib/configure.js'\nimport { toUrlSearchParams } from '../lib/to-url-search-params.js'\n\n/**\n * @typedef {import('../types').HTTPClientExtraOptions} HTTPClientExtraOptions\n * @typedef {import('ipfs-core-types/src/files').API<HTTPClientExtraOptions>} FilesAPI\n */\n\nexport const createCp = configure(api => {\n  /**\n   * @type {FilesAPI[\"cp\"]}\n   */\n  async function cp (sources, destination, options = {}) {\n    /** @type {import('ipfs-core-types/src/utils').IPFSPath[]} */\n    const sourceArr = Array.isArray(sources) ? sources : [sources]\n\n    const res = await api.post('files/cp', {\n      signal: options.signal,\n      searchParams: toUrlSearchParams({\n        arg: sourceArr.concat(destination).map(src => CID.asCID(src) ? `/ipfs/${src}` : src),\n        ...options\n      }),\n      headers: options.headers\n    })\n\n    await res.text()\n  }\n  return cp\n})\n","import { CID } from 'multiformats/cid'\nimport { configure } from '../lib/configure.js'\nimport { toUrlSearchParams } from '../lib/to-url-search-params.js'\n\n/**\n * @typedef {import('../types').HTTPClientExtraOptions} HTTPClientExtraOptions\n * @typedef {import('ipfs-core-types/src/files').API<HTTPClientExtraOptions>} FilesAPI\n */\n\nexport const createFlush = configure(api => {\n  /**\n   * @type {FilesAPI[\"flush\"]}\n   */\n  async function flush (path, options = {}) {\n    if (!path || typeof path !== 'string') {\n      throw new Error('ipfs.files.flush requires a path')\n    }\n\n    const res = await api.post('files/flush', {\n      signal: options.signal,\n      searchParams: toUrlSearchParams({\n        arg: path,\n        ...options\n      }),\n      headers: options.headers\n    })\n    const data = await res.json()\n\n    return CID.parse(data.Cid)\n  }\n  return flush\n})\n","import { objectToCamel } from './object-to-camel.js'\n\n/**\n * @param {Record<string, any>} entry\n */\nexport function objectToCamelWithMetadata (entry) {\n  const file = objectToCamel(entry)\n\n  if (Object.prototype.hasOwnProperty.call(file, 'mode')) {\n    file.mode = parseInt(file.mode, 8)\n  }\n\n  if (Object.prototype.hasOwnProperty.call(file, 'mtime')) {\n    file.mtime = {\n      secs: file.mtime,\n      nsecs: file.mtimeNsecs || 0\n    }\n\n    delete file.mtimeNsecs\n  }\n\n  return file\n}\n","import { CID } from 'multiformats/cid'\nimport { objectToCamelWithMetadata } from '../lib/object-to-camel-with-metadata.js'\nimport { configure } from '../lib/configure.js'\nimport { toUrlSearchParams } from '../lib/to-url-search-params.js'\n\n/**\n * @typedef {import('../types').HTTPClientExtraOptions} HTTPClientExtraOptions\n * @typedef {import('ipfs-core-types/src/files').API<HTTPClientExtraOptions>} FilesAPI\n */\nexport const createLs = configure(api => {\n  /**\n   * @type {FilesAPI[\"ls\"]}\n   */\n  async function * ls (path, options = {}) {\n    if (!path) {\n      throw new Error('ipfs.files.ls requires a path')\n    }\n\n    const res = await api.post('files/ls', {\n      signal: options.signal,\n      searchParams: toUrlSearchParams({\n        arg: CID.asCID(path) ? `/ipfs/${path}` : path,\n        // default long to true, diverges from go-ipfs where its false by default\n        long: true,\n        ...options,\n        stream: true\n      }),\n      headers: options.headers\n    })\n\n    for await (const result of res.ndjson()) {\n      // go-ipfs does not yet support the \"stream\" option\n      if ('Entries' in result) {\n        for (const entry of result.Entries || []) {\n          yield toCoreInterface(objectToCamelWithMetadata(entry))\n        }\n      } else {\n        yield toCoreInterface(objectToCamelWithMetadata(result))\n      }\n    }\n  }\n  return ls\n})\n\n/**\n * @param {*} entry\n */\nfunction toCoreInterface (entry) {\n  if (entry.hash) {\n    entry.cid = CID.parse(entry.hash)\n  }\n\n  delete entry.hash\n\n  entry.type = entry.type === 1 ? 'directory' : 'file'\n\n  return entry\n}\n","import { configure } from '../lib/configure.js'\nimport { toUrlSearchParams } from '../lib/to-url-search-params.js'\n\n/**\n * @typedef {import('../types').HTTPClientExtraOptions} HTTPClientExtraOptions\n * @typedef {import('ipfs-core-types/src/files').API<HTTPClientExtraOptions>} FilesAPI\n */\n\nexport const createMkdir = configure(api => {\n  /**\n   * @type {FilesAPI[\"mkdir\"]}\n   */\n  async function mkdir (path, options = {}) {\n    const res = await api.post('files/mkdir', {\n      signal: options.signal,\n      searchParams: toUrlSearchParams({\n        arg: path,\n        ...options\n      }),\n      headers: options.headers\n    })\n\n    await res.text()\n  }\n  return mkdir\n})\n","import { configure } from '../lib/configure.js'\nimport { toUrlSearchParams } from '../lib/to-url-search-params.js'\n\n/**\n * @typedef {import('../types').HTTPClientExtraOptions} HTTPClientExtraOptions\n * @typedef {import('ipfs-core-types/src/files').API<HTTPClientExtraOptions>} FilesAPI\n */\n\nexport const createMv = configure(api => {\n  /**\n   * @type {FilesAPI[\"mv\"]}\n   */\n  async function mv (sources, destination, options = {}) {\n    if (!Array.isArray(sources)) {\n      sources = [sources]\n    }\n\n    const res = await api.post('files/mv', {\n      signal: options.signal,\n      searchParams: toUrlSearchParams({\n        arg: sources.concat(destination),\n        ...options\n      }),\n      headers: options.headers\n    })\n    await res.text()\n  }\n\n  return mv\n})\n","import { configure } from '../lib/configure.js'\nimport { toUrlSearchParams } from '../lib/to-url-search-params.js'\n// @ts-expect-error no types\nimport toIterable from 'stream-to-it/source.js'\n\n/**\n * @typedef {import('../types').HTTPClientExtraOptions} HTTPClientExtraOptions\n * @typedef {import('ipfs-core-types/src/files').API<HTTPClientExtraOptions>} FilesAPI\n */\n\nexport const createRead = configure(api => {\n  /**\n   * @type {FilesAPI[\"read\"]}\n   */\n  async function * read (path, options = {}) {\n    const res = await api.post('files/read', {\n      signal: options.signal,\n      searchParams: toUrlSearchParams({\n        arg: path,\n        count: options.length,\n        ...options\n      }),\n      headers: options.headers\n    })\n\n    yield * toIterable(res.body)\n  }\n  return read\n})\n","import { configure } from '../lib/configure.js'\nimport { toUrlSearchParams } from '../lib/to-url-search-params.js'\nimport HTTP from 'ipfs-utils/src/http.js'\n\n/**\n * @typedef {import('../types').HTTPClientExtraOptions} HTTPClientExtraOptions\n * @typedef {import('ipfs-core-types/src/files').API<HTTPClientExtraOptions>} FilesAPI\n */\n\nexport const createRm = configure(api => {\n  /**\n   * @type {FilesAPI[\"rm\"]}\n   */\n  async function rm (path, options = {}) {\n    const res = await api.post('files/rm', {\n      signal: options.signal,\n      searchParams: toUrlSearchParams({\n        arg: path,\n        ...options\n      }),\n      headers: options.headers\n    })\n\n    const body = await res.text()\n    // we don't expect text body to be ever present\n    // (if so, it means an error such as https://github.com/ipfs/go-ipfs/issues/8606)\n    if (body !== '') {\n      /** @type {Error} */\n      const error = new HTTP.HTTPError(res)\n      error.message = body\n      throw error\n    }\n  }\n  return rm\n})\n","import { CID } from 'multiformats/cid'\nimport { objectToCamelWithMetadata } from '../lib/object-to-camel-with-metadata.js'\nimport { configure } from '../lib/configure.js'\nimport { toUrlSearchParams } from '../lib/to-url-search-params.js'\n\n/**\n * @typedef {import('../types').HTTPClientExtraOptions} HTTPClientExtraOptions\n * @typedef {import('ipfs-core-types/src/files').API<HTTPClientExtraOptions>} FilesAPI\n */\n\nexport const createStat = configure(api => {\n  /**\n   * @type {FilesAPI[\"stat\"]}\n   */\n  async function stat (path, options = {}) {\n    const res = await api.post('files/stat', {\n      signal: options.signal,\n      searchParams: toUrlSearchParams({\n        arg: path,\n        ...options\n      }),\n      headers: options.headers\n    })\n    const data = await res.json()\n\n    data.WithLocality = data.WithLocality || false\n    return toCoreInterface(objectToCamelWithMetadata(data))\n  }\n  return stat\n})\n\n/**\n * @param {*} entry\n */\nfunction toCoreInterface (entry) {\n  entry.cid = CID.parse(entry.hash)\n  delete entry.hash\n  return entry\n}\n","import { configure } from '../lib/configure.js'\nimport { toUrlSearchParams } from '../lib/to-url-search-params.js'\n\n/**\n * @typedef {import('../types').HTTPClientExtraOptions} HTTPClientExtraOptions\n * @typedef {import('ipfs-core-types/src/files').API<HTTPClientExtraOptions>} FilesAPI\n */\n\nexport const createTouch = configure(api => {\n  /**\n   * @type {FilesAPI[\"touch\"]}\n   */\n  async function touch (path, options = {}) {\n    const res = await api.post('files/touch', {\n      signal: options.signal,\n      searchParams: toUrlSearchParams({\n        arg: path,\n        ...options\n      }),\n      headers: options.headers\n    })\n\n    await res.text()\n  }\n  return touch\n})\n","import { modeToString } from '../lib/mode-to-string.js'\nimport { parseMtime } from '../lib/parse-mtime.js'\nimport { configure } from '../lib/configure.js'\nimport { multipartRequest } from 'ipfs-core-utils/multipart-request'\nimport { toUrlSearchParams } from '../lib/to-url-search-params.js'\nimport { abortSignal } from '../lib/abort-signal.js'\n\n/**\n * @typedef {import('../types').HTTPClientExtraOptions} HTTPClientExtraOptions\n * @typedef {import('ipfs-core-types/src/files').API<HTTPClientExtraOptions>} FilesAPI\n */\n\nexport const createWrite = configure(api => {\n  /**\n   * @type {FilesAPI[\"write\"]}\n   */\n  async function write (path, input, options = {}) {\n    // allow aborting requests on body errors\n    const controller = new AbortController()\n    const signal = abortSignal(controller.signal, options.signal)\n\n    const res = await api.post('files/write', {\n      signal,\n      searchParams: toUrlSearchParams({\n        arg: path,\n        streamChannels: true,\n        count: options.length,\n        ...options\n      }),\n      ...(\n        await multipartRequest([{\n          content: input,\n          path: 'arg',\n          mode: modeToString(options.mode),\n          mtime: parseMtime(options.mtime)\n        }], controller, options.headers)\n      )\n    })\n\n    await res.text()\n  }\n  return write\n})\n","import { createChmod } from './chmod.js'\nimport { createCp } from './cp.js'\nimport { createFlush } from './flush.js'\nimport { createLs } from './ls.js'\nimport { createMkdir } from './mkdir.js'\nimport { createMv } from './mv.js'\nimport { createRead } from './read.js'\nimport { createRm } from './rm.js'\nimport { createStat } from './stat.js'\nimport { createTouch } from './touch.js'\nimport { createWrite } from './write.js'\n\n/**\n * @param {import('../types').Options} config\n */\nexport function createFiles (config) {\n  return {\n    chmod: createChmod(config),\n    cp: createCp(config),\n    flush: createFlush(config),\n    ls: createLs(config),\n    mkdir: createMkdir(config),\n    mv: createMv(config),\n    read: createRead(config),\n    rm: createRm(config),\n    stat: createStat(config),\n    touch: createTouch(config),\n    write: createWrite(config)\n  }\n}\n","import { configure } from '../lib/configure.js'\nimport errCode from 'err-code'\n\n/**\n * @typedef {import('../types').HTTPClientExtraOptions} HTTPClientExtraOptions\n * @typedef {import('ipfs-core-types/src/key').API<HTTPClientExtraOptions>} KeyAPI\n */\n\nexport const createExport = configure(api => {\n  /**\n   * @type {KeyAPI[\"export\"]}\n   */\n  const exportKey = async (name, password, options = {}) => {\n    throw errCode(new Error('Not implemented'), 'ERR_NOT_IMPLEMENTED')\n  }\n\n  return exportKey\n})\n","import { objectToCamel } from '../lib/object-to-camel.js'\nimport { configure } from '../lib/configure.js'\nimport { toUrlSearchParams } from '../lib/to-url-search-params.js'\n\n/**\n * @typedef {import('../types').HTTPClientExtraOptions} HTTPClientExtraOptions\n * @typedef {import('ipfs-core-types/src/key').API<HTTPClientExtraOptions>} KeyAPI\n */\n\nexport const createGen = configure(api => {\n  /**\n   * @type {KeyAPI[\"gen\"]}\n   */\n  async function gen (name, options = { type: 'Ed25519' }) {\n    const res = await api.post('key/gen', {\n      signal: options.signal,\n      searchParams: toUrlSearchParams({\n        arg: name,\n        ...options\n      }),\n      headers: options.headers\n    })\n    const data = await res.json()\n\n    // @ts-expect-error server output is not typed\n    return objectToCamel(data)\n  }\n  return gen\n})\n","import { objectToCamel } from '../lib/object-to-camel.js'\nimport { configure } from '../lib/configure.js'\nimport { toUrlSearchParams } from '../lib/to-url-search-params.js'\n\n/**\n * @typedef {import('../types').HTTPClientExtraOptions} HTTPClientExtraOptions\n * @typedef {import('ipfs-core-types/src/key').API<HTTPClientExtraOptions>} KeyAPI\n */\n\nexport const createImport = configure(api => {\n  /**\n   * @type {KeyAPI[\"import\"]}\n   */\n  async function importKey (name, pem, password, options = {}) {\n    const res = await api.post('key/import', {\n      signal: options.signal,\n      searchParams: toUrlSearchParams({\n        arg: name,\n        pem,\n        password,\n        ...options\n      }),\n      headers: options.headers\n    })\n    const data = await res.json()\n\n    // @ts-expect-error server output is not typed\n    return objectToCamel(data)\n  }\n  return importKey\n})\n","import { configure } from '../lib/configure.js'\nimport errCode from 'err-code'\n\n/**\n * @typedef {import('../types').HTTPClientExtraOptions} HTTPClientExtraOptions\n * @typedef {import('ipfs-core-types/src/key').API<HTTPClientExtraOptions>} KeyAPI\n */\n\nexport const createInfo = configure(api => {\n  /**\n   * @type {KeyAPI[\"info\"]}\n   */\n  const info = async (name, options = {}) => {\n    throw errCode(new Error('Not implemented'), 'ERR_NOT_IMPLEMENTED')\n  }\n\n  return info\n})\n","import { objectToCamel } from '../lib/object-to-camel.js'\nimport { configure } from '../lib/configure.js'\nimport { toUrlSearchParams } from '../lib/to-url-search-params.js'\n\n/**\n * @typedef {import('../types').HTTPClientExtraOptions} HTTPClientExtraOptions\n * @typedef {import('ipfs-core-types/src/key').API<HTTPClientExtraOptions>} KeyAPI\n */\n\nexport const createList = configure(api => {\n  /**\n   * @type {KeyAPI[\"list\"]}\n   */\n  async function list (options = {}) {\n    const res = await api.post('key/list', {\n      signal: options.signal,\n      searchParams: toUrlSearchParams(options),\n      headers: options.headers\n    })\n    const data = await res.json()\n\n    return (data.Keys || []).map((/** @type {any} **/ k) => objectToCamel(k))\n  }\n  return list\n})\n","import { objectToCamel } from '../lib/object-to-camel.js'\nimport { configure } from '../lib/configure.js'\nimport { toUrlSearchParams } from '../lib/to-url-search-params.js'\n\n/**\n * @typedef {import('../types').HTTPClientExtraOptions} HTTPClientExtraOptions\n * @typedef {import('ipfs-core-types/src/key').API<HTTPClientExtraOptions>} KeyAPI\n */\n\nexport const createRename = configure(api => {\n  /**\n   * @type {KeyAPI[\"rename\"]}\n   */\n  async function rename (oldName, newName, options = {}) {\n    const res = await api.post('key/rename', {\n      signal: options.signal,\n      searchParams: toUrlSearchParams({\n        arg: [\n          oldName,\n          newName\n        ],\n        ...options\n      }),\n      headers: options.headers\n    })\n\n    // @ts-expect-error server output is not typed\n    return objectToCamel(await res.json())\n  }\n  return rename\n})\n","import { objectToCamel } from '../lib/object-to-camel.js'\nimport { configure } from '../lib/configure.js'\nimport { toUrlSearchParams } from '../lib/to-url-search-params.js'\n\n/**\n * @typedef {import('../types').HTTPClientExtraOptions} HTTPClientExtraOptions\n * @typedef {import('ipfs-core-types/src/key').API<HTTPClientExtraOptions>} KeyAPI\n */\n\nexport const createRm = configure(api => {\n  /**\n   * @type {KeyAPI[\"rm\"]}\n   */\n  async function rm (name, options = {}) {\n    const res = await api.post('key/rm', {\n      signal: options.signal,\n      searchParams: toUrlSearchParams({\n        arg: name,\n        ...options\n      }),\n      headers: options.headers\n    })\n    const data = await res.json()\n\n    // @ts-expect-error server output is not typed\n    return objectToCamel(data.Keys[0])\n  }\n  return rm\n})\n","import { createExport } from './export.js'\nimport { createGen } from './gen.js'\nimport { createImport } from './import.js'\nimport { createInfo } from './info.js'\nimport { createList } from './list.js'\nimport { createRename } from './rename.js'\nimport { createRm } from './rm.js'\n\n/**\n * @param {import('../types').Options} config\n */\nexport function createKey (config) {\n  return {\n    export: createExport(config),\n    gen: createGen(config),\n    import: createImport(config),\n    info: createInfo(config),\n    list: createList(config),\n    rename: createRename(config),\n    rm: createRm(config)\n  }\n}\n","import { objectToCamel } from '../lib/object-to-camel.js'\nimport { configure } from '../lib/configure.js'\nimport { toUrlSearchParams } from '../lib/to-url-search-params.js'\n\n/**\n * @typedef {import('../types').HTTPClientExtraOptions} HTTPClientExtraOptions\n * @typedef {import('ipfs-core-types/src/log').API<HTTPClientExtraOptions>} LogAPI\n */\n\nexport const createLevel = configure(api => {\n  /**\n   * @type {LogAPI[\"level\"]}\n   */\n  async function level (subsystem, level, options = {}) {\n    const res = await api.post('log/level', {\n      signal: options.signal,\n      searchParams: toUrlSearchParams({\n        arg: [\n          subsystem,\n          level\n        ],\n        ...options\n      }),\n      headers: options.headers\n    })\n\n    return objectToCamel(await res.json())\n  }\n  return level\n})\n","import { configure } from '../lib/configure.js'\nimport { toUrlSearchParams } from '../lib/to-url-search-params.js'\n\n/**\n * @typedef {import('../types').HTTPClientExtraOptions} HTTPClientExtraOptions\n * @typedef {import('ipfs-core-types/src/log').API<HTTPClientExtraOptions>} LogAPI\n */\n\nexport const createLs = configure(api => {\n  /**\n   * @type {LogAPI[\"ls\"]}\n   */\n  async function ls (options = {}) {\n    const res = await api.post('log/ls', {\n      signal: options.signal,\n      searchParams: toUrlSearchParams(options),\n      headers: options.headers\n    })\n\n    const data = await res.json()\n    return data.Strings\n  }\n  return ls\n})\n","import { configure } from '../lib/configure.js'\nimport { toUrlSearchParams } from '../lib/to-url-search-params.js'\n\n/**\n * @typedef {import('../types').HTTPClientExtraOptions} HTTPClientExtraOptions\n * @typedef {import('ipfs-core-types/src/log').API<HTTPClientExtraOptions>} LogAPI\n */\n\nexport const createTail = configure(api => {\n  /**\n   * @type {LogAPI[\"tail\"]}\n   */\n  async function * tail (options = {}) {\n    const res = await api.post('log/tail', {\n      signal: options.signal,\n      searchParams: toUrlSearchParams(options),\n      headers: options.headers\n    })\n\n    yield * res.ndjson()\n  }\n  return tail\n})\n","import { createLevel } from './level.js'\nimport { createLs } from './ls.js'\nimport { createTail } from './tail.js'\n\n/**\n * @param {import('../types').Options} config\n */\nexport function createLog (config) {\n  return {\n    level: createLevel(config),\n    ls: createLs(config),\n    tail: createTail(config)\n  }\n}\n","import { objectToCamel } from '../lib/object-to-camel.js'\nimport { configure } from '../lib/configure.js'\nimport { toUrlSearchParams } from '../lib/to-url-search-params.js'\n\n/**\n * @typedef {import('../types').HTTPClientExtraOptions} HTTPClientExtraOptions\n * @typedef {import('ipfs-core-types/src/name').API<HTTPClientExtraOptions>} NameAPI\n */\n\nexport const createPublish = configure(api => {\n  /**\n   * @type {NameAPI[\"publish\"]}\n   */\n  async function publish (path, options = {}) {\n    const res = await api.post('name/publish', {\n      signal: options.signal,\n      searchParams: toUrlSearchParams({\n        arg: `${path}`,\n        ...options\n      }),\n      headers: options.headers\n    })\n\n    // @ts-expect-error server output is not typed\n    return objectToCamel(await res.json())\n  }\n  return publish\n})\n","import { configure } from '../lib/configure.js'\nimport { toUrlSearchParams } from '../lib/to-url-search-params.js'\n\n/**\n * @typedef {import('../types').HTTPClientExtraOptions} HTTPClientExtraOptions\n * @typedef {import('ipfs-core-types/src/name').API<HTTPClientExtraOptions>} NameAPI\n */\n\nexport const createResolve = configure(api => {\n  /**\n   * @type {NameAPI[\"resolve\"]}\n   */\n  async function * resolve (path, options = {}) {\n    const res = await api.post('name/resolve', {\n      signal: options.signal,\n      searchParams: toUrlSearchParams({\n        arg: path,\n        stream: true,\n        ...options\n      }),\n      headers: options.headers\n    })\n\n    for await (const result of res.ndjson()) {\n      yield result.Path\n    }\n  }\n  return resolve\n})\n","import { objectToCamel } from '../../lib/object-to-camel.js'\nimport { configure } from '../../lib/configure.js'\nimport { toUrlSearchParams } from '../../lib/to-url-search-params.js'\n\n/**\n * @typedef {import('../../types').HTTPClientExtraOptions} HTTPClientExtraOptions\n * @typedef {import('ipfs-core-types/src/name/pubsub').API<HTTPClientExtraOptions>} NamePubsubAPI\n */\n\nexport const createCancel = configure(api => {\n  /**\n   * @type {NamePubsubAPI[\"cancel\"]}\n   */\n  async function cancel (name, options = {}) {\n    const res = await api.post('name/pubsub/cancel', {\n      signal: options.signal,\n      searchParams: toUrlSearchParams({\n        arg: name,\n        ...options\n      }),\n      headers: options.headers\n    })\n\n    // @ts-expect-error server output is not typed\n    return objectToCamel(await res.json())\n  }\n  return cancel\n})\n","import { objectToCamel } from '../../lib/object-to-camel.js'\nimport { configure } from '../../lib/configure.js'\nimport { toUrlSearchParams } from '../../lib/to-url-search-params.js'\n\n/**\n * @typedef {import('../../types').HTTPClientExtraOptions} HTTPClientExtraOptions\n * @typedef {import('ipfs-core-types/src/name/pubsub').API<HTTPClientExtraOptions>} NamePubsubAPI\n */\n\nexport const createState = configure(api => {\n  /**\n   * @type {NamePubsubAPI[\"state\"]}\n   */\n  async function state (options = {}) {\n    const res = await api.post('name/pubsub/state', {\n      signal: options.signal,\n      searchParams: toUrlSearchParams(options),\n      headers: options.headers\n    })\n\n    // @ts-expect-error server output is not typed\n    return objectToCamel(await res.json())\n  }\n  return state\n})\n","import { configure } from '../../lib/configure.js'\nimport { toUrlSearchParams } from '../../lib/to-url-search-params.js'\n\n/**\n * @typedef {import('../../types').HTTPClientExtraOptions} HTTPClientExtraOptions\n * @typedef {import('ipfs-core-types/src/name/pubsub').API<HTTPClientExtraOptions>} NamePubsubAPI\n */\n\nexport const createSubs = configure(api => {\n  /**\n   * @type {NamePubsubAPI[\"subs\"]}\n   */\n  async function subs (options = {}) {\n    const res = await api.post('name/pubsub/subs', {\n      signal: options.signal,\n      searchParams: toUrlSearchParams(options),\n      headers: options.headers\n    })\n    const data = await res.json()\n\n    return data.Strings || []\n  }\n  return subs\n})\n","import { createCancel } from './cancel.js'\nimport { createState } from './state.js'\nimport { createSubs } from './subs.js'\n\n/**\n * @param {import('../../types').Options} config\n */\nexport function createPubsub (config) {\n  return {\n    cancel: createCancel(config),\n    state: createState(config),\n    subs: createSubs(config)\n  }\n}\n","import { createPublish } from './publish.js'\nimport { createResolve } from './resolve.js'\nimport { createPubsub } from './pubsub/index.js'\n\n/**\n * @param {import('../types').Options} config\n */\nexport function createName (config) {\n  return {\n    publish: createPublish(config),\n    resolve: createResolve(config),\n    pubsub: createPubsub(config)\n  }\n}\n","import { CID } from 'multiformats/cid'\nimport { configure } from '../lib/configure.js'\nimport { toUrlSearchParams } from '../lib/to-url-search-params.js'\n\n/**\n * @typedef {import('../types').HTTPClientExtraOptions} HTTPClientExtraOptions\n * @typedef {import('ipfs-core-types/src/object').API<HTTPClientExtraOptions>} ObjectAPI\n */\n\nexport const createData = configure(api => {\n  /**\n   * @type {ObjectAPI[\"data\"]}\n   */\n  async function data (cid, options = {}) {\n    const res = await api.post('object/data', {\n      signal: options.signal,\n      searchParams: toUrlSearchParams({\n        arg: `${cid instanceof Uint8Array ? CID.decode(cid) : cid}`,\n        ...options\n      }),\n      headers: options.headers\n    })\n    const data = await res.arrayBuffer()\n\n    return new Uint8Array(data, 0, data.byteLength)\n  }\n  return data\n})\n","import { CID } from 'multiformats/cid'\nimport { configure } from '../lib/configure.js'\nimport { toUrlSearchParams } from '../lib/to-url-search-params.js'\nimport { fromString as uint8ArrayFromString } from 'uint8arrays/from-string'\n\n/**\n * @typedef {import('../types').HTTPClientExtraOptions} HTTPClientExtraOptions\n * @typedef {import('ipfs-core-types/src/object').API<HTTPClientExtraOptions>} ObjectAPI\n */\n\nexport const createGet = configure(api => {\n  /**\n   * @type {ObjectAPI[\"get\"]}\n   */\n  async function get (cid, options = {}) {\n    const res = await api.post('object/get', {\n      signal: options.signal,\n      searchParams: toUrlSearchParams({\n        arg: `${cid instanceof Uint8Array ? CID.decode(cid) : cid}`,\n        dataEncoding: 'base64',\n        ...options\n      }),\n      headers: options.headers\n    })\n    const data = await res.json()\n\n    return {\n      Data: uint8ArrayFromString(data.Data, 'base64pad'),\n      Links: (data.Links || []).map((/** @type {any} */ link) => ({\n        Name: link.Name,\n        Hash: CID.parse(link.Hash),\n        Tsize: link.Size\n      }))\n    }\n  }\n  return get\n})\n","import { CID } from 'multiformats/cid'\nimport { configure } from '../lib/configure.js'\nimport { toUrlSearchParams } from '../lib/to-url-search-params.js'\n\n/**\n * @typedef {import('../types').HTTPClientExtraOptions} HTTPClientExtraOptions\n * @typedef {import('ipfs-core-types/src/object').API<HTTPClientExtraOptions>} ObjectAPI\n */\n\nexport const createLinks = configure(api => {\n  /**\n   * @type {ObjectAPI[\"links\"]}\n   */\n  async function links (cid, options = {}) {\n    const res = await api.post('object/links', {\n      signal: options.signal,\n      searchParams: toUrlSearchParams({\n        arg: `${cid instanceof Uint8Array ? CID.decode(cid) : cid}`,\n        ...options\n      }),\n      headers: options.headers\n    })\n    const data = await res.json()\n\n    return (data.Links || []).map((/** @type {any} */ l) => ({\n      Name: l.Name,\n      Tsize: l.Size,\n      Hash: CID.parse(l.Hash)\n    }))\n  }\n  return links\n})\n","import { CID } from 'multiformats/cid'\nimport { configure } from '../lib/configure.js'\nimport { toUrlSearchParams } from '../lib/to-url-search-params.js'\n\n/**\n * @typedef {import('../types').HTTPClientExtraOptions} HTTPClientExtraOptions\n * @typedef {import('ipfs-core-types/src/object').API<HTTPClientExtraOptions>} ObjectAPI\n */\n\nexport const createNew = configure(api => {\n  /**\n   * @type {ObjectAPI[\"new\"]}\n   */\n  async function newObject (options = {}) {\n    const res = await api.post('object/new', {\n      signal: options.signal,\n      searchParams: toUrlSearchParams({\n        arg: options.template,\n        ...options\n      }),\n      headers: options.headers\n    })\n\n    const { Hash } = await res.json()\n\n    return CID.parse(Hash)\n  }\n  return newObject\n})\n","import { configure } from '../lib/configure.js'\nimport { createPut as createDagPut } from '../dag/put.js'\n\n/**\n * @typedef {import('../types').HTTPClientExtraOptions} HTTPClientExtraOptions\n * @typedef {import('ipfs-core-types/src/object').API<HTTPClientExtraOptions>} ObjectAPI\n */\n\n/**\n * @param {import('ipfs-core-utils/multicodecs').Multicodecs} codecs\n * @param {import('../types').Options} options\n */\nexport const createPut = (codecs, options) => {\n  const fn = configure((api) => {\n    const dagPut = createDagPut(codecs, options)\n\n    /**\n     * @type {ObjectAPI[\"put\"]}\n     */\n    async function put (obj, options = {}) {\n      return dagPut(obj, {\n        ...options,\n        storeCodec: 'dag-pb',\n        hashAlg: 'sha2-256',\n        version: 1\n      })\n    }\n    return put\n  })\n\n  return fn(options)\n}\n","import { CID } from 'multiformats/cid'\nimport { configure } from '../lib/configure.js'\nimport { toUrlSearchParams } from '../lib/to-url-search-params.js'\n\n/**\n * @typedef {import('../types').HTTPClientExtraOptions} HTTPClientExtraOptions\n * @typedef {import('ipfs-core-types/src/object').API<HTTPClientExtraOptions>} ObjectAPI\n */\n\nexport const createStat = configure(api => {\n  /**\n   * @type {ObjectAPI[\"stat\"]}\n   */\n  async function stat (cid, options = {}) {\n    const res = await api.post('object/stat', {\n      signal: options.signal,\n      searchParams: toUrlSearchParams({\n        arg: `${cid}`,\n        ...options\n      }),\n      headers: options.headers\n    })\n\n    const output = await res.json()\n\n    return {\n      ...output,\n      Hash: CID.parse(output.Hash)\n    }\n  }\n  return stat\n})\n","import { CID } from 'multiformats/cid'\nimport { configure } from '../../lib/configure.js'\nimport { toUrlSearchParams } from '../../lib/to-url-search-params.js'\n\n/**\n * @typedef {import('../../types').HTTPClientExtraOptions} HTTPClientExtraOptions\n * @typedef {import('ipfs-core-types/src/object/patch').API<HTTPClientExtraOptions>} ObjectPatchAPI\n */\n\nexport const createAddLink = configure(api => {\n  /**\n   * @type {ObjectPatchAPI[\"addLink\"]}\n   */\n  async function addLink (cid, dLink, options = {}) {\n    const res = await api.post('object/patch/add-link', {\n      signal: options.signal,\n      searchParams: toUrlSearchParams({\n        arg: [\n          `${cid}`,\n          // @ts-expect-error loose types\n          dLink.Name || dLink.name || '',\n          // @ts-expect-error loose types\n          (dLink.Hash || dLink.cid || '').toString() || null\n        ],\n        ...options\n      }),\n      headers: options.headers\n    })\n\n    const { Hash } = await res.json()\n\n    return CID.parse(Hash)\n  }\n\n  return addLink\n})\n","import { CID } from 'multiformats/cid'\nimport { multipartRequest } from 'ipfs-core-utils/multipart-request'\nimport { configure } from '../../lib/configure.js'\nimport { toUrlSearchParams } from '../../lib/to-url-search-params.js'\nimport { abortSignal } from '../../lib/abort-signal.js'\n\n/**\n * @typedef {import('../../types').HTTPClientExtraOptions} HTTPClientExtraOptions\n * @typedef {import('ipfs-core-types/src/object/patch').API<HTTPClientExtraOptions>} ObjectPatchAPI\n */\n\nexport const createAppendData = configure(api => {\n  /**\n   * @type {ObjectPatchAPI[\"appendData\"]}\n   */\n  async function appendData (cid, data, options = {}) {\n    // allow aborting requests on body errors\n    const controller = new AbortController()\n    const signal = abortSignal(controller.signal, options.signal)\n\n    const res = await api.post('object/patch/append-data', {\n      signal,\n      searchParams: toUrlSearchParams({\n        arg: `${cid}`,\n        ...options\n      }),\n      ...(\n        await multipartRequest([data], controller, options.headers)\n      )\n    })\n\n    const { Hash } = await res.json()\n\n    return CID.parse(Hash)\n  }\n  return appendData\n})\n","import { CID } from 'multiformats/cid'\nimport { configure } from '../../lib/configure.js'\nimport { toUrlSearchParams } from '../../lib/to-url-search-params.js'\n\n/**\n * @typedef {import('../../types').HTTPClientExtraOptions} HTTPClientExtraOptions\n * @typedef {import('ipfs-core-types/src/object/patch').API<HTTPClientExtraOptions>} ObjectPatchAPI\n */\n\nexport const createRmLink = configure(api => {\n  /**\n   * @type {ObjectPatchAPI[\"rmLink\"]}\n   */\n  async function rmLink (cid, dLink, options = {}) {\n    const res = await api.post('object/patch/rm-link', {\n      signal: options.signal,\n      searchParams: toUrlSearchParams({\n        arg: [\n          `${cid}`,\n          // @ts-expect-error loose types\n          dLink.Name || dLink.name || null\n        ],\n        ...options\n      }),\n      headers: options.headers\n    })\n\n    const { Hash } = await res.json()\n\n    return CID.parse(Hash)\n  }\n  return rmLink\n})\n","import { CID } from 'multiformats/cid'\nimport { multipartRequest } from 'ipfs-core-utils/multipart-request'\nimport { configure } from '../../lib/configure.js'\nimport { toUrlSearchParams } from '../../lib/to-url-search-params.js'\nimport { abortSignal } from '../../lib/abort-signal.js'\n\n/**\n * @typedef {import('../../types').HTTPClientExtraOptions} HTTPClientExtraOptions\n * @typedef {import('ipfs-core-types/src/object/patch').API<HTTPClientExtraOptions>} ObjectPatchAPI\n */\n\nexport const createSetData = configure(api => {\n  /**\n   * @type {ObjectPatchAPI[\"setData\"]}\n   */\n  async function setData (cid, data, options = {}) {\n    // allow aborting requests on body errors\n    const controller = new AbortController()\n    const signal = abortSignal(controller.signal, options.signal)\n\n    const res = await api.post('object/patch/set-data', {\n      signal,\n      searchParams: toUrlSearchParams({\n        arg: [\n          `${cid}`\n        ],\n        ...options\n      }),\n      ...(\n        await multipartRequest([data], controller, options.headers)\n      )\n    })\n\n    const { Hash } = await res.json()\n\n    return CID.parse(Hash)\n  }\n  return setData\n})\n","import { createAddLink } from './add-link.js'\nimport { createAppendData } from './append-data.js'\nimport { createRmLink } from './rm-link.js'\nimport { createSetData } from './set-data.js'\n\n/**\n * @param {import('../../types').Options} config\n */\nexport function createPatch (config) {\n  return {\n    addLink: createAddLink(config),\n    appendData: createAppendData(config),\n    rmLink: createRmLink(config),\n    setData: createSetData(config)\n  }\n}\n","import { createData } from './data.js'\nimport { createGet } from './get.js'\nimport { createLinks } from './links.js'\nimport { createNew } from './new.js'\nimport { createPut } from './put.js'\nimport { createStat } from './stat.js'\nimport { createPatch } from './patch/index.js'\n\n/**\n * @param {import('ipfs-core-utils/multicodecs').Multicodecs} codecs\n * @param {import('../types').Options} config\n */\nexport function createObject (codecs, config) {\n  return {\n    data: createData(config),\n    get: createGet(config),\n    links: createLinks(config),\n    new: createNew(config),\n    put: createPut(codecs, config),\n    stat: createStat(config),\n    patch: createPatch(config)\n  }\n}\n","import errCode from 'err-code'\nimport { CID } from 'multiformats/cid'\n\n/**\n * @typedef {object} Pinnable\n * @property {string | InstanceType<typeof window.String> | CID} [path]\n * @property {CID} [cid]\n * @property {boolean} [recursive]\n * @property {any} [metadata]\n *\n * @typedef {CID|string|InstanceType<typeof window.String>|Pinnable} ToPin\n * @typedef {ToPin|Iterable<ToPin>|AsyncIterable<ToPin>} Source\n *\n * @typedef {object} Pin\n * @property {string|CID} path\n * @property {boolean} recursive\n * @property {any} [metadata]\n */\n\n/**\n * Transform one of:\n *\n * ```ts\n * CID\n * String\n * { cid: CID recursive, metadata }\n * { path: String recursive, metadata }\n * Iterable<CID>\n * Iterable<String>\n * Iterable<{ cid: CID recursive, metadata }>\n * Iterable<{ path: String recursive, metadata }>\n * AsyncIterable<CID>\n * AsyncIterable<String>\n * AsyncIterable<{ cid: CID recursive, metadata }>\n * AsyncIterable<{ path: String recursive, metadata }>\n * ```\n * Into:\n *\n * ```ts\n * AsyncIterable<{ path: CID|String, recursive:boolean, metadata }>\n * ```\n *\n * @param {Source} input\n * @returns {AsyncIterable<Pin>}\n */\n// eslint-disable-next-line complexity\nexport async function * normaliseInput (input) {\n  // must give us something\n  if (input === null || input === undefined) {\n    throw errCode(new Error(`Unexpected input: ${input}`), 'ERR_UNEXPECTED_INPUT')\n  }\n\n  // CID\n  const cid = CID.asCID(input)\n\n  if (cid) {\n    yield toPin({ cid })\n    return\n  }\n\n  if (input instanceof String || typeof input === 'string') {\n    yield toPin({ path: input })\n    return\n  }\n\n  // { cid: CID recursive, metadata }\n  // @ts-expect-error - it still could be iterable or async iterable\n  if (input.cid != null || input.path != null) {\n    // @ts-expect-error\n    return yield toPin(input)\n  }\n\n  // Iterable<?>\n  if (Symbol.iterator in input) {\n    // @ts-expect-error\n    const iterator = input[Symbol.iterator]()\n    const first = iterator.next()\n    if (first.done) return iterator\n\n    // Iterable<CID|String>\n    if (CID.asCID(first.value) || first.value instanceof String || typeof first.value === 'string') {\n      yield toPin({ cid: first.value })\n      for (const cid of iterator) {\n        yield toPin({ cid })\n      }\n      return\n    }\n\n    // Iterable<{ cid: CID recursive, metadata }>\n    if (first.value.cid != null || first.value.path != null) {\n      yield toPin(first.value)\n      for (const obj of iterator) {\n        yield toPin(obj)\n      }\n      return\n    }\n\n    throw errCode(new Error('Unexpected input: ' + typeof input), 'ERR_UNEXPECTED_INPUT')\n  }\n\n  // AsyncIterable<?>\n  if (Symbol.asyncIterator in input) {\n    // @ts-expect-error\n    const iterator = input[Symbol.asyncIterator]()\n    const first = await iterator.next()\n    if (first.done) return iterator\n\n    // AsyncIterable<CID|String>\n    if (CID.asCID(first.value) || first.value instanceof String || typeof first.value === 'string') {\n      yield toPin({ cid: first.value })\n      for await (const cid of iterator) {\n        yield toPin({ cid })\n      }\n      return\n    }\n\n    // AsyncIterable<{ cid: CID|String recursive, metadata }>\n    if (first.value.cid != null || first.value.path != null) {\n      yield toPin(first.value)\n      for await (const obj of iterator) {\n        yield toPin(obj)\n      }\n      return\n    }\n\n    throw errCode(new Error('Unexpected input: ' + typeof input), 'ERR_UNEXPECTED_INPUT')\n  }\n\n  throw errCode(new Error('Unexpected input: ' + typeof input), 'ERR_UNEXPECTED_INPUT')\n}\n\n/**\n * @param {Pinnable} input\n */\nfunction toPin (input) {\n  const path = input.cid || `${input.path}`\n\n  if (!path) {\n    throw errCode(new Error('Unexpected input: Please path either a CID or an IPFS path'), 'ERR_UNEXPECTED_INPUT')\n  }\n\n  /** @type {Pin} */\n  const pin = {\n    path,\n    recursive: input.recursive !== false\n  }\n\n  if (input.metadata != null) {\n    pin.metadata = input.metadata\n  }\n\n  return pin\n}\n","import { CID } from 'multiformats/cid'\nimport { configure } from '../lib/configure.js'\nimport { normaliseInput } from 'ipfs-core-utils/pins/normalise-input'\nimport { toUrlSearchParams } from '../lib/to-url-search-params.js'\n\n/**\n * @typedef {import('../types').HTTPClientExtraOptions} HTTPClientExtraOptions\n * @typedef {import('ipfs-core-types/src/pin').API<HTTPClientExtraOptions>} PinAPI\n */\n\nexport const createAddAll = configure(api => {\n  /**\n   * @type {PinAPI[\"addAll\"]}\n   */\n  async function * addAll (source, options = {}) {\n    for await (const { path, recursive, metadata } of normaliseInput(source)) {\n      const res = await api.post('pin/add', {\n        signal: options.signal,\n        searchParams: toUrlSearchParams({\n          ...options,\n          arg: path,\n          recursive,\n          metadata: metadata ? JSON.stringify(metadata) : undefined,\n          stream: true\n        }),\n        headers: options.headers\n      })\n\n      for await (const pin of res.ndjson()) {\n        if (pin.Pins) { // non-streaming response\n          for (const cid of pin.Pins) {\n            yield CID.parse(cid)\n          }\n          continue\n        }\n\n        yield CID.parse(pin)\n      }\n    }\n  }\n  return addAll\n})\n","import { createAddAll } from './add-all.js'\nimport last from 'it-last'\nimport { configure } from '../lib/configure.js'\n\n/**\n * @typedef {import('../types').HTTPClientExtraOptions} HTTPClientExtraOptions\n * @typedef {import('ipfs-core-types/src/pin').API<HTTPClientExtraOptions>} PinAPI\n */\n\n/**\n * @param {import('../types').Options} config\n */\nexport function createAdd (config) {\n  const all = createAddAll(config)\n\n  return configure(() => {\n    /**\n     * @type {PinAPI[\"add\"]}\n     */\n    async function add (path, options = {}) {\n      // @ts-expect-error last can return undefined\n      return last(all([{\n        path,\n        ...options\n      }], options))\n    }\n    return add\n  })(config)\n}\n","import { CID } from 'multiformats/cid'\nimport { configure } from '../lib/configure.js'\nimport { toUrlSearchParams } from '../lib/to-url-search-params.js'\n\n/**\n * @typedef {import('../types').HTTPClientExtraOptions} HTTPClientExtraOptions\n * @typedef {import('ipfs-core-types/src/pin').API<HTTPClientExtraOptions>} PinAPI\n */\n\n/**\n * @param {string} type\n * @param {string} cid\n * @param {Record<string, string>} metadata\n */\nfunction toPin (type, cid, metadata) {\n  /** @type {import('ipfs-core-types/src/pin').LsResult} */\n  const pin = {\n    type,\n    cid: CID.parse(cid)\n  }\n\n  if (metadata) {\n    pin.metadata = metadata\n  }\n\n  return pin\n}\n\nexport const createLs = configure(api => {\n  /**\n   * @type {PinAPI[\"ls\"]}\n   */\n  async function * ls (options = {}) {\n    /** @type {any[]} */\n    let paths = []\n\n    if (options.paths) {\n      paths = Array.isArray(options.paths) ? options.paths : [options.paths]\n    }\n\n    const res = await api.post('pin/ls', {\n      signal: options.signal,\n      searchParams: toUrlSearchParams({\n        ...options,\n        arg: paths.map(path => `${path}`),\n        stream: true\n      }),\n      headers: options.headers\n    })\n\n    for await (const pin of res.ndjson()) {\n      if (pin.Keys) { // non-streaming response\n        for (const cid of Object.keys(pin.Keys)) {\n          yield toPin(pin.Keys[cid].Type, cid, pin.Keys[cid].Metadata)\n        }\n        return\n      }\n\n      yield toPin(pin.Type, pin.Cid, pin.Metadata)\n    }\n  }\n  return ls\n})\n","import { CID } from 'multiformats/cid'\nimport { configure } from '../lib/configure.js'\nimport { normaliseInput } from 'ipfs-core-utils/pins/normalise-input'\nimport { toUrlSearchParams } from '../lib/to-url-search-params.js'\n\n/**\n * @typedef {import('../types').HTTPClientExtraOptions} HTTPClientExtraOptions\n * @typedef {import('ipfs-core-types/src/pin').API<HTTPClientExtraOptions>} PinAPI\n */\n\nexport const createRmAll = configure(api => {\n  /**\n   * @type {PinAPI[\"rmAll\"]}\n   */\n  async function * rmAll (source, options = {}) {\n    for await (const { path, recursive } of normaliseInput(source)) {\n      const searchParams = new URLSearchParams(options.searchParams)\n      searchParams.append('arg', `${path}`)\n\n      if (recursive != null) searchParams.set('recursive', String(recursive))\n\n      const res = await api.post('pin/rm', {\n        signal: options.signal,\n        headers: options.headers,\n        searchParams: toUrlSearchParams({\n          ...options,\n          arg: `${path}`,\n          recursive\n        })\n      })\n\n      for await (const pin of res.ndjson()) {\n        if (pin.Pins) { // non-streaming response\n          yield * pin.Pins.map((/** @type {string} */ cid) => CID.parse(cid))\n          continue\n        }\n        yield CID.parse(pin)\n      }\n    }\n  }\n  return rmAll\n})\n","import { createRmAll } from './rm-all.js'\nimport last from 'it-last'\nimport { configure } from '../lib/configure.js'\n\n/**\n * @typedef {import('../types').HTTPClientExtraOptions} HTTPClientExtraOptions\n * @typedef {import('ipfs-core-types/src/pin').API<HTTPClientExtraOptions>} PinAPI\n */\n\n/**\n * @param {import('../types').Options} config\n */\nexport const createRm = (config) => {\n  const all = createRmAll(config)\n\n  return configure(() => {\n    /**\n     * @type {PinAPI[\"rm\"]}\n     */\n    async function rm (path, options = {}) {\n      // @ts-expect-error last can return undefined\n      return last(all([{\n        path,\n        ...options\n      }], options))\n    }\n    return rm\n  })(config)\n}\n","import { CID } from 'multiformats/cid'\nimport { toUrlSearchParams } from '../../lib/to-url-search-params.js'\n\n/**\n * @typedef {import('ipfs-core-types/src/utils').AbortOptions} AbortOptions\n * @typedef {import('ipfs-core-types/src/pin/remote').Pin} Pin\n * @typedef {import('ipfs-core-types/src/pin/remote').AddOptions} AddOptions\n * @typedef {import('ipfs-core-types/src/pin/remote').Query} Query\n * @typedef {import('ipfs-core-types/src/pin/remote').Status} Status\n */\n\n/**\n * @param {object} json\n * @param {string} json.Name\n * @param {string} json.Cid\n * @param {Status} json.Status\n * @returns {Pin}\n */\nexport const decodePin = ({ Name: name, Status: status, Cid: cid }) => {\n  return {\n    cid: CID.parse(cid),\n    name,\n    status\n  }\n}\n\n/**\n * @param {any} service\n * @returns {string}\n */\nexport const encodeService = (service) => {\n  if (typeof service === 'string' && service !== '') {\n    return service\n  } else {\n    throw new TypeError('service name must be passed')\n  }\n}\n\n/**\n * @param {any} cid\n * @returns {string}\n */\nexport const encodeCID = (cid) => {\n  if (CID.asCID(cid)) {\n    return cid.toString()\n  } else {\n    throw new TypeError(`CID instance expected instead of ${typeof cid}`)\n  }\n}\n\n/**\n * @param {Query & { all?: boolean }} query\n * @returns {URLSearchParams}\n */\nexport const encodeQuery = ({ service, cid, name, status, all }) => {\n  const query = toUrlSearchParams({\n    service: encodeService(service),\n    name,\n    force: all ? true : undefined\n  })\n\n  if (cid) {\n    for (const value of cid) {\n      query.append('cid', encodeCID(value))\n    }\n  }\n\n  if (status) {\n    for (const value of status) {\n      query.append('status', value)\n    }\n  }\n\n  return query\n}\n\n/**\n * @param {AddOptions & {cid:CID}} options\n * @returns {URLSearchParams}\n */\nexport const encodeAddParams = ({ cid, service, background, name, origins }) => {\n  const params = toUrlSearchParams({\n    arg: encodeCID(cid),\n    service: encodeService(service),\n    name,\n    background: background ? true : undefined\n  })\n\n  if (origins) {\n    for (const origin of origins) {\n      params.append('origin', origin.toString())\n    }\n  }\n\n  return params\n}\n","import { encodeAddParams, decodePin } from './utils.js'\n\n/**\n * @typedef {import('../../types').HTTPClientExtraOptions} HTTPClientExtraOptions\n * @typedef {import('ipfs-core-types/src/pin/remote').API<HTTPClientExtraOptions>} RemotePiningAPI\n */\n\n/**\n * @param {import('../../lib/core').Client} client\n */\nexport function createAdd (client) {\n  /**\n   * @type {RemotePiningAPI[\"add\"]}\n   */\n  async function add (cid, { timeout, signal, headers, ...query }) {\n    const response = await client.post('pin/remote/add', {\n      timeout,\n      signal,\n      headers,\n      searchParams: encodeAddParams({ cid, ...query })\n    })\n\n    return decodePin(await response.json())\n  }\n\n  return add\n}\n","import { encodeQuery, decodePin } from './utils.js'\n\n/**\n * @typedef {import('../../types').HTTPClientExtraOptions} HTTPClientExtraOptions\n * @typedef {import('ipfs-core-types/src/pin/remote').API<HTTPClientExtraOptions>} RemotePiningAPI\n */\n\n/**\n * @param {import('../../lib/core').Client} client\n */\nexport function createLs (client) {\n  /**\n   * @type {RemotePiningAPI[\"ls\"]}\n   */\n  async function * ls ({ timeout, signal, headers, ...query }) {\n    const response = await client.post('pin/remote/ls', {\n      timeout,\n      signal,\n      headers,\n      searchParams: encodeQuery(query)\n    })\n\n    for await (const pin of response.ndjson()) {\n      yield decodePin(pin)\n    }\n  }\n\n  return ls\n}\n","import { encodeQuery } from './utils.js'\n\n/**\n * @typedef {import('../../types').HTTPClientExtraOptions} HTTPClientExtraOptions\n * @typedef {import('ipfs-core-types/src/pin/remote').API<HTTPClientExtraOptions>} RemotePiningAPI\n */\n\n/**\n * @param {import('../../lib/core').Client} client\n */\nexport function createRm (client) {\n  /**\n   * @type {RemotePiningAPI[\"rm\"]}\n   */\n  async function rm ({ timeout, signal, headers, ...query }) {\n    await client.post('pin/remote/rm', {\n      timeout,\n      signal,\n      headers,\n      searchParams: encodeQuery({\n        ...query,\n        all: false\n      })\n    })\n  }\n\n  return rm\n}\n","import { encodeQuery } from './utils.js'\n\n/**\n * @typedef {import('../../types').HTTPClientExtraOptions} HTTPClientExtraOptions\n * @typedef {import('ipfs-core-types/src/pin/remote').API<HTTPClientExtraOptions>} RemotePiningAPI\n */\n\n/**\n * @param {import('../../lib/core').Client} client\n */\nexport function createRmAll (client) {\n  /**\n   * @type {RemotePiningAPI[\"rmAll\"]}\n   */\n  async function rmAll ({ timeout, signal, headers, ...query }) {\n    await client.post('pin/remote/rm', {\n      timeout,\n      signal,\n      headers,\n      searchParams: encodeQuery({\n        ...query,\n        all: true\n      })\n    })\n  }\n\n  return rmAll\n}\n","/**\n * @typedef {import('ipfs-core-types/src/pin/remote/service').RemotePinServiceWithStat} RemotePinServiceWithStat\n */\n\n/**\n * @param {URL} url\n */\nexport function encodeEndpoint (url) {\n  const href = String(url)\n  if (href === 'undefined') {\n    throw Error('endpoint is required')\n  }\n  // Workaround trailing `/` issue in go-ipfs\n  // @see https://github.com/ipfs/go-ipfs/issues/7826\n  return href[href.length - 1] === '/' ? href.slice(0, -1) : href\n}\n\n/**\n * @param {any} json\n * @returns {RemotePinServiceWithStat}\n */\nexport function decodeRemoteService (json) {\n  return {\n    service: json.Service,\n    endpoint: new URL(json.ApiEndpoint),\n    ...(json.Stat && { stat: decodeStat(json.Stat) })\n  }\n}\n\n/**\n * @param {any} json\n * @returns {import('ipfs-core-types/src/pin/remote/service').Stat}\n */\nexport function decodeStat (json) {\n  switch (json.Status) {\n    case 'valid': {\n      const { Pinning, Pinned, Queued, Failed } = json.PinCount\n      return {\n        status: 'valid',\n        pinCount: {\n          queued: Queued,\n          pinning: Pinning,\n          pinned: Pinned,\n          failed: Failed\n        }\n      }\n    }\n    case 'invalid': {\n      return { status: 'invalid' }\n    }\n    default: {\n      return { status: json.Status }\n    }\n  }\n}\n","import { toUrlSearchParams } from '../../../lib/to-url-search-params.js'\nimport { encodeEndpoint } from './utils.js'\n\n/**\n * @typedef {import('../../../types').HTTPClientExtraOptions} HTTPClientExtraOptions\n * @typedef {import('ipfs-core-types/src/pin/remote/service').API<HTTPClientExtraOptions>} RemotePiningServiceAPI\n */\n\n/**\n * @param {import('../../../lib/core').Client} client\n */\nexport function createAdd (client) {\n  /**\n   * @type {RemotePiningServiceAPI[\"add\"]}\n   */\n  async function add (name, options) {\n    const { endpoint, key, headers, timeout, signal } = options\n\n    await client.post('pin/remote/service/add', {\n      timeout,\n      signal,\n      searchParams: toUrlSearchParams({\n        arg: [name, encodeEndpoint(endpoint), key]\n      }),\n      headers\n    })\n  }\n\n  return add\n}\n","import { toUrlSearchParams } from '../../../lib/to-url-search-params.js'\nimport { decodeRemoteService } from './utils.js'\n\n/**\n * @typedef {import('../../../types').HTTPClientExtraOptions} HTTPClientExtraOptions\n * @typedef {import('ipfs-core-types/src/pin/remote/service').API<HTTPClientExtraOptions>} RemotePiningServiceAPI\n */\n\n/**\n * @param {import('../../../lib/core').Client} client\n */\nexport function createLs (client) {\n  /**\n   * @type {RemotePiningServiceAPI[\"ls\"]}\n   */\n  async function ls (options = {}) {\n    // @ts-expect-error cannot derive option type from typedef\n    const { stat, headers, timeout, signal } = options\n\n    const response = await client.post('pin/remote/service/ls', {\n      timeout,\n      signal,\n      headers,\n      searchParams: stat === true ? toUrlSearchParams({ stat }) : undefined\n    })\n\n    /** @type {{RemoteServices: object[]}} */\n    const { RemoteServices } = await response.json()\n\n    return RemoteServices.map(decodeRemoteService)\n  }\n\n  return ls\n}\n","import { toUrlSearchParams } from '../../../lib/to-url-search-params.js'\n\n/**\n * @typedef {import('../../../types').HTTPClientExtraOptions} HTTPClientExtraOptions\n * @typedef {import('ipfs-core-types/src/pin/remote/service').API<HTTPClientExtraOptions>} RemotePiningServiceAPI\n */\n\n/**\n * @param {import('../../../lib/core').Client} client\n */\nexport function createRm (client) {\n  /**\n   * @type {RemotePiningServiceAPI[\"rm\"]}\n   */\n  async function rm (name, options = {}) {\n    await client.post('pin/remote/service/rm', {\n      signal: options.signal,\n      headers: options.headers,\n      searchParams: toUrlSearchParams({\n        arg: name\n      })\n    })\n  }\n\n  return rm\n}\n","import { Client } from '../../../lib/core.js'\nimport { createAdd } from './add.js'\nimport { createLs } from './ls.js'\nimport { createRm } from './rm.js'\n\n/**\n * @param {import('../../../types').Options} config\n */\nexport function createService (config) {\n  const client = new Client(config)\n\n  return {\n    add: createAdd(client),\n    ls: createLs(client),\n    rm: createRm(client)\n  }\n}\n","import { Client } from '../../lib/core.js'\nimport { createAdd } from './add.js'\nimport { createLs } from './ls.js'\nimport { createRm } from './rm.js'\nimport { createRmAll } from './rm-all.js'\nimport { createService } from './service/index.js'\n\n/**\n * @param {import('../../types').Options} config\n */\nexport function createRemote (config) {\n  const client = new Client(config)\n\n  return {\n    add: createAdd(client),\n    ls: createLs(client),\n    rm: createRm(client),\n    rmAll: createRmAll(client),\n    service: createService(config)\n  }\n}\n","import { createAddAll } from './add-all.js'\nimport { createAdd } from './add.js'\nimport { createLs } from './ls.js'\nimport { createRmAll } from './rm-all.js'\nimport { createRm } from './rm.js'\nimport { createRemote } from './remote/index.js'\n\n/**\n * @param {import('../types').Options} config\n */\nexport function createPin (config) {\n  return {\n    addAll: createAddAll(config),\n    add: createAdd(config),\n    ls: createLs(config),\n    rmAll: createRmAll(config),\n    rm: createRm(config),\n    remote: createRemote(config)\n  }\n}\n","import { fromString as uint8ArrayFromString } from 'uint8arrays/from-string'\nimport { toString as uint8ArrayToString } from 'uint8arrays/to-string'\nimport { base64url } from 'multiformats/bases/base64'\n\n/* HTTP RPC:\n * - wraps binary data in multibase. base64url is used to avoid issues\n *   when a binary data is passed as search param in URL.\n *   Historical context: https://github.com/ipfs/go-ipfs/issues/7939\n *   Multibase wrapping introduced in: https://github.com/ipfs/go-ipfs/pull/8183\n */\n\n/**\n * @param {Array<string>} strings\n * @returns {Array<string>} strings\n */\nconst rpcArrayToTextArray = strings => {\n  if (Array.isArray(strings)) {\n    return strings.map(rpcToText)\n  }\n  return strings\n}\n\n/**\n * @param {string} mb\n * @returns {string}\n */\nconst rpcToText = mb => uint8ArrayToString(rpcToBytes(mb))\n\n/**\n * @param {string} mb\n * @returns {Uint8Array}\n */\nconst rpcToBytes = mb => base64url.decode(mb)\n\n/**\n * @param {string} mb\n * @returns {bigint}\n */\nconst rpcToBigInt = mb => BigInt(`0x${uint8ArrayToString(base64url.decode(mb), 'base16')}`)\n\n/**\n * @param {string} text\n * @returns {string}\n */\nconst textToUrlSafeRpc = text => base64url.encode(uint8ArrayFromString(text))\n\nexport { rpcArrayToTextArray, rpcToText, rpcToBytes, rpcToBigInt, textToUrlSafeRpc }\n","import { configure } from '../lib/configure.js'\nimport { toUrlSearchParams } from '../lib/to-url-search-params.js'\nimport { rpcArrayToTextArray } from '../lib/http-rpc-wire-format.js'\n\n/**\n * @typedef {import('../types').HTTPClientExtraOptions} HTTPClientExtraOptions\n * @typedef {import('ipfs-core-types/src/pubsub').API<HTTPClientExtraOptions>} PubsubAPI\n */\n\nexport const createLs = configure(api => {\n  /**\n   * @type {PubsubAPI[\"ls\"]}\n   */\n  async function ls (options = {}) {\n    const { Strings } = await (await api.post('pubsub/ls', {\n      signal: options.signal,\n      searchParams: toUrlSearchParams(options),\n      headers: options.headers\n    })).json()\n\n    return rpcArrayToTextArray(Strings) || []\n  }\n  return ls\n})\n","import { configure } from '../lib/configure.js'\nimport { toUrlSearchParams } from '../lib/to-url-search-params.js'\nimport { textToUrlSafeRpc } from '../lib/http-rpc-wire-format.js'\n\n/**\n * @typedef {import('../types').HTTPClientExtraOptions} HTTPClientExtraOptions\n * @typedef {import('ipfs-core-types/src/pubsub').API<HTTPClientExtraOptions>} PubsubAPI\n */\n\nexport const createPeers = configure(api => {\n  /**\n   * @type {PubsubAPI[\"peers\"]}\n   */\n  async function peers (topic, options = {}) {\n    const res = await api.post('pubsub/peers', {\n      signal: options.signal,\n      searchParams: toUrlSearchParams({\n        arg: textToUrlSafeRpc(topic),\n        ...options\n      }),\n      headers: options.headers\n    })\n\n    const { Strings } = await res.json()\n\n    return Strings || []\n  }\n  return peers\n})\n","import { configure } from '../lib/configure.js'\nimport { toUrlSearchParams } from '../lib/to-url-search-params.js'\nimport { multipartRequest } from 'ipfs-core-utils/multipart-request'\nimport { abortSignal } from '../lib/abort-signal.js'\nimport { textToUrlSafeRpc } from '../lib/http-rpc-wire-format.js'\n\n/**\n * @typedef {import('../types').HTTPClientExtraOptions} HTTPClientExtraOptions\n * @typedef {import('ipfs-core-types/src/pubsub').API<HTTPClientExtraOptions>} PubsubAPI\n */\n\nexport const createPublish = configure(api => {\n  /**\n   * @type {PubsubAPI[\"publish\"]}\n   */\n  async function publish (topic, data, options = {}) {\n    const searchParams = toUrlSearchParams({\n      arg: textToUrlSafeRpc(topic),\n      ...options\n    })\n\n    // allow aborting requests on body errors\n    const controller = new AbortController()\n    const signal = abortSignal(controller.signal, options.signal)\n\n    const res = await api.post('pubsub/pub', {\n      signal,\n      searchParams,\n      ...(\n        await multipartRequest([data], controller, options.headers)\n      )\n    })\n\n    await res.text()\n  }\n  return publish\n})\n","import { logger } from '@libp2p/logger'\nimport { configure } from '../lib/configure.js'\nimport { toUrlSearchParams } from '../lib/to-url-search-params.js'\nimport { textToUrlSafeRpc, rpcToText, rpcToBytes, rpcToBigInt } from '../lib/http-rpc-wire-format.js'\nimport { peerIdFromString } from '@libp2p/peer-id'\nconst log = logger('ipfs-http-client:pubsub:subscribe')\n\n/**\n * @typedef {import('../types').HTTPClientExtraOptions} HTTPClientExtraOptions\n * @typedef {import('@libp2p/interfaces/pubsub').Message} Message\n * @typedef {(err: Error, fatal: boolean, msg?: Message) => void} ErrorHandlerFn\n * @typedef {import('ipfs-core-types/src/pubsub').API<HTTPClientExtraOptions & { onError?: ErrorHandlerFn }>} PubsubAPI\n * @typedef {import('../types').Options} Options\n */\n\n/**\n * @param {Options} options\n * @param {import('./subscription-tracker').SubscriptionTracker} subsTracker\n */\nexport const createSubscribe = (options, subsTracker) => {\n  return configure((api) => {\n    /**\n     * @type {PubsubAPI[\"subscribe\"]}\n     */\n    async function subscribe (topic, handler, options = {}) { // eslint-disable-line require-await\n      options.signal = subsTracker.subscribe(topic, handler, options.signal)\n\n      /** @type {(value?: any) => void} */\n      let done\n      /** @type {(error: Error) => void} */\n      let fail\n\n      const result = new Promise((resolve, reject) => {\n        done = resolve\n        fail = reject\n      })\n\n      // In Firefox, the initial call to fetch does not resolve until some data\n      // is received. If this doesn't happen within 1 second assume success\n      const ffWorkaround = setTimeout(() => done(), 1000)\n\n      // Do this async to not block Firefox\n      api.post('pubsub/sub', {\n        signal: options.signal,\n        searchParams: toUrlSearchParams({\n          arg: textToUrlSafeRpc(topic),\n          ...options\n        }),\n        headers: options.headers\n      })\n        .catch((err) => {\n          // Initial subscribe fail, ensure we clean up\n          subsTracker.unsubscribe(topic, handler)\n\n          fail(err)\n        })\n        .then((response) => {\n          clearTimeout(ffWorkaround)\n\n          if (!response) {\n            // if there was no response, the subscribe failed\n            return\n          }\n\n          readMessages(response, {\n            onMessage: (message) => {\n              if (!handler) {\n                return\n              }\n\n              if (typeof handler === 'function') {\n                handler(message)\n                return\n              }\n\n              if (typeof handler.handleEvent === 'function') {\n                handler.handleEvent(message)\n              }\n            },\n            onEnd: () => subsTracker.unsubscribe(topic, handler),\n            onError: options.onError\n          })\n\n          done()\n        })\n\n      return result\n    }\n    return subscribe\n  })(options)\n}\n\n/**\n * @param {import('ipfs-utils/src/types').ExtendedResponse} response\n * @param {object} options\n * @param {(message: Message) => void} options.onMessage\n * @param {() => void} options.onEnd\n * @param {ErrorHandlerFn} [options.onError]\n */\nasync function readMessages (response, { onMessage, onEnd, onError }) {\n  onError = onError || log\n\n  try {\n    for await (const msg of response.ndjson()) {\n      try {\n        if (!msg.from) {\n          continue\n        }\n\n        onMessage({\n          from: peerIdFromString(msg.from),\n          data: rpcToBytes(msg.data),\n          sequenceNumber: rpcToBigInt(msg.seqno),\n          topic: rpcToText(msg.topicIDs[0])\n        })\n      } catch (/** @type {any} */ err) {\n        err.message = `Failed to parse pubsub message: ${err.message}`\n        onError(err, false, msg) // Not fatal\n      }\n    }\n  } catch (/** @type {any} */ err) {\n    if (!isAbortError(err)) {\n      onError(err, true) // Fatal\n    }\n  } finally {\n    onEnd()\n  }\n}\n\n/**\n * @param {Error & {type?:string}} error\n * @returns {boolean}\n */\nconst isAbortError = error => {\n  switch (error.type) {\n    case 'aborted':\n      return true\n    // It is `abort` in Electron instead of `aborted`\n    case 'abort':\n      return true\n    default:\n      // FIXME: In testing with Chrome, err.type is undefined (should not be!)\n      // Temporarily use the name property instead.\n      return error.name === 'AbortError'\n  }\n}\n","\n/**\n * @typedef {import('../types').HTTPClientExtraOptions} HTTPClientExtraOptions\n * @typedef {import('ipfs-core-types/src/pubsub').API<HTTPClientExtraOptions>} PubsubAPI\n * @typedef {import('../types').Options} Options\n */\n\n/**\n * @param {Options} options\n * @param {import('./subscription-tracker').SubscriptionTracker} subsTracker\n */\nexport const createUnsubscribe = (options, subsTracker) => {\n  /**\n   * @type {PubsubAPI[\"unsubscribe\"]}\n   */\n  async function unsubscribe (topic, handler) {\n    subsTracker.unsubscribe(topic, handler)\n  }\n  return unsubscribe\n}\n","\n/**\n * @typedef {import('@libp2p/interfaces/pubsub').Message} Message\n * @typedef {import('@libp2p/interfaces/events').EventHandler<Message>} MessageHandlerFn\n *\n * @typedef {object} Subscription\n * @property {MessageHandlerFn} handler\n * @property {AbortController} controller\n */\n\nexport class SubscriptionTracker {\n  constructor () {\n    /** @type {Map<string, Subscription[]>} */\n    this._subs = new Map()\n  }\n\n  /**\n   * @param {string} topic\n   * @param {MessageHandlerFn} handler\n   * @param {AbortSignal} [signal]\n   */\n  subscribe (topic, handler, signal) {\n    const topicSubs = this._subs.get(topic) || []\n\n    if (topicSubs.find(s => s.handler === handler)) {\n      throw new Error(`Already subscribed to ${topic} with this handler`)\n    }\n\n    // Create controller so a call to unsubscribe can cancel the request\n    const controller = new AbortController()\n\n    this._subs.set(topic, [{ handler, controller }].concat(topicSubs))\n\n    // If there is an external signal, forward the abort event\n    if (signal) {\n      signal.addEventListener('abort', () => this.unsubscribe(topic, handler))\n    }\n\n    return controller.signal\n  }\n\n  /**\n   * @param {string} topic\n   * @param {MessageHandlerFn} [handler]\n   */\n  unsubscribe (topic, handler) {\n    const subs = this._subs.get(topic) || []\n    let unsubs\n\n    if (handler) {\n      this._subs.set(topic, subs.filter(s => s.handler !== handler))\n      unsubs = subs.filter(s => s.handler === handler)\n    } else {\n      this._subs.set(topic, [])\n      unsubs = subs\n    }\n\n    if (!(this._subs.get(topic) || []).length) {\n      this._subs.delete(topic)\n    }\n\n    unsubs.forEach(s => s.controller.abort())\n  }\n}\n","import { createLs } from './ls.js'\nimport { createPeers } from './peers.js'\nimport { createPublish } from './publish.js'\nimport { createSubscribe } from './subscribe.js'\nimport { createUnsubscribe } from './unsubscribe.js'\nimport { SubscriptionTracker } from './subscription-tracker.js'\n\n/**\n * @param {import('../types').Options} config\n */\nexport function createPubsub (config) {\n  const subscriptionTracker = new SubscriptionTracker()\n\n  return {\n    ls: createLs(config),\n    peers: createPeers(config),\n    publish: createPublish(config),\n    subscribe: createSubscribe(config, subscriptionTracker),\n    unsubscribe: createUnsubscribe(config, subscriptionTracker)\n  }\n}\n","import { objectToCamel } from '../lib/object-to-camel.js'\nimport { configure } from '../lib/configure.js'\nimport { toUrlSearchParams } from '../lib/to-url-search-params.js'\n\n/**\n * @typedef {import('../types').HTTPClientExtraOptions} HTTPClientExtraOptions\n * @typedef {import('ipfs-core-types/src/refs').API<HTTPClientExtraOptions>} RefsAPI\n */\n\nexport const createLocal = configure(api => {\n  /**\n   * @type {RefsAPI[\"local\"]}\n   */\n  async function * refsLocal (options = {}) {\n    const res = await api.post('refs/local', {\n      signal: options.signal,\n      transform: objectToCamel,\n      searchParams: toUrlSearchParams(options),\n      headers: options.headers\n    })\n\n    yield * res.ndjson()\n  }\n  return refsLocal\n})\n","import { CID } from 'multiformats/cid'\nimport { objectToCamel } from '../lib/object-to-camel.js'\nimport { configure } from '../lib/configure.js'\nimport { toUrlSearchParams } from '../lib/to-url-search-params.js'\nimport { createLocal } from './local.js'\n\n/**\n * @typedef {import('../types').HTTPClientExtraOptions} HTTPClientExtraOptions\n * @typedef {import('ipfs-core-types/src/refs').API<HTTPClientExtraOptions>} RefsAPI\n */\n\nexport const createRefs = configure((api, opts) => {\n  /**\n   * @type {RefsAPI[\"refs\"]}\n   */\n  const refs = async function * (args, options = {}) {\n    /** @type {import('ipfs-core-types/src/utils').IPFSPath[]} */\n    const argsArr = Array.isArray(args) ? args : [args]\n\n    const res = await api.post('refs', {\n      signal: options.signal,\n      searchParams: toUrlSearchParams({\n        arg: argsArr.map(arg => `${arg instanceof Uint8Array ? CID.decode(arg) : arg}`),\n        ...options\n      }),\n      headers: options.headers,\n      transform: objectToCamel\n    })\n\n    yield * res.ndjson()\n  }\n\n  return Object.assign(refs, {\n    local: createLocal(opts)\n  })\n})\n","import { CID } from 'multiformats/cid'\nimport { configure } from '../lib/configure.js'\nimport { toUrlSearchParams } from '../lib/to-url-search-params.js'\n\n/**\n * @typedef {import('../types').HTTPClientExtraOptions} HTTPClientExtraOptions\n * @typedef {import('ipfs-core-types/src/repo').API<HTTPClientExtraOptions>} RepoAPI\n */\n\nexport const createGc = configure(api => {\n  /**\n   * @type {RepoAPI[\"gc\"]}\n   */\n  async function * gc (options = {}) {\n    const res = await api.post('repo/gc', {\n      signal: options.signal,\n      searchParams: toUrlSearchParams(options),\n      headers: options.headers,\n      transform: (res) => {\n        return {\n          err: res.Error ? new Error(res.Error) : null,\n          cid: (res.Key || {})['/'] ? CID.parse(res.Key['/']) : null\n        }\n      }\n    })\n\n    yield * res.ndjson()\n  }\n  return gc\n})\n","import { configure } from '../lib/configure.js'\nimport { toUrlSearchParams } from '../lib/to-url-search-params.js'\n\n/**\n * @typedef {import('../types').HTTPClientExtraOptions} HTTPClientExtraOptions\n * @typedef {import('ipfs-core-types/src/repo').API<HTTPClientExtraOptions>} RepoAPI\n */\n\nexport const createStat = configure(api => {\n  /**\n   * @type {RepoAPI[\"stat\"]}\n   */\n  async function stat (options = {}) {\n    const res = await api.post('repo/stat', {\n      signal: options.signal,\n      searchParams: toUrlSearchParams(options),\n      headers: options.headers\n    })\n    const data = await res.json()\n\n    return {\n      numObjects: BigInt(data.NumObjects),\n      repoSize: BigInt(data.RepoSize),\n      repoPath: data.RepoPath,\n      version: data.Version,\n      storageMax: BigInt(data.StorageMax)\n    }\n  }\n  return stat\n})\n","import { configure } from '../lib/configure.js'\nimport { toUrlSearchParams } from '../lib/to-url-search-params.js'\n\n/**\n * @typedef {import('../types').HTTPClientExtraOptions} HTTPClientExtraOptions\n * @typedef {import('ipfs-core-types/src/repo').API<HTTPClientExtraOptions>} RepoAPI\n */\n\nexport const createVersion = configure(api => {\n  /**\n   * @type {RepoAPI[\"version\"]}\n   */\n  async function version (options = {}) {\n    const res = await (await api.post('repo/version', {\n      signal: options.signal,\n      searchParams: toUrlSearchParams(options),\n      headers: options.headers\n    })).json()\n\n    return res.Version\n  }\n  return version\n})\n","import { createGc } from './gc.js'\nimport { createStat } from './stat.js'\nimport { createVersion } from './version.js'\n\n/**\n * @param {import('../types').Options} config\n */\nexport function createRepo (config) {\n  return {\n    gc: createGc(config),\n    stat: createStat(config),\n    version: createVersion(config)\n  }\n}\n","import { configure } from '../lib/configure.js'\nimport { toUrlSearchParams } from '../lib/to-url-search-params.js'\n\n/**\n * @typedef {import('../types').HTTPClientExtraOptions} HTTPClientExtraOptions\n * @typedef {import('ipfs-core-types/src/stats').API<HTTPClientExtraOptions>} StatsAPI\n */\n\nexport const createBw = configure(api => {\n  /**\n   * @type {StatsAPI[\"bw\"]}\n   */\n  async function * bw (options = {}) {\n    const res = await api.post('stats/bw', {\n      signal: options.signal,\n      searchParams: toUrlSearchParams(options),\n      headers: options.headers,\n      transform: (stats) => ({\n        totalIn: BigInt(stats.TotalIn),\n        totalOut: BigInt(stats.TotalOut),\n        rateIn: parseFloat(stats.RateIn),\n        rateOut: parseFloat(stats.RateOut)\n      })\n    })\n\n    yield * res.ndjson()\n  }\n  return bw\n})\n","import { createStat as createBitswap } from '../bitswap/stat.js'\nimport { createStat as createRepo } from '../repo/stat.js'\nimport { createBw } from './bw.js'\n\n/**\n * @param {import('../types').Options} config\n */\nexport function createStats (config) {\n  return {\n    bitswap: createBitswap(config),\n    repo: createRepo(config),\n    bw: createBw(config)\n  }\n}\n","import { Multiaddr } from '@multiformats/multiaddr'\nimport { configure } from '../lib/configure.js'\nimport { toUrlSearchParams } from '../lib/to-url-search-params.js'\nimport { peerIdFromString } from '@libp2p/peer-id'\n\n/**\n * @typedef {import('../types').HTTPClientExtraOptions} HTTPClientExtraOptions\n * @typedef {import('ipfs-core-types/src/swarm').API<HTTPClientExtraOptions>} SwarmAPI\n */\n\nexport const createAddrs = configure(api => {\n  /**\n   * @type {SwarmAPI[\"addrs\"]}\n   */\n  async function addrs (options = {}) {\n    const res = await api.post('swarm/addrs', {\n      signal: options.signal,\n      searchParams: toUrlSearchParams(options),\n      headers: options.headers\n    })\n\n    /** @type {{ Addrs: Record<string, string[]> }} */\n    const { Addrs } = await res.json()\n\n    return Object.keys(Addrs).map(id => ({\n      id: peerIdFromString(id),\n      addrs: (Addrs[id] || []).map(a => new Multiaddr(a))\n    }))\n  }\n  return addrs\n})\n","import { configure } from '../lib/configure.js'\nimport { toUrlSearchParams } from '../lib/to-url-search-params.js'\n\n/**\n * @typedef {import('../types').HTTPClientExtraOptions} HTTPClientExtraOptions\n * @typedef {import('ipfs-core-types/src/swarm').API<HTTPClientExtraOptions>} SwarmAPI\n */\n\nexport const createConnect = configure(api => {\n  /**\n   * @type {SwarmAPI[\"connect\"]}\n   */\n  async function connect (addr, options = {}) {\n    const res = await api.post('swarm/connect', {\n      signal: options.signal,\n      searchParams: toUrlSearchParams({\n        arg: addr,\n        ...options\n      }),\n      headers: options.headers\n    })\n    const { Strings } = await res.json()\n\n    return Strings || []\n  }\n  return connect\n})\n","import { configure } from '../lib/configure.js'\nimport { toUrlSearchParams } from '../lib/to-url-search-params.js'\n\n/**\n * @typedef {import('../types').HTTPClientExtraOptions} HTTPClientExtraOptions\n * @typedef {import('ipfs-core-types/src/swarm').API<HTTPClientExtraOptions>} SwarmAPI\n */\n\nexport const createDisconnect = configure(api => {\n  /**\n   * @type {SwarmAPI[\"disconnect\"]}\n   */\n  async function disconnect (addr, options = {}) {\n    const res = await api.post('swarm/disconnect', {\n      signal: options.signal,\n      searchParams: toUrlSearchParams({\n        arg: addr,\n        ...options\n      }),\n      headers: options.headers\n    })\n    const { Strings } = await res.json()\n\n    return Strings || []\n  }\n  return disconnect\n})\n","import { Multiaddr } from '@multiformats/multiaddr'\nimport { configure } from '../lib/configure.js'\nimport { toUrlSearchParams } from '../lib/to-url-search-params.js'\n\n/**\n * @typedef {import('../types').HTTPClientExtraOptions} HTTPClientExtraOptions\n * @typedef {import('ipfs-core-types/src/swarm').API<HTTPClientExtraOptions>} SwarmAPI\n */\n\nexport const createLocalAddrs = configure(api => {\n  /**\n   * @type {SwarmAPI[\"localAddrs\"]}\n   */\n  async function localAddrs (options = {}) {\n    const res = await api.post('swarm/addrs/local', {\n      signal: options.signal,\n      searchParams: toUrlSearchParams(options),\n      headers: options.headers\n    })\n\n    /** @type {{ Strings: string[] }} */\n    const { Strings } = await res.json()\n\n    return (Strings || []).map(a => new Multiaddr(a))\n  }\n  return localAddrs\n})\n","import { Multiaddr } from '@multiformats/multiaddr'\nimport { configure } from '../lib/configure.js'\nimport { toUrlSearchParams } from '../lib/to-url-search-params.js'\nimport { peerIdFromString } from '@libp2p/peer-id'\n\n/**\n * @typedef {import('../types').HTTPClientExtraOptions} HTTPClientExtraOptions\n * @typedef {import('ipfs-core-types/src/swarm').API<HTTPClientExtraOptions>} SwarmAPI\n */\n\nexport const createPeers = configure(api => {\n  /**\n   * @type {SwarmAPI[\"peers\"]}\n   */\n  async function peers (options = {}) {\n    const res = await api.post('swarm/peers', {\n      signal: options.signal,\n      searchParams: toUrlSearchParams(options),\n      headers: options.headers\n    })\n\n    /** @type {{ Peers: { Peer: string, Addr: string, Muxer?: string, Latency?: string, Streams?: string[], Direction?: 0 | 1 }[] }} */\n    const { Peers } = await res.json()\n\n    return (Peers || []).map(peer => {\n      return {\n        addr: new Multiaddr(peer.Addr),\n        peer: peerIdFromString(peer.Peer),\n        muxer: peer.Muxer,\n        latency: peer.Latency,\n        streams: peer.Streams,\n        direction: peer.Direction == null ? undefined : peer.Direction === 0 ? 'inbound' : 'outbound'\n      }\n    })\n  }\n  return peers\n})\n","import { createAddrs } from './addrs.js'\nimport { createConnect } from './connect.js'\nimport { createDisconnect } from './disconnect.js'\nimport { createLocalAddrs } from './local-addrs.js'\nimport { createPeers } from './peers.js'\n\n/**\n * @param {import('../types').Options} config\n */\nexport function createSwarm (config) {\n  return {\n    addrs: createAddrs(config),\n    connect: createConnect(config),\n    disconnect: createDisconnect(config),\n    localAddrs: createLocalAddrs(config),\n    peers: createPeers(config)\n  }\n}\n","import { CID } from 'multiformats/cid'\nimport { objectToCamel } from './lib/object-to-camel.js'\nimport { configure } from './lib/configure.js'\nimport { multipartRequest } from 'ipfs-core-utils/multipart-request'\nimport { toUrlSearchParams } from './lib/to-url-search-params.js'\nimport { abortSignal } from './lib/abort-signal.js'\n\n/**\n * @typedef {import('ipfs-utils/src/types').ProgressFn} IPFSUtilsHttpUploadProgressFn\n * @typedef {import('ipfs-core-types/src/root').AddProgressFn} IPFSCoreAddProgressFn\n * @typedef {import('./types').HTTPClientExtraOptions} HTTPClientExtraOptions\n * @typedef {import('ipfs-core-types/src/root').API<HTTPClientExtraOptions>} RootAPI\n * @typedef {import('ipfs-core-types/src/root').AddResult} AddResult\n */\n\nexport const createAddAll = configure((api) => {\n  /**\n   * @type {RootAPI[\"addAll\"]}\n   */\n  async function * addAll (source, options = {}) {\n    // allow aborting requests on body errors\n    const controller = new AbortController()\n    const signal = abortSignal(controller.signal, options.signal)\n    const { headers, body, total, parts } =\n      await multipartRequest(source, controller, options.headers)\n\n    // In browser response body only starts streaming once upload is\n    // complete, at which point all the progress updates are invalid. If\n    // length of the content is computable we can interpret progress from\n    // `{ total, loaded}` passed to `onUploadProgress` and `multipart.total`\n    // in which case we disable progress updates to be written out.\n    const [progressFn, onUploadProgress] = typeof options.progress === 'function'\n      ? createProgressHandler(total, parts, options.progress)\n      : [undefined, undefined]\n\n    const res = await api.post('add', {\n      searchParams: toUrlSearchParams({\n        'stream-channels': true,\n        ...options,\n        progress: Boolean(progressFn)\n      }),\n      onUploadProgress,\n      signal,\n      headers,\n      body\n    })\n\n    for await (let file of res.ndjson()) {\n      file = objectToCamel(file)\n\n      if (file.hash !== undefined) {\n        yield toCoreInterface(file)\n      } else if (progressFn) {\n        progressFn(file.bytes || 0, file.name)\n      }\n    }\n  }\n  return addAll\n})\n\n/**\n * Returns simple progress callback when content length isn't computable or a\n * progress event handler that calculates progress from upload progress events.\n *\n * @param {number} total\n * @param {{name:string, start:number, end:number}[]|null} parts\n * @param {IPFSCoreAddProgressFn} progress\n * @returns {[IPFSCoreAddProgressFn|undefined, IPFSUtilsHttpUploadProgressFn|undefined]}\n */\nconst createProgressHandler = (total, parts, progress) =>\n  parts ? [undefined, createOnUploadProgress(total, parts, progress)] : [progress, undefined]\n\n/**\n * Creates a progress handler that interpolates progress from upload progress\n * events and total size of the content that is added.\n *\n * @param {number} size - actual content size\n * @param {{name:string, start:number, end:number}[]} parts\n * @param {IPFSCoreAddProgressFn} progress\n * @returns {IPFSUtilsHttpUploadProgressFn}\n */\nconst createOnUploadProgress = (size, parts, progress) => {\n  let index = 0\n  const count = parts.length\n  return ({ loaded, total }) => {\n    // Derive position from the current progress.\n    const position = Math.floor(loaded / total * size)\n    while (index < count) {\n      const { start, end, name } = parts[index]\n      // If within current part range report progress and break the loop\n      if (position < end) {\n        progress(position - start, name)\n        break\n      // If passed current part range report final byte for the chunk and\n      // move to next one.\n      } else {\n        progress(end - start, name)\n        index += 1\n      }\n    }\n  }\n}\n\n/**\n * @param {object} input\n * @param {string} input.name\n * @param {string} input.hash\n * @param {string} input.size\n * @param {string} [input.mode]\n * @param {number} [input.mtime]\n * @param {number} [input.mtimeNsecs]\n */\nfunction toCoreInterface ({ name, hash, size, mode, mtime, mtimeNsecs }) {\n  /** @type {AddResult} */\n  const output = {\n    path: name,\n    cid: CID.parse(hash),\n    size: parseInt(size)\n  }\n\n  if (mode != null) {\n    output.mode = parseInt(mode, 8)\n  }\n\n  if (mtime != null) {\n    output.mtime = {\n      secs: mtime,\n      nsecs: mtimeNsecs || 0\n    }\n  }\n\n  return output\n}\n","import errCode from 'err-code'\nimport { fromString as uint8ArrayFromString } from 'uint8arrays/from-string'\nimport browserStreamToIt from 'browser-readablestream-to-it'\nimport blobToIt from 'blob-to-it'\nimport itPeekable from 'it-peekable'\nimport all from 'it-all'\nimport map from 'it-map'\nimport {\n  isBytes,\n  isReadableStream,\n  isBlob\n} from './utils.js'\n\n/**\n * @template T\n * @param {T} thing\n */\nasync function * toAsyncIterable (thing) {\n  yield thing\n}\n\n/**\n * @param {import('ipfs-core-types/src/utils').ToContent} input\n */\nexport async function normaliseContent (input) {\n  // Bytes | String\n  if (isBytes(input)) {\n    return toAsyncIterable(toBytes(input))\n  }\n\n  if (typeof input === 'string' || input instanceof String) {\n    return toAsyncIterable(toBytes(input.toString()))\n  }\n\n  // Blob\n  if (isBlob(input)) {\n    return blobToIt(input)\n  }\n\n  // Browser stream\n  if (isReadableStream(input)) {\n    input = browserStreamToIt(input)\n  }\n\n  // (Async)Iterator<?>\n  if (Symbol.iterator in input || Symbol.asyncIterator in input) {\n    /** @type {any} peekable */\n    const peekable = itPeekable(input)\n\n    /** @type {any} value */\n    const { value, done } = await peekable.peek()\n\n    if (done) {\n      // make sure empty iterators result in empty files\n      return toAsyncIterable(new Uint8Array(0))\n    }\n\n    peekable.push(value)\n\n    // (Async)Iterable<Number>\n    if (Number.isInteger(value)) {\n      return toAsyncIterable(Uint8Array.from(await all(peekable)))\n    }\n\n    // (Async)Iterable<Bytes|String>\n    if (isBytes(value) || typeof value === 'string' || value instanceof String) {\n      return map(peekable, toBytes)\n    }\n  }\n\n  throw errCode(new Error(`Unexpected input: ${input}`), 'ERR_UNEXPECTED_INPUT')\n}\n\n/**\n * @param {ArrayBuffer | ArrayBufferView | string | InstanceType<typeof window.String> | number[]} chunk\n */\nfunction toBytes (chunk) {\n  if (chunk instanceof Uint8Array) {\n    return chunk\n  }\n\n  if (ArrayBuffer.isView(chunk)) {\n    return new Uint8Array(chunk.buffer, chunk.byteOffset, chunk.byteLength)\n  }\n\n  if (chunk instanceof ArrayBuffer) {\n    return new Uint8Array(chunk)\n  }\n\n  if (Array.isArray(chunk)) {\n    return Uint8Array.from(chunk)\n  }\n\n  return uint8ArrayFromString(chunk.toString())\n}\n","import errCode from 'err-code'\nimport browserStreamToIt from 'browser-readablestream-to-it'\nimport itPeekable from 'it-peekable'\nimport {\n  isBytes,\n  isBlob,\n  isReadableStream,\n  isFileObject\n} from './utils.js'\nimport {\n  parseMtime,\n  parseMode\n} from 'ipfs-unixfs'\n\n/**\n * @typedef {import('ipfs-core-types/src/utils').ToContent} ToContent\n * @typedef {import('ipfs-unixfs-importer').ImportCandidate} ImporterImportCandidate\n * @typedef {import('ipfs-core-types/src/utils').ImportCandidate} ImportCandidate\n * @typedef {import('ipfs-core-types/src/utils').ImportCandidateStream} ImportCandidateStream\n */\n\n/**\n * @param {ImportCandidate} input\n * @param {(content:ToContent) => Promise<AsyncIterable<Uint8Array>>} normaliseContent\n */\n// eslint-disable-next-line complexity\nexport async function * normaliseCandidateSingle (input, normaliseContent) {\n  if (input === null || input === undefined) {\n    throw errCode(new Error(`Unexpected input: ${input}`), 'ERR_UNEXPECTED_INPUT')\n  }\n\n  // String\n  if (typeof input === 'string' || input instanceof String) {\n    yield toFileObject(input.toString(), normaliseContent)\n    return\n  }\n\n  // Uint8Array|ArrayBuffer|TypedArray\n  // Blob|File\n  if (isBytes(input) || isBlob(input)) {\n    yield toFileObject(input, normaliseContent)\n    return\n  }\n\n  // Browser ReadableStream\n  if (isReadableStream(input)) {\n    input = browserStreamToIt(input)\n  }\n\n  // Iterable<?>\n  if (Symbol.iterator in input || Symbol.asyncIterator in input) {\n    // @ts-expect-error it's (async)iterable\n    const peekable = itPeekable(input)\n\n    /** @type {any} value **/\n    const { value, done } = await peekable.peek()\n\n    if (done) {\n      // make sure empty iterators result in empty files\n      yield { content: [] }\n      return\n    }\n\n    peekable.push(value)\n\n    // (Async)Iterable<Number>\n    // (Async)Iterable<Bytes>\n    // (Async)Iterable<String>\n    if (Number.isInteger(value) || isBytes(value) || typeof value === 'string' || value instanceof String) {\n      yield toFileObject(peekable, normaliseContent)\n      return\n    }\n\n    throw errCode(new Error('Unexpected input: multiple items passed - if you are using ipfs.add, please use ipfs.addAll instead'), 'ERR_UNEXPECTED_INPUT')\n  }\n\n  // { path, content: ? }\n  // Note: Detected _after_ (Async)Iterable<?> because Node.js fs.ReadStreams have a\n  // `path` property that passes this check.\n  if (isFileObject(input)) {\n    yield toFileObject(input, normaliseContent)\n    return\n  }\n\n  throw errCode(new Error('Unexpected input: cannot convert \"' + typeof input + '\" into ImportCandidate'), 'ERR_UNEXPECTED_INPUT')\n}\n\n/**\n * @param {ImportCandidate} input\n * @param {(content:ToContent) => Promise<AsyncIterable<Uint8Array>>} normaliseContent\n */\nasync function toFileObject (input, normaliseContent) {\n  // @ts-expect-error - Those properties don't exist on most input types\n  const { path, mode, mtime, content } = input\n\n  /** @type {ImporterImportCandidate} */\n  const file = {\n    path: path || '',\n    mode: parseMode(mode),\n    mtime: parseMtime(mtime)\n  }\n\n  if (content) {\n    file.content = await normaliseContent(content)\n  } else if (!path) { // Not already a file object with path or content prop\n    // @ts-expect-error - input still can be different ToContent\n    file.content = await normaliseContent(input)\n  }\n\n  return file\n}\n","import { normaliseContent } from './normalise-content.js'\nimport { normaliseCandidateSingle } from './normalise-candidate-single.js'\n\n/**\n * @typedef {import('ipfs-core-types/src/utils').ImportCandidate} ImportCandidate\n */\n\n/**\n * Transforms any of the `ipfs.add` input types into\n *\n * ```\n * AsyncIterable<{ path, mode, mtime, content: AsyncIterable<Uint8Array> }>\n * ```\n *\n * See https://github.com/ipfs/js-ipfs/blob/master/docs/core-api/FILES.md#ipfsadddata-options\n *\n * @param {ImportCandidate} input\n */\nexport function normaliseInput (input) {\n  return normaliseCandidateSingle(input, normaliseContent)\n}\n","import { createAddAll } from './add-all.js'\nimport last from 'it-last'\nimport { configure } from './lib/configure.js'\nimport { normaliseInput } from 'ipfs-core-utils/files/normalise-input-single'\n\n/**\n * @typedef {import('./types').HTTPClientExtraOptions} HTTPClientExtraOptions\n * @typedef {import('ipfs-core-types/src/root').API<HTTPClientExtraOptions>} RootAPI\n */\n\n/**\n * @param {import('./types').Options} options\n */\nexport function createAdd (options) {\n  const all = createAddAll(options)\n  return configure(() => {\n    /**\n     * @type {RootAPI[\"add\"]}\n     */\n    async function add (input, options = {}) {\n      // @ts-expect-error - last may return undefined if source is empty\n      return await last(all(normaliseInput(input), options))\n    }\n    return add\n  })(options)\n}\n","import { configure } from './lib/configure.js'\nimport { toUrlSearchParams } from './lib/to-url-search-params.js'\n\n/**\n * @typedef {import('./types').HTTPClientExtraOptions} HTTPClientExtraOptions\n * @typedef {import('ipfs-core-types/src/root').API<HTTPClientExtraOptions>} RootAPI\n */\n\nexport const createCat = configure(api => {\n  /**\n   * @type {RootAPI[\"cat\"]}\n   */\n  async function * cat (path, options = {}) {\n    const res = await api.post('cat', {\n      signal: options.signal,\n      searchParams: toUrlSearchParams({\n        arg: path.toString(),\n        ...options\n      }),\n      headers: options.headers\n    })\n\n    yield * res.iterator()\n  }\n\n  return cat\n})\n","import { configure } from './lib/configure.js'\nimport { toUrlSearchParams } from './lib/to-url-search-params.js'\n\n/**\n * @typedef {import('./types').HTTPClientExtraOptions} HTTPClientExtraOptions\n * @typedef {import('ipfs-core-types/src/root').API<HTTPClientExtraOptions>} RootAPI\n */\n\nexport const createCommands = configure(api => {\n  /**\n   * @type {RootAPI[\"commands\"]}\n   */\n  const commands = async (options = {}) => {\n    const res = await api.post('commands', {\n      signal: options.signal,\n      searchParams: toUrlSearchParams(options),\n      headers: options.headers\n    })\n\n    return res.json()\n  }\n  return commands\n})\n","import { configure } from './lib/configure.js'\nimport { toUrlSearchParams } from './lib/to-url-search-params.js'\n\n/**\n * @typedef {import('./types').HTTPClientExtraOptions} HTTPClientExtraOptions\n * @typedef {import('ipfs-core-types/src/root').API<HTTPClientExtraOptions>} RootAPI\n */\n\nexport const createDns = configure(api => {\n  /**\n   * @type {RootAPI[\"dns\"]}\n   */\n  const dns = async (domain, options = {}) => {\n    const res = await api.post('dns', {\n      signal: options.signal,\n      searchParams: toUrlSearchParams({\n        arg: domain,\n        ...options\n      }),\n      headers: options.headers\n    })\n    const data = await res.json()\n\n    return data.Path\n  }\n\n  return dns\n})\n","import { configure } from './lib/configure.js'\n\nexport const createGetEndpointConfig = configure(api => {\n  return () => {\n    const url = new URL(api.opts.base || '')\n    return {\n      host: url.hostname,\n      port: url.port,\n      protocol: url.protocol,\n      pathname: url.pathname,\n      'api-path': url.pathname\n    }\n  }\n})\n","import { CID } from 'multiformats/cid'\nimport { configure } from './lib/configure.js'\nimport { toUrlSearchParams } from './lib/to-url-search-params.js'\n\n/**\n * @typedef {import('./types').HTTPClientExtraOptions} HTTPClientExtraOptions\n * @typedef {import('ipfs-core-types/src/root').API<HTTPClientExtraOptions>} RootAPI\n */\n\nexport const createGet = configure(api => {\n  /**\n   * @type {RootAPI[\"get\"]}\n   */\n  async function * get (path, options = {}) {\n    /** @type {Record<string, any>} */\n    const opts = {\n      arg: `${path instanceof Uint8Array ? CID.decode(path) : path}`,\n      ...options\n    }\n\n    if (opts.compressionLevel) {\n      opts['compression-level'] = opts.compressionLevel\n      delete opts.compressionLevel\n    }\n\n    const res = await api.post('get', {\n      signal: options.signal,\n      searchParams: toUrlSearchParams(opts),\n      headers: options.headers\n    })\n\n    yield * res.iterator()\n  }\n\n  return get\n})\n","import { objectToCamel } from './lib/object-to-camel.js'\nimport { Multiaddr } from '@multiformats/multiaddr'\nimport { configure } from './lib/configure.js'\nimport { toUrlSearchParams } from './lib/to-url-search-params.js'\nimport { peerIdFromString } from '@libp2p/peer-id'\n\n/**\n * @typedef {import('./types').HTTPClientExtraOptions} HTTPClientExtraOptions\n * @typedef {import('ipfs-core-types/src/root').API<HTTPClientExtraOptions>} RootAPI\n */\n\nexport const createId = configure(api => {\n  /**\n   * @type {RootAPI[\"id\"]}\n   */\n  async function id (options = {}) {\n    const res = await api.post('id', {\n      signal: options.signal,\n      searchParams: toUrlSearchParams({\n        arg: options.peerId ? options.peerId.toString() : undefined,\n        ...options\n      }),\n      headers: options.headers\n    })\n    const data = await res.json()\n\n    const output = {\n      ...objectToCamel(data)\n    }\n\n    output.id = peerIdFromString(output.id)\n\n    if (output.addresses) {\n      output.addresses = output.addresses.map((/** @type {string} */ ma) => new Multiaddr(ma))\n    }\n\n    // @ts-expect-error server output is not typed\n    return output\n  }\n  return id\n})\n","import { createId } from './id.js'\n\n/**\n * @typedef {import('./types').HTTPClientExtraOptions} HTTPClientExtraOptions\n * @typedef {import('ipfs-core-types/src/root').API<HTTPClientExtraOptions>} RootAPI\n */\n\n/**\n * @param {import('./types').Options} options\n */\nexport const createIsOnline = options => {\n  const id = createId(options)\n\n  /**\n   * @type {RootAPI[\"isOnline\"]}\n   */\n  async function isOnline (options = {}) {\n    const res = await id(options)\n\n    return Boolean(res && res.addresses && res.addresses.length)\n  }\n  return isOnline\n}\n","import { CID } from 'multiformats/cid'\nimport { configure } from './lib/configure.js'\nimport { toUrlSearchParams } from './lib/to-url-search-params.js'\nimport { createStat } from './files/stat.js'\n\n/**\n * @typedef {import('./types').HTTPClientExtraOptions} HTTPClientExtraOptions\n * @typedef {import('ipfs-core-types/src/root').API<HTTPClientExtraOptions>} RootAPI\n */\n\nexport const createLs = configure((api, opts) => {\n  /**\n   * @type {RootAPI[\"ls\"]}\n   */\n  async function * ls (path, options = {}) {\n    const pathStr = `${path instanceof Uint8Array ? CID.decode(path) : path}`\n\n    /**\n     * @param {*} link\n     */\n    async function mapLink (link) {\n      let hash = link.Hash\n\n      if (hash.includes('/')) {\n        // the hash is a path, but we need the CID\n        const ipfsPath = hash.startsWith('/ipfs/') ? hash : `/ipfs/${hash}`\n        const stats = await createStat(opts)(ipfsPath)\n\n        hash = stats.cid\n      } else {\n        hash = CID.parse(hash)\n      }\n\n      /** @type {import('ipfs-core-types/src/root').IPFSEntry} */\n      const entry = {\n        name: link.Name,\n        path: pathStr + (link.Name ? `/${link.Name}` : ''),\n        size: link.Size,\n        cid: hash,\n        type: typeOf(link)\n      }\n\n      if (link.Mode) {\n        entry.mode = parseInt(link.Mode, 8)\n      }\n\n      if (link.Mtime !== undefined && link.Mtime !== null) {\n        entry.mtime = {\n          secs: link.Mtime\n        }\n\n        if (link.MtimeNsecs !== undefined && link.MtimeNsecs !== null) {\n          entry.mtime.nsecs = link.MtimeNsecs\n        }\n      }\n\n      return entry\n    }\n\n    const res = await api.post('ls', {\n      signal: options.signal,\n      searchParams: toUrlSearchParams({\n        arg: pathStr,\n        ...options\n      }),\n      headers: options.headers\n    })\n\n    for await (let result of res.ndjson()) {\n      result = result.Objects\n\n      if (!result) {\n        throw new Error('expected .Objects in results')\n      }\n\n      result = result[0]\n      if (!result) {\n        throw new Error('expected one array in results.Objects')\n      }\n\n      const links = result.Links\n      if (!Array.isArray(links)) {\n        throw new Error('expected one array in results.Objects[0].Links')\n      }\n\n      if (!links.length) {\n        // no links, this is a file, yield a single result\n        yield mapLink(result)\n\n        return\n      }\n\n      yield * links.map(mapLink)\n    }\n  }\n  return ls\n})\n\n/**\n * @param {any} link\n */\nfunction typeOf (link) {\n  switch (link.Type) {\n    case 1:\n    case 5:\n      return 'dir'\n    case 2:\n      return 'file'\n    default:\n      return 'file'\n  }\n}\n","import { objectToCamel } from './lib/object-to-camel.js'\nimport { configure } from './lib/configure.js'\nimport { toUrlSearchParams } from './lib/to-url-search-params.js'\n\n/**\n * @typedef {import('./types').HTTPClientExtraOptions} HTTPClientExtraOptions\n * @typedef {import('ipfs-core-types/src/root').API<HTTPClientExtraOptions>} RootAPI\n */\n\nexport const createMount = configure(api => {\n  /**\n   * @type {RootAPI[\"mount\"]}\n   */\n  async function mount (options = {}) {\n    const res = await api.post('dns', {\n      signal: options.signal,\n      searchParams: toUrlSearchParams(options),\n      headers: options.headers\n    })\n\n    return objectToCamel(await res.json())\n  }\n  return mount\n})\n","import { objectToCamel } from './lib/object-to-camel.js'\nimport { configure } from './lib/configure.js'\nimport { toUrlSearchParams } from './lib/to-url-search-params.js'\n\n/**\n * @typedef {import('./types').HTTPClientExtraOptions} HTTPClientExtraOptions\n * @typedef {import('ipfs-core-types/src/root').API<HTTPClientExtraOptions>} RootAPI\n */\n\nexport const createPing = configure(api => {\n  /**\n   * @type {RootAPI[\"ping\"]}\n   */\n  async function * ping (peerId, options = {}) {\n    const res = await api.post('ping', {\n      signal: options.signal,\n      searchParams: toUrlSearchParams({\n        arg: `${peerId}`,\n        ...options\n      }),\n      headers: options.headers,\n      transform: objectToCamel\n    })\n\n    yield * res.ndjson()\n  }\n  return ping\n})\n","import { configure } from './lib/configure.js'\nimport { toUrlSearchParams } from './lib/to-url-search-params.js'\n\n/**\n * @typedef {import('./types').HTTPClientExtraOptions} HTTPClientExtraOptions\n * @typedef {import('ipfs-core-types/src/root').API<HTTPClientExtraOptions>} RootAPI\n */\n\nexport const createResolve = configure(api => {\n  /**\n   * @type {RootAPI[\"resolve\"]}\n   */\n  async function resolve (path, options = {}) {\n    const res = await api.post('resolve', {\n      signal: options.signal,\n      searchParams: toUrlSearchParams({\n        arg: path,\n        ...options\n      }),\n      headers: options.headers\n    })\n    const { Path } = await res.json()\n    return Path\n  }\n  return resolve\n})\n","import { configure } from './lib/configure.js'\nimport errCode from 'err-code'\n\n/**\n * @typedef {import('./types').HTTPClientExtraOptions} HTTPClientExtraOptions\n * @typedef {import('ipfs-core-types/src/root').API<HTTPClientExtraOptions>} RootAPI\n */\n\nexport const createStart = configure(api => {\n  /**\n   * @type {RootAPI[\"start\"]}\n   */\n  const start = async (options = {}) => {\n    throw errCode(new Error('Not implemented'), 'ERR_NOT_IMPLEMENTED')\n  }\n\n  return start\n})\n","import { configure } from './lib/configure.js'\nimport { toUrlSearchParams } from './lib/to-url-search-params.js'\n\n/**\n * @typedef {import('./types').HTTPClientExtraOptions} HTTPClientExtraOptions\n * @typedef {import('ipfs-core-types/src/root').API<HTTPClientExtraOptions>} RootAPI\n */\n\nexport const createStop = configure(api => {\n  /**\n   * @type {RootAPI[\"stop\"]}\n   */\n  async function stop (options = {}) {\n    const res = await api.post('shutdown', {\n      signal: options.signal,\n      searchParams: toUrlSearchParams(options),\n      headers: options.headers\n    })\n\n    await res.text()\n  }\n  return stop\n})\n","import { objectToCamel } from './lib/object-to-camel.js'\nimport { configure } from './lib/configure.js'\nimport { toUrlSearchParams } from './lib/to-url-search-params.js'\n\n/**\n * @typedef {import('./types').HTTPClientExtraOptions} HTTPClientExtraOptions\n * @typedef {import('ipfs-core-types/src/root').API<HTTPClientExtraOptions>} RootAPI\n */\n\nexport const createVersion = configure(api => {\n  /**\n   * @type {RootAPI[\"version\"]}\n   */\n  async function version (options = {}) {\n    const res = await api.post('version', {\n      signal: options.signal,\n      searchParams: toUrlSearchParams(options),\n      headers: options.headers\n    })\n\n    // @ts-expect-error server output is not typed\n    return {\n      ...objectToCamel(await res.json()),\n      'ipfs-http-client': '1.0.0'\n    }\n  }\n\n  return version\n})\n","/* eslint-env browser */\n\nimport { Multibases } from 'ipfs-core-utils/multibases'\nimport { Multicodecs } from 'ipfs-core-utils/multicodecs'\nimport { Multihashes } from 'ipfs-core-utils/multihashes'\nimport * as dagPB from '@ipld/dag-pb'\nimport * as dagCBOR from '@ipld/dag-cbor'\nimport * as dagJSON from '@ipld/dag-json'\nimport * as dagJOSE from 'dag-jose'\nimport { identity } from 'multiformats/hashes/identity'\nimport { bases, hashes, codecs } from 'multiformats/basics'\nimport { createBitswap } from './bitswap/index.js'\nimport { createBlock } from './block/index.js'\nimport { createBootstrap } from './bootstrap/index.js'\nimport { createConfig } from './config/index.js'\nimport { createDag } from './dag/index.js'\nimport { createDht } from './dht/index.js'\nimport { createDiag } from './diag/index.js'\nimport { createFiles } from './files/index.js'\nimport { createKey } from './key/index.js'\nimport { createLog } from './log/index.js'\nimport { createName } from './name/index.js'\nimport { createObject } from './object/index.js'\nimport { createPin } from './pin/index.js'\nimport { createPubsub } from './pubsub/index.js'\nimport { createRefs } from './refs/index.js'\nimport { createRepo } from './repo/index.js'\nimport { createStats } from './stats/index.js'\nimport { createSwarm } from './swarm/index.js'\nimport { createAdd } from './add.js'\nimport { createAddAll } from './add-all.js'\nimport { createCat } from './cat.js'\nimport { createCommands } from './commands.js'\nimport { createDns } from './dns.js'\nimport { createGetEndpointConfig } from './get-endpoint-config.js'\nimport { createGet } from './get.js'\nimport { createId } from './id.js'\nimport { createIsOnline } from './is-online.js'\nimport { createLs } from './ls.js'\nimport { createMount } from './mount.js'\nimport { createPing } from './ping.js'\nimport { createResolve } from './resolve.js'\nimport { createStart } from './start.js'\nimport { createStop } from './stop.js'\nimport { createVersion } from './version.js'\nimport globSourceImport from 'ipfs-utils/src/files/glob-source.js'\n\n/**\n * @typedef {import('multiformats/codecs/interface').BlockCodec<any, any>} BlockCodec\n * @typedef {import('multiformats/hashes/interface').MultihashHasher} MultihashHasher\n * @typedef {import('multiformats/bases/interface').MultibaseCodec<any>} MultibaseCodec\n * @typedef {import('./types').Options} Options\n * @typedef {import('./types').LoadBaseFn} LoadBaseFn\n * @typedef {import('./types').LoadCodecFn} LoadCodecFn\n * @typedef {import('./types').LoadHasherFn} LoadHasherFn\n * @typedef {import('./types').IPLDOptions} IPLDOptions\n * @typedef {import('./types').HTTPClientExtraOptions} HTTPClientExtraOptions\n * @typedef {import('./types').EndpointConfig} EndpointConfig\n * @typedef {import('./types').IPFSHTTPClient} IPFSHTTPClient\n */\n\n/**\n * @param {Options} options\n */\nexport function create (options = {}) {\n  /**\n   * @type {BlockCodec}\n   */\n  const id = {\n    name: identity.name,\n    code: identity.code,\n    encode: (id) => id,\n    decode: (id) => id\n  }\n\n  /** @type {MultibaseCodec[]} */\n  const multibaseCodecs = Object.values(bases);\n\n  (options.ipld && options.ipld.bases ? options.ipld.bases : []).forEach(base => multibaseCodecs.push(base))\n\n  const multibases = new Multibases({\n    bases: multibaseCodecs,\n    loadBase: options.ipld && options.ipld.loadBase\n  })\n\n  /** @type {BlockCodec[]} */\n  const blockCodecs = Object.values(codecs);\n\n  [dagPB, dagCBOR, dagJSON, dagJOSE, id].concat((options.ipld && options.ipld.codecs) || []).forEach(codec => blockCodecs.push(codec))\n\n  const multicodecs = new Multicodecs({\n    codecs: blockCodecs,\n    loadCodec: options.ipld && options.ipld.loadCodec\n  })\n\n  /** @type {MultihashHasher[]} */\n  const multihashHashers = Object.values(hashes);\n\n  (options.ipld && options.ipld.hashers ? options.ipld.hashers : []).forEach(hasher => multihashHashers.push(hasher))\n\n  const multihashes = new Multihashes({\n    hashers: multihashHashers,\n    loadHasher: options.ipld && options.ipld.loadHasher\n  })\n\n  /** @type {IPFSHTTPClient} */\n  const client = {\n    add: createAdd(options),\n    addAll: createAddAll(options),\n    bitswap: createBitswap(options),\n    block: createBlock(options),\n    bootstrap: createBootstrap(options),\n    cat: createCat(options),\n    commands: createCommands(options),\n    config: createConfig(options),\n    dag: createDag(multicodecs, options),\n    dht: createDht(options),\n    diag: createDiag(options),\n    dns: createDns(options),\n    files: createFiles(options),\n    get: createGet(options),\n    getEndpointConfig: createGetEndpointConfig(options),\n    id: createId(options),\n    isOnline: createIsOnline(options),\n    key: createKey(options),\n    log: createLog(options),\n    ls: createLs(options),\n    mount: createMount(options),\n    name: createName(options),\n    object: createObject(multicodecs, options),\n    pin: createPin(options),\n    ping: createPing(options),\n    pubsub: createPubsub(options),\n    refs: createRefs(options),\n    repo: createRepo(options),\n    resolve: createResolve(options),\n    start: createStart(options),\n    stats: createStats(options),\n    stop: createStop(options),\n    swarm: createSwarm(options),\n    version: createVersion(options),\n    bases: multibases,\n    codecs: multicodecs,\n    hashers: multihashes\n  }\n\n  return client\n}\n\nexport { CID } from 'multiformats/cid'\nexport { Multiaddr as multiaddr } from '@multiformats/multiaddr'\nexport { default as urlSource } from 'ipfs-utils/src/files/url-source.js'\nexport const globSource = globSourceImport\n","import { createWantlist } from './wantlist.js'\nimport { createWantlistForPeer } from './wantlist-for-peer.js'\nimport { createStat } from './stat.js'\nimport { createUnwant } from './unwant.js'\n\n/**\n * @param {import('../types').Options} config\n */\nexport function createBitswap (config) {\n  return {\n    wantlist: createWantlist(config),\n    wantlistForPeer: createWantlistForPeer(config),\n    unwant: createUnwant(config),\n    stat: createStat(config)\n  }\n}\n"],"names":["browserReadableStreamToIt","require","module","exports","blob","stream","Response","body","anySignal","signals","controller","globalThis","AbortController","onAbort","abort","_step","_iterator","_createForOfIteratorHelper","s","n","done","signal","value","removeEventListener","err","e","f","_step2","_iterator2","addEventListener","aborted","isElectron","IS_ENV_WITH_DOM","window","document","nodeType","IS_ELECTRON","IS_BROWSER","IS_ELECTRON_MAIN","IS_ELECTRON_RENDERER","IS_NODE","process","release","name","IS_WEBWORKER","importScripts","self","WorkerGlobalScope","IS_TEST","IS_REACT_NATIVE","navigator","product","isTest","isElectronMain","isElectronRenderer","isNode","isBrowser","isWebWorker","isEnvWithDom","isReactNative","_regeneratorRuntime","_wrapAsyncGenerator","_awaitAsyncGenerator","_asyncGeneratorDelegate","_asyncIterator","HTTP","readURLContent","_x","_x2","_readURLContent","apply","arguments","mark","_callee","url","options","http","response","wrap","_context","prev","next","get","sent","delegateYield","iterator","stop","path","decodeURIComponent","URL","pathname","split","pop","content","_defineProperty","_objectSpread","_asyncToGenerator","_classCallCheck","_createClass","_require","fetch","Request","Headers","_require2","TimeoutError","HTTPError","merge","ignoreUndefined","_require3","URLSearchParams","browserReableStreamToIt","_require4","all","timeout","promise","ms","abortController","undefined","start","Date","now","timedOut","Promise","resolve","reject","timeoutID","setTimeout","after","res","clearTimeout","then","defaults","throwHttpErrors","credentials","length","this","opts","key","_fetch2","_callee3","resource","headers","searchParams","transformSearchParams","json","_args3","_context3","TypeError","toString","base","search","JSON","stringify","set","ReadableStream","t0","Blob","t1","duplex","ok","handleError","fromStream","ndjson","_callee2","_iteratorAbruptCompletion","_didIteratorError","_iteratorError","chunk","_context2","transform","return","finish","abrupt","method","_ref3","_callee4","source","decoder","buf","_iteratorAbruptCompletion2","_didIteratorError2","_iteratorError2","lines","i","l","_context4","TextDecoder","decode","trim","parse","isAsyncIterable","isNodeReadableStream","iter","Symbol","asyncIterator","bind","destroy","isWebReadableStream","reader","getReader","_callee5","_yield$_awaitAsyncGen","_context5","read","releaseLock","Object","prototype","hasOwnProperty","call","streamToAsyncIterator","post","put","delete","_inherits","_createSuper","_wrapNativeSuper","_Error","_super","_this","message","Error","AbortError","_Error2","_super2","_this2","_Error3","_super3","_this3","statusText","_assertThisInitialized","_slicedToArray","default","fetchWithProgress","request","XMLHttpRequest","open","Infinity","overrideMimeType","_step$value","setRequestHeader","onabort","onUploadProgress","upload","onprogress","responseType","handleEvent","event","type","error","ResponseWithURL","responseURL","status","parseHeaders","getAllResponseHeaders","onerror","onload","ontimeout","send","fetchWithStreaming","input","line","index","indexOf","slice","_Response","defineProperty","utils_1","encodeRecipient","recipient","encRec","encrypted_key","fromBase64url","header","decodeRecipient","encoded","toBase64url","fromSplit","_split","protectedHeader","iv","jwe","ciphertext","protected","tag","recipients","aad","map","unprotected","encode","encJwe","signing_1","__importDefault","encryption_1","cbor","__importStar","isDagJWS","jose","payload","Array","isArray","signatures","isDagJWE","toGeneral","obj","encodedJose","Uint8Array","data","isEncodedJWE","cid_1","encodeSignature","signature","decodeSignature","sign","link","CID","jws","decoded","base64_1","b","base64url","concat","LOAD_BASE","Multibases","_basesByName","_basesByPrefix","_loadBase","loadBase","bases","addBase","prefix","_getBase","nameOrPrefix","values","LOAD_CODEC","codeOrName","Multicodecs","_codecsByName","_codecsByCode","_loadCodec","loadCodec","codecs","codec","addCodec","code","_getCodec","table","LOAD_HASHER","Multihashes","_hashersByName","_hashersByCode","_loadHasher","loadHasher","hashers","hasher","addHasher","_getHasher","CID_CBOR_TAG","encodeOptions","float64","typeEncoders","asCID","cid","bytes","byteLength","cborg","number","num","Number","isNaN","decodeOptions","allowIndefinite","coerceUndefinedToNull","allowNaN","allowInfinity","allowBigInt","strict","useMaps","tags","subarray","node","JSONEncoder","_Array","_Type$uint$major","_Type$negint$major","_Type$bytes$major","_Type$string$major","_Type$array$major","_Type$map$major","_Type$tag$major","_Type$float$major","inRecursive","recurs","Type","elements","push","token","is","String","isa","charCodeAt","_buf","_token","encodeErrPrefix","byts","fromString","asU8A","dp","defaultEncodeOptions","addBreakTokens","mapSorter","e1","e2","keyToken1","keyToken2","Tokenizer","pos","modeStack","lastToken","c","ch","str","decodeErrPrefix","fromCharCode","_toConsumableArray","startPos","negative","float","swallow","chars","includes","Token","numStr","parseFloat","isSafeInteger","BigInt","readu4","u4","readUtf8Char","secondByte","thirdByte","fourthByte","tempCodePoint","firstByte","codePoint","bytesPerSequence","ch1","decodeCodePointsArray","parseString","expect","parseNumber","skipWhitespace","currentMode","parseValue","bytesEncoder","bytesString","base64","cidString","Buffer","DagJsonTokenizer","_cborgJson$Tokenizer","tokenBuffer","_get","_getPrototypeOf","_next","keyToken","valueToken","innerKeyToken","innerValueToken","cborgJson","allowUndefined","assign","encodeCustom","tokenizer","_decode","word","boundry","includeBoundaries","v4","v6segment","v6","replace","v46Exact","RegExp","v4exact","v6exact","ipRegex","exact","flagMap","global","ignoreCase","multiline","dotAll","sticky","unicode","clonedRegexp","regexp","flags","keys","flag","join","lastIndex","isMatch","regex","string","function_","wrappedFunction","configurable","functionTimeout","cloneRegexp","test","maxIPv4Length","maxIPv6Length","isIP","isIPv6","isV4","isV6","toBytes","ip","result","offset","forEach","byte","parseInt","sections","v4Buffer","uint8ArrayToString","splice","unshift","argv","_length","view","DataView","buffer","getUint16","V","names","codes","createProtocol","size","resolvable","Boolean","getProtocol","proto","row","convertToString","ipBuff","ipString","bytes2ip","bytes2port","varint","bytes2str","address","bytes2mh","bytes2onion","hash","bytes2mb","convertToBytes","ip2bytes","port2bytes","uint8ArrayFromString","from","uint8ArrayConcat","str2bytes","mh","Digest","base58btc","multihash","mh2bytes","addr","base32","port","portBuf","onion2bytes","onion32bytes","mbstr","mb","anybaseDecoder","mb2bytes","decoders","acc","or","d","ArrayBuffer","setUint16","byteOffset","addrBytes","portBytes","tuplesToStringTuples","tuples","tup","protoFromTuple","tuplesToBytes","fromBytes","sizeForAddr","p","bytesToTuples","ParseError","bytesToString","parts","cleanPath","stringTuplesToString","stringToBytes","a","part","stringToStringTuples","validateBytes","filter","inspect","for","DNS_CODES","P2P_CODES","resolvers","Map","symbol","Multiaddr","charAt","isMultiaddr","transport","protoCodes","family","host","protos","addrString","lastIndexOf","stringTuples","tuple","ipfs","peerIdStr","_unused","uint8ArrayEquals","_resolve","resolvableProto","resolver","addresses","find","errCode","toOptions","some","durationRE","format","_","units","unitRatio","toLowerCase","nanosecond","ns","us","microsecond","millisecond","second","sec","minute","min","m","hour","hr","h","day","week","wk","w","month","year","yr","y","logger","debug","trace","v","MAX_IPV6_LENGTH","MAX_IPV4_LENGTH","parser","Parser","fn","target","readAtomically","char","readChar","sep","inner","readGivenChar","radix","maxDigits","allowZeroPrefix","maxBytes","digitCount","leadingChar","peekChar","hasLeadingZero","maxValue","Math","pow","digit","_this4","out","ix","readSeparator","readNumber","_this5","readGroups","groups","ipv4","readIPv4Addr","group","head","_readGroups","_readGroups2","headSize","headIp4","tail","limit","_readGroups3","tailSize","_this$readIPv4Addr","readIPv6Addr","isIPv4","new","parseWith","parseIPv4","parseIPv6","readIPAddr","parseIP","src","ALPHABET","BASE_MAP","j","x","xc","BASE","LEADER","FACTOR","log","iFACTOR","decodeUnsafe","psz","zeroes","b256","carry","it3","it4","vch","isView","pbegin","pend","b58","it1","it2","repeat","coerce","o","constructor","Encoder","baseEncode","Decoder","baseDecode","codePointAt","prefixCodePoint","text","ComposedDecoder","RangeError","left","right","Codec","encoder","baseX","_ref4","alphabet","_basex","basex","rfc4648","_ref5","bitsPerChar","pad","mask","bits","end","written","SyntaxError","identity","TextEncoder","base2","base8","base10","base16","base16upper","base32upper","base32pad","base32padupper","base32hex","base32hexupper","base32hexpad","base32hexpadupper","base32z","base36","base36upper","base58flickr","base64pad","base64urlpad","alphabetBytesToChars","reduce","alphabetCharsToBytes","base256emoji","byt","encode_1","oldOffset","INT","MSB","MSBALL","shift","counter","REST$1","MSB$1","N1","N2","N3","N4","N5","N6","N7","N8","N9","encodingLength","encodeTo","int","create","digest","sizeOffset","digestOffset","_varint$decode","_varint$decode2","_varint$decode3","_varint$decode4","_ref","Hasher","sha","crypto","subtle","sha256","sha512","textEncoder","textDecoder","version","toStringV0","baseCache","toStringV1","cache","WeakMap","_Symbol$toStringTag","_Symbol$for","DAG_PB_CODE","SHA_256_CODE","createV0","_this$multihash","createV1","other","equals","unknown","aa","bb","ii","equalBytes","encodeCID","cidSymbol","_CID$decodeFirst","decodeFirst","_CID$decodeFirst2","specs","inspectBytes","prefixSize","multihashSize","multihashBytes","digestBytes","digestSize","multihashCode","initialBytes","_parseCIDtoBytes","parseCIDtoBytes","_parseCIDtoBytes2","toStringTag","codeOffset","hashOffset","identityBase","base58","sha2","asUint8Array","allocUnsafe","_globalThis$Buffer2","createCodec","substring","ascii","utf8","hex","latin1","binary","array","encoding","arrays","curr","output","arr","_varint$decode$bytes","_varint$decode$bytes2","DefaultMultiaddr","_DefaultMultiaddr_string","_DefaultMultiaddr_tuples","_DefaultMultiaddr_stringTuples","_a","__classPrivateFieldGet","__classPrivateFieldSet","zone","tcp","udp","ip4","ip6","dns6","ip6zone","reduceValue","Reducers","protocol","assumeHttp","explicitPort","tcpUri","dnsaddr","dns4","p2p","https","ws","wss","multiaddrToUri","ma","_parts$shift","_parts$shift2","toUrlString","mergeOpts","DEFAULT_PROTOCOL","location","DEFAULT_HOST","hostname","DEFAULT_PORT","normalizeOptions","agent","apiPath","Agent","getAgent","keepAlive","maxSockets","errorHandler","msg","startsWith","Message","KEBAB_REGEX","kebabCase","match","parseTimeout","parseDuration","Client","_HTTP","append","configure","modeToString","mode","padStart","parseMtime","mtime","secs","nsecs","Seconds","FractionalNanoseconds","getTime","floor","toUrlSearchParams","arg","hashAlg","_objectWithoutProperties","_excluded","mtimeNsecs","urlSearchParams","createWantlist","api","_wantlist","_args","Keys","k","createWantlistForPeer","_wantlistForPeer","peerId","peer","baseDecoder","LIBP2P_KEY_CODE","MARSHALLED_ED225519_PUBLIC_KEY_LENGTH","MARSHALLED_SECP256K1_PUBLIC_KEY_LENGTH","PeerIdImpl","init","privateKey","enumerable","writable","id","_id$multihash","peerIdFromString","RSAPeerIdImpl","_PeerIdImpl","publicKey","Ed25519PeerIdImpl","_PeerIdImpl2","Secp256k1PeerIdImpl","_PeerIdImpl3","_decoder","peerIdFromCID","peerIdFromBytes","createStat","_stat","toCoreInterface","provideBufLen","ProvideBufLen","wantlist","Wantlist","peers","Peers","blocksReceived","BlocksReceived","dataReceived","DataReceived","blocksSent","BlocksSent","dataSent","DataSent","dupBlksReceived","DupBlksReceived","dupDataReceived","DupDataReceived","createUnwant","_unwant","createGet","arrayBuffer","iterable","async","sync","retry","AsyncFromSyncIterator","AsyncFromSyncIteratorContinuation","r","ret","thr","isBytes","isBlob","isFileObject","isReadableStream","normaliseContent","_normaliseContent","peekable","_yield$peekable$peek","browserStreamToIt","itPeekable","peek","itToBlob","isInteger","t2","t3","t4","_itToBlob","_OverloadYield","kind","AsyncGenerator","gen","front","back","resume","overloaded","nextKey","settle","_invoke","waiting","pump","_normaliseCandidateMultiple","_readableState","toFileObject","_x3","_x4","_toFileObject","file","parseMode","normaliseInput","normaliseCandidateMultiple","multipartRequest","_multipartRequest","formData","total","fileSuffix","fieldName","qs","FormData","encodeURIComponent","File","abortSignal","_len","_key","createPut","_put","t5","Key","createRm","_rm","removed","Hash","Size","createBlock","config","rm","stat","createAdd","_add","_yield$res$json","createClear","_clear","createList","_list","createReset","_reset","createBootstrap","add","clear","list","reset","createApply","_apply","profile","original","OldCfg","updated","NewCfg","objectToCamel","caps","camelObj","createProfiles","Value","createGetAll","getAll","createReplace","createSet","params","encodeParam","bool","createConfig","profiles","createExport","_dagExport","root","_x5","getBlock","load","lastCid","_cid","block","getCodec","_x6","remainderPath","createBlockGet","entry","localResolve","first","last","createImport","_dagImport","Root","Cid","PinErrorMsg","pinRoots","pinErrorMsg","dagNode","settings","serialized","storeCodec","inputCodec","createResolve","ipfsPath","RemPath","createDag","export","import","mapEvent","ID","messageType","messageName","closer","Responses","Addrs","multiaddrs","protocols","providers","_ref2","_event$ID","Extra","createFindPeer","_findPeer","createFindProvs","_findProvs","createProvide","_provide","cids","recursive","cidArr","t6","t7","createQuery","_query","createDht","findPeer","findProvs","provide","query","createCmds","_cmds","createNet","_net","createSys","_sys","createDiag","cmds","net","sys","createChmod","_chmod","createCp","_cp","sources","destination","sourceArr","createFlush","_flush","objectToCamelWithMetadata","createLs","_ls","long","Entries","createMkdir","_mkdir","createMv","_mv","createRead","_read","count","toIterable","WithLocality","createTouch","_touch","createWrite","_write","streamChannels","createFiles","chmod","cp","flush","ls","mkdir","mv","touch","write","exportKey","password","createGen","_gen","_importKey","pem","createInfo","info","createRename","_rename","oldName","newName","createKey","rename","createLevel","_level","subsystem","level","Strings","createTail","_tail","createLog","createPublish","_publish","Path","createCancel","_cancel","createState","_state","createSubs","_subs","createPubsub","cancel","state","subs","createName","publish","pubsub","createData","_data","dataEncoding","Data","Links","Name","Tsize","createLinks","_links","createNew","_newObject","template","dagPut","createDagPut","createAddLink","_addLink","dLink","createAppendData","_appendData","createRmLink","_rmLink","createSetData","_setData","createPatch","addLink","appendData","rmLink","setData","createObject","links","patch","_normaliseInput","_iterator3","_step3","_iterator4","_step4","_iterator5","_first","_cid2","_obj","toPin","pin","metadata","createAddAll","_addAll","Pins","paths","_i","_Object$keys","Metadata","createRmAll","_rmAll","decodePin","Status","encodeService","service","encodeQuery","force","encodeAddParams","background","origins","origin","client","encodeEndpoint","href","decodeRemoteService","Service","endpoint","ApiEndpoint","Stat","decodeStat","_json$PinCount","PinCount","Pinning","Pinned","pinCount","queued","Queued","pinning","pinned","failed","Failed","_yield$response$json","RemoteServices","createService","createRemote","rmAll","createPin","addAll","remote","rpcArrayToTextArray","strings","rpcToText","rpcToBytes","rpcToBigInt","textToUrlSafeRpc","_yield$yield$api$post","createPeers","_peers","topic","createSubscribe","subsTracker","_subscribe","handler","fail","ffWorkaround","subscribe","catch","unsubscribe","readMessages","onMessage","onEnd","onError","_readMessages","sequenceNumber","seqno","topicIDs","isAbortError","createUnsubscribe","_unsubscribe","SubscriptionTracker","topicSubs","unsubs","subscriptionTracker","createLocal","_refsLocal","createRefs","refs","args","argsArr","local","createGc","_gc","numObjects","NumObjects","repoSize","RepoSize","repoPath","RepoPath","Version","storageMax","StorageMax","createVersion","_version","createRepo","gc","createBw","_bw","stats","totalIn","TotalIn","totalOut","TotalOut","rateIn","RateIn","rateOut","RateOut","createStats","bitswap","createBitswap","repo","bw","createAddrs","_addrs","addrs","createConnect","_connect","createDisconnect","_disconnect","createLocalAddrs","_localAddrs","Addr","Peer","muxer","Muxer","latency","Latency","streams","Streams","direction","Direction","createSwarm","connect","disconnect","localAddrs","progressFn","progress","createProgressHandler","createOnUploadProgress","loaded","position","_parts$index","toAsyncIterable","_toAsyncIterable","thing","blobToIt","_normaliseCandidateSingle","normaliseCandidateSingle","createCat","_cat","createCommands","commands","createDns","dns","domain","createGetEndpointConfig","compressionLevel","createId","_id","createIsOnline","_isOnline","pathStr","mapLink","_mapLink","typeOf","Mode","Mtime","MtimeNsecs","Objects","createMount","_mount","createPing","_ping","createStart","createStop","_stop","t8","multibaseCodecs","ipld","multibases","blockCodecs","dagPB","dagCBOR","dagJSON","dagJOSE","multicodecs","multihashHashers","hashes","multihashes","wantlistForPeer","unwant","bootstrap","cat","dag","dht","diag","files","getEndpointConfig","isOnline","mount","object","ping","swarm","globSource","globSourceImport"],"sourceRoot":""}